// $ANTLR 3.4 D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g 2012-08-13 17:17:04

  package pythonProvenance;
  import pythonProvenance.commands.*;
  import java.util.*;
  import org.antlr.runtime.BitSet;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked"})
public class PythonProvenanceTree extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALT_NOTEQUAL", "AMPER", "AMPEREQUAL", "AND", "ARGUMENTS", "AS", "ASSIGN", "ASSIGN_CMD", "AT", "BACKQUOTE", "CIRCUMFLEX", "CIRCUMFLEXEQUAL", "CLASSVARIABLE_CMD", "CLASS_CMD", "COLON", "COMMA", "COMMENT", "COMPLEX", "CONTINUED_LINE", "DEDENT", "DICTIONARY_CMD", "DICTMAKER_CMD", "DICT_ARGS", "DIGITS", "DOT", "DOTTED_NAME", "DOUBLESLASH", "DOUBLESLASHEQUAL", "DOUBLESTAR", "DOUBLESTAREQUAL", "DOUBLE_TYPE", "ELIF_CLAUSES", "ELIF_CMD", "ELSE_CMD", "EQUAL", "ESC", "EXCEPT_CMD", "EXPRESSION", "Exponent", "FINALLY_CMD", "FLOAT", "FORLOOP_CMD", "GREATER", "GREATEREQUAL", "IF", "IFBLOCK", "IF_CMD", "IMPORT_ARGS", "IMPORT_CMD", "IMPORT_EQUIV", "IMPORT_NAME", "IN", "INDENT", "INNER_BRANCH", "INT", "INT_TYPE", "IS", "ISNOT", "LBRACK", "LCURLY", "LEADING_WS", "LEFTSHIFT", "LEFTSHIFTEQUAL", "LESS", "LESSEQUAL", "LISTCOMPREHENSION_CMD", "LISTCONDITION_CMD", "LISTLOOPCONTROL_CMD", "LISTMAKER_CMD", "LIST_ARGS", "LONGINT", "LONG_TYPE", "LPAREN", "MINUS", "MINUSEQUAL", "NAME", "NEWLINE", "NOT", "NOTEQUAL", "NOTIN", "NO_ARGS", "OR", "OUTER_FUNCTION_ARGS", "OUTER_FUNCTION_CMD", "PERCENT", "PERCENTEQUAL", "PLUS", "PLUSEQUAL", "PRINT", "PRINT_ARGS", "PRINT_CMD", "RBRACK", "RCURLY", "RETURN_CMD", "RIGHTSHIFT", "RIGHTSHIFTEQUAL", "RPAREN", "SEMI", "SLASH", "SLASHEQUAL", "STAR", "STAREQUAL", "STRING", "STRING_TYPE", "SUBSCRIPTS", "TILDE", "TRAILER", "TRIAPOS", "TRIQUOTE", "TRYBLOCK", "TRY_CMD", "UNARY_EXPRESSION", "VALUETYPE", "VARIABLE_CMD", "VBAR", "VBAREQUAL", "WHILEBLOCK", "WHILE_CMD", "WS", "'assert'", "'break'", "'class'", "'continue'", "'def'", "'del'", "'elif'", "'else'", "'except'", "'exec'", "'finally'", "'for'", "'from'", "'global'", "'import'", "'pass'", "'raise'", "'return'", "'try'", "'while'", "'with'"
    };

    public static final int EOF=-1;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int ALT_NOTEQUAL=4;
    public static final int AMPER=5;
    public static final int AMPEREQUAL=6;
    public static final int AND=7;
    public static final int ARGUMENTS=8;
    public static final int AS=9;
    public static final int ASSIGN=10;
    public static final int ASSIGN_CMD=11;
    public static final int AT=12;
    public static final int BACKQUOTE=13;
    public static final int CIRCUMFLEX=14;
    public static final int CIRCUMFLEXEQUAL=15;
    public static final int CLASSVARIABLE_CMD=16;
    public static final int CLASS_CMD=17;
    public static final int COLON=18;
    public static final int COMMA=19;
    public static final int COMMENT=20;
    public static final int COMPLEX=21;
    public static final int CONTINUED_LINE=22;
    public static final int DEDENT=23;
    public static final int DICTIONARY_CMD=24;
    public static final int DICTMAKER_CMD=25;
    public static final int DICT_ARGS=26;
    public static final int DIGITS=27;
    public static final int DOT=28;
    public static final int DOTTED_NAME=29;
    public static final int DOUBLESLASH=30;
    public static final int DOUBLESLASHEQUAL=31;
    public static final int DOUBLESTAR=32;
    public static final int DOUBLESTAREQUAL=33;
    public static final int DOUBLE_TYPE=34;
    public static final int ELIF_CLAUSES=35;
    public static final int ELIF_CMD=36;
    public static final int ELSE_CMD=37;
    public static final int EQUAL=38;
    public static final int ESC=39;
    public static final int EXCEPT_CMD=40;
    public static final int EXPRESSION=41;
    public static final int Exponent=42;
    public static final int FINALLY_CMD=43;
    public static final int FLOAT=44;
    public static final int FORLOOP_CMD=45;
    public static final int GREATER=46;
    public static final int GREATEREQUAL=47;
    public static final int IF=48;
    public static final int IFBLOCK=49;
    public static final int IF_CMD=50;
    public static final int IMPORT_ARGS=51;
    public static final int IMPORT_CMD=52;
    public static final int IMPORT_EQUIV=53;
    public static final int IMPORT_NAME=54;
    public static final int IN=55;
    public static final int INDENT=56;
    public static final int INNER_BRANCH=57;
    public static final int INT=58;
    public static final int INT_TYPE=59;
    public static final int IS=60;
    public static final int ISNOT=61;
    public static final int LBRACK=62;
    public static final int LCURLY=63;
    public static final int LEADING_WS=64;
    public static final int LEFTSHIFT=65;
    public static final int LEFTSHIFTEQUAL=66;
    public static final int LESS=67;
    public static final int LESSEQUAL=68;
    public static final int LISTCOMPREHENSION_CMD=69;
    public static final int LISTCONDITION_CMD=70;
    public static final int LISTLOOPCONTROL_CMD=71;
    public static final int LISTMAKER_CMD=72;
    public static final int LIST_ARGS=73;
    public static final int LONGINT=74;
    public static final int LONG_TYPE=75;
    public static final int LPAREN=76;
    public static final int MINUS=77;
    public static final int MINUSEQUAL=78;
    public static final int NAME=79;
    public static final int NEWLINE=80;
    public static final int NOT=81;
    public static final int NOTEQUAL=82;
    public static final int NOTIN=83;
    public static final int NO_ARGS=84;
    public static final int OR=85;
    public static final int OUTER_FUNCTION_ARGS=86;
    public static final int OUTER_FUNCTION_CMD=87;
    public static final int PERCENT=88;
    public static final int PERCENTEQUAL=89;
    public static final int PLUS=90;
    public static final int PLUSEQUAL=91;
    public static final int PRINT=92;
    public static final int PRINT_ARGS=93;
    public static final int PRINT_CMD=94;
    public static final int RBRACK=95;
    public static final int RCURLY=96;
    public static final int RETURN_CMD=97;
    public static final int RIGHTSHIFT=98;
    public static final int RIGHTSHIFTEQUAL=99;
    public static final int RPAREN=100;
    public static final int SEMI=101;
    public static final int SLASH=102;
    public static final int SLASHEQUAL=103;
    public static final int STAR=104;
    public static final int STAREQUAL=105;
    public static final int STRING=106;
    public static final int STRING_TYPE=107;
    public static final int SUBSCRIPTS=108;
    public static final int TILDE=109;
    public static final int TRAILER=110;
    public static final int TRIAPOS=111;
    public static final int TRIQUOTE=112;
    public static final int TRYBLOCK=113;
    public static final int TRY_CMD=114;
    public static final int UNARY_EXPRESSION=115;
    public static final int VALUETYPE=116;
    public static final int VARIABLE_CMD=117;
    public static final int VBAR=118;
    public static final int VBAREQUAL=119;
    public static final int WHILEBLOCK=120;
    public static final int WHILE_CMD=121;
    public static final int WS=122;

    // delegates
    public TreeParser[] getDelegates() {
        return new TreeParser[] {};
    }

    // delegators


    public PythonProvenanceTree(TreeNodeStream input) {
        this(input, new RecognizerSharedState());
    }
    public PythonProvenanceTree(TreeNodeStream input, RecognizerSharedState state) {
        super(input, state);
    }

    public String[] getTokenNames() { return PythonProvenanceTree.tokenNames; }
    public String getGrammarFileName() { return "D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g"; }


    	// for commands
    	private ArrayList<Command> commandList = new ArrayList<Command>();
    	public List<Command> getCommandList(){
    		return commandList;
    	}
    	
    	private ArrayList<ImportEquivalent> importPairsList = new ArrayList<ImportEquivalent>();
    	public List<ImportEquivalent> getImportPairsList(){
    		return importPairsList;
    	}
    	
    	private ArrayList<Command> classList = new ArrayList<Command>();
    	public List<Command> getClassList(){
    		return classList;
    	}
    	
    	public VariableCommand a;
    	public DatatypeCommand b;
    	public String str;
    	public ImportEquivalent c;
    	public ElifClauseCommand d;
    	public int line;




    // $ANTLR start "single_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:42:1: single_input : ( simple_stmt | compound_stmt );
    public final void single_input() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:42:14: ( simple_stmt | compound_stmt )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( ((LA1_0 >= ALT_NOTEQUAL && LA1_0 <= AND)||LA1_0==ASSIGN||(LA1_0 >= CIRCUMFLEX && LA1_0 <= CIRCUMFLEXEQUAL)||(LA1_0 >= DOUBLESLASH && LA1_0 <= DOUBLESTAREQUAL)||LA1_0==EQUAL||LA1_0==EXPRESSION||(LA1_0 >= GREATER && LA1_0 <= GREATEREQUAL)||LA1_0==IMPORT_CMD||LA1_0==IN||(LA1_0 >= IS && LA1_0 <= ISNOT)||(LA1_0 >= LEFTSHIFT && LA1_0 <= LESSEQUAL)||(LA1_0 >= MINUS && LA1_0 <= MINUSEQUAL)||(LA1_0 >= NOT && LA1_0 <= NOTIN)||LA1_0==OR||(LA1_0 >= PERCENTEQUAL && LA1_0 <= PLUSEQUAL)||LA1_0==PRINT_CMD||(LA1_0 >= RETURN_CMD && LA1_0 <= RIGHTSHIFTEQUAL)||(LA1_0 >= SLASH && LA1_0 <= STAREQUAL)||LA1_0==UNARY_EXPRESSION||(LA1_0 >= VBAR && LA1_0 <= VBAREQUAL)) ) {
                alt1=1;
            }
            else if ( (LA1_0==CLASS_CMD||LA1_0==FORLOOP_CMD||LA1_0==IFBLOCK||LA1_0==OUTER_FUNCTION_CMD||LA1_0==TRYBLOCK||LA1_0==WHILEBLOCK) ) {
                alt1=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }
            switch (alt1) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:42:17: simple_stmt
                    {
                    pushFollow(FOLLOW_simple_stmt_in_single_input48);
                    simple_stmt();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:43:17: compound_stmt
                    {
                    pushFollow(FOLLOW_compound_stmt_in_single_input66);
                    compound_stmt();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "single_input"



    // $ANTLR start "file_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:46:1: file_input : ( stmt )* ;
    public final void file_input() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:46:12: ( ( stmt )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:46:14: ( stmt )*
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:46:14: ( stmt )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0 >= ALT_NOTEQUAL && LA2_0 <= AND)||LA2_0==ASSIGN||(LA2_0 >= CIRCUMFLEX && LA2_0 <= CIRCUMFLEXEQUAL)||LA2_0==CLASS_CMD||(LA2_0 >= DOUBLESLASH && LA2_0 <= DOUBLESTAREQUAL)||LA2_0==EQUAL||LA2_0==EXPRESSION||(LA2_0 >= FORLOOP_CMD && LA2_0 <= GREATEREQUAL)||LA2_0==IFBLOCK||LA2_0==IMPORT_CMD||LA2_0==IN||(LA2_0 >= IS && LA2_0 <= ISNOT)||(LA2_0 >= LEFTSHIFT && LA2_0 <= LESSEQUAL)||(LA2_0 >= MINUS && LA2_0 <= MINUSEQUAL)||(LA2_0 >= NOT && LA2_0 <= NOTIN)||LA2_0==OR||LA2_0==OUTER_FUNCTION_CMD||(LA2_0 >= PERCENTEQUAL && LA2_0 <= PLUSEQUAL)||LA2_0==PRINT_CMD||(LA2_0 >= RETURN_CMD && LA2_0 <= RIGHTSHIFTEQUAL)||(LA2_0 >= SLASH && LA2_0 <= STAREQUAL)||LA2_0==TRYBLOCK||LA2_0==UNARY_EXPRESSION||(LA2_0 >= VBAR && LA2_0 <= WHILEBLOCK)) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:46:15: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_file_input90);
            	    stmt();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "file_input"



    // $ANTLR start "eval_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:49:1: eval_input : testlist ;
    public final void eval_input() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:49:11: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:50:8: testlist
            {
            pushFollow(FOLLOW_testlist_in_eval_input118);
            testlist();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "eval_input"



    // $ANTLR start "decorators"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:53:1: decorators : ( decorator )+ ;
    public final void decorators() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:53:11: ( ( decorator )+ )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:53:13: ( decorator )+
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:53:13: ( decorator )+
            int cnt3=0;
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==AT) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:53:13: decorator
            	    {
            	    pushFollow(FOLLOW_decorator_in_decorators140);
            	    decorator();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt3 >= 1 ) break loop3;
                        EarlyExitException eee =
                            new EarlyExitException(3, input);
                        throw eee;
                }
                cnt3++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "decorators"



    // $ANTLR start "decorator"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:56:1: decorator : AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE ;
    public final void decorator() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:56:10: ( AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:56:12: AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE
            {
            match(input,AT,FOLLOW_AT_in_decorator159); 

            pushFollow(FOLLOW_dotted_attr_in_decorator161);
            dotted_attr();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:56:27: ( LPAREN ( arglist )? RPAREN )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==LPAREN) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:56:28: LPAREN ( arglist )? RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_decorator164); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:56:35: ( arglist )?
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==ARGUMENTS) ) {
                        alt4=1;
                    }
                    switch (alt4) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:56:35: arglist
                            {
                            pushFollow(FOLLOW_arglist_in_decorator166);
                            arglist();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input,RPAREN,FOLLOW_RPAREN_in_decorator169); 

                    }
                    break;

            }


            match(input,NEWLINE,FOLLOW_NEWLINE_in_decorator173); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "decorator"



    // $ANTLR start "dotted_attr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:59:1: dotted_attr : NAME ( DOT NAME )* ;
    public final void dotted_attr() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:60:5: ( NAME ( DOT NAME )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:60:7: NAME ( DOT NAME )*
            {
            match(input,NAME,FOLLOW_NAME_in_dotted_attr195); 

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:60:12: ( DOT NAME )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==DOT) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:60:13: DOT NAME
            	    {
            	    match(input,DOT,FOLLOW_DOT_in_dotted_attr198); 

            	    match(input,NAME,FOLLOW_NAME_in_dotted_attr200); 

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dotted_attr"



    // $ANTLR start "funcdef"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:63:1: funcdef returns [Command result] : ^( OUTER_FUNCTION_CMD id1= NAME id2= parameters id3= suite ) ;
    public final Command funcdef() throws RecognitionException {
        Command result = null;


        CommonTree id1=null;
        Command id2 =null;

        List id3 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:64:2: ( ^( OUTER_FUNCTION_CMD id1= NAME id2= parameters id3= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:64:4: ^( OUTER_FUNCTION_CMD id1= NAME id2= parameters id3= suite )
            {
            match(input,OUTER_FUNCTION_CMD,FOLLOW_OUTER_FUNCTION_CMD_in_funcdef221); 

            match(input, Token.DOWN, null); 
            id1=(CommonTree)match(input,NAME,FOLLOW_NAME_in_funcdef225); 

            pushFollow(FOLLOW_parameters_in_funcdef229);
            id2=parameters();

            state._fsp--;


            pushFollow(FOLLOW_suite_in_funcdef233);
            id3=suite();

            state._fsp--;


            match(input, Token.UP, null); 



            		if(id2!=null){
            			result = new FunctionDefinitionCommand((id1!=null?id1.getText():null), id2, id3, line);	
            			
            			int start = ((FunctionDefinitionCommand)(result)).findStartLine();
                    		((FunctionDefinitionCommand)(result)).setStartLine(start);
            			
            			System.out.println("***FunctionDefinition -> " + (id1!=null?id1.getText():null) + " Parameters: "+id2 + " Suite: "+id3 +" Start: " + ((FunctionDefinitionCommand)(result)).getStartLine() + " End: " + ((FunctionDefinitionCommand)(result)).getEndLine() + " " + result );
                			commandList.add(result);
                		}
                		else{
                			result = new FunctionDefinitionCommand((id1!=null?id1.getText():null), id3, line);	
                			
                			int start = ((FunctionDefinitionCommand)(result)).findStartLine();
                    		((FunctionDefinitionCommand)(result)).setStartLine(start);
                			
            			System.out.println("***FunctionDefinition -> " + (id1!=null?id1.getText():null) + " Suite: "+id3 +" Start: " + ((FunctionDefinitionCommand)(result)).getStartLine() + " End: " + ((FunctionDefinitionCommand)(result)).getEndLine() + " " + result );
                			commandList.add(result);
                		}
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "funcdef"



    // $ANTLR start "parameters"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:86:1: parameters returns [Command result] : (cmd= varargslist )? ;
    public final Command parameters() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:87:2: ( (cmd= varargslist )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:87:4: (cmd= varargslist )?
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:87:4: (cmd= varargslist )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==OUTER_FUNCTION_ARGS) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:87:5: cmd= varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_parameters261);
                    cmd=varargslist();

                    state._fsp--;


                    }
                    break;

            }



            		if(cmd!=null){
            			result = new ArgumentsCommand(cmd, line);
                    	 	System.out.println("Arguments:"+cmd+" "+" Line: " + line + " " +result);
                    	 	commandList.add(result);
                    	 }
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "parameters"


    protected static class varargslist_scope {
        List current;
    }
    protected Stack varargslist_stack = new Stack();



    // $ANTLR start "varargslist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:96:1: varargslist returns [List result] : ^( OUTER_FUNCTION_ARGS ( defparameter )+ ) ;
    public final List varargslist() throws RecognitionException {
        varargslist_stack.push(new varargslist_scope());
        List result = null;


        ((varargslist_scope)varargslist_stack.peek()).current = new ArrayList<Command>();
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:99:2: ( ^( OUTER_FUNCTION_ARGS ( defparameter )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:99:4: ^( OUTER_FUNCTION_ARGS ( defparameter )+ )
            {
            match(input,OUTER_FUNCTION_ARGS,FOLLOW_OUTER_FUNCTION_ARGS_in_varargslist295); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:99:26: ( defparameter )+
            int cnt8=0;
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( ((LA8_0 >= ALT_NOTEQUAL && LA8_0 <= AMPER)||LA8_0==AND||LA8_0==CIRCUMFLEX||LA8_0==DOUBLESLASH||LA8_0==DOUBLESTAR||LA8_0==EQUAL||LA8_0==EXPRESSION||(LA8_0 >= GREATER && LA8_0 <= GREATEREQUAL)||LA8_0==IN||(LA8_0 >= IS && LA8_0 <= ISNOT)||LA8_0==LEFTSHIFT||(LA8_0 >= LESS && LA8_0 <= LESSEQUAL)||LA8_0==MINUS||(LA8_0 >= NOT && LA8_0 <= NOTIN)||LA8_0==OR||LA8_0==PLUS||LA8_0==RIGHTSHIFT||LA8_0==SLASH||LA8_0==STAR||LA8_0==UNARY_EXPRESSION||LA8_0==VBAR) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:99:26: defparameter
            	    {
            	    pushFollow(FOLLOW_defparameter_in_varargslist297);
            	    defparameter();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        throw eee;
                }
                cnt8++;
            } while (true);


            match(input, Token.UP, null); 



            		result = ((varargslist_scope)varargslist_stack.peek()).current;
            		System.out.println("List:"+result);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            varargslist_stack.pop();
        }
        return result;
    }
    // $ANTLR end "varargslist"



    // $ANTLR start "defparameter"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:105:1: defparameter : id1= test ( ASSIGN test )? ;
    public final void defparameter() throws RecognitionException {
        Command id1 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:106:2: (id1= test ( ASSIGN test )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:106:4: id1= test ( ASSIGN test )?
            {
            pushFollow(FOLLOW_test_in_defparameter321);
            id1=test();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:106:13: ( ASSIGN test )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==ASSIGN) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:106:14: ASSIGN test
                    {
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_defparameter324); 

                    pushFollow(FOLLOW_test_in_defparameter326);
                    test();

                    state._fsp--;


                    }
                    break;

            }



            		((varargslist_scope)varargslist_stack.peek()).current.add(id1);
            		System.out.println("Current List:"+((varargslist_scope)varargslist_stack.peek()).current);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "defparameter"



    // $ANTLR start "stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:112:1: stmt : ( simple_stmt | compound_stmt );
    public final void stmt() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:112:7: ( simple_stmt | compound_stmt )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( ((LA10_0 >= ALT_NOTEQUAL && LA10_0 <= AND)||LA10_0==ASSIGN||(LA10_0 >= CIRCUMFLEX && LA10_0 <= CIRCUMFLEXEQUAL)||(LA10_0 >= DOUBLESLASH && LA10_0 <= DOUBLESTAREQUAL)||LA10_0==EQUAL||LA10_0==EXPRESSION||(LA10_0 >= GREATER && LA10_0 <= GREATEREQUAL)||LA10_0==IMPORT_CMD||LA10_0==IN||(LA10_0 >= IS && LA10_0 <= ISNOT)||(LA10_0 >= LEFTSHIFT && LA10_0 <= LESSEQUAL)||(LA10_0 >= MINUS && LA10_0 <= MINUSEQUAL)||(LA10_0 >= NOT && LA10_0 <= NOTIN)||LA10_0==OR||(LA10_0 >= PERCENTEQUAL && LA10_0 <= PLUSEQUAL)||LA10_0==PRINT_CMD||(LA10_0 >= RETURN_CMD && LA10_0 <= RIGHTSHIFTEQUAL)||(LA10_0 >= SLASH && LA10_0 <= STAREQUAL)||LA10_0==UNARY_EXPRESSION||(LA10_0 >= VBAR && LA10_0 <= VBAREQUAL)) ) {
                alt10=1;
            }
            else if ( (LA10_0==CLASS_CMD||LA10_0==FORLOOP_CMD||LA10_0==IFBLOCK||LA10_0==OUTER_FUNCTION_CMD||LA10_0==TRYBLOCK||LA10_0==WHILEBLOCK) ) {
                alt10=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }
            switch (alt10) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:112:10: simple_stmt
                    {
                    pushFollow(FOLLOW_simple_stmt_in_stmt348);
                    simple_stmt();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:113:4: compound_stmt
                    {
                    pushFollow(FOLLOW_compound_stmt_in_stmt353);
                    compound_stmt();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "stmt"



    // $ANTLR start "simple_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:116:1: simple_stmt returns [Command result] : cmd= small_stmt ;
    public final Command simple_stmt() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:117:2: (cmd= small_stmt )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:117:4: cmd= small_stmt
            {
            pushFollow(FOLLOW_small_stmt_in_simple_stmt378);
            cmd=small_stmt();

            state._fsp--;



            		//result = new Statements(cmd);
            		result = cmd;
            		//System.out.println("***Statements: " + cmd + " " + result);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "simple_stmt"



    // $ANTLR start "small_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:124:1: small_stmt returns [Command result] : (cmd= expr_stmt |cmd= print_stmt |cmd= import_stmt |cmd= flow_stmt );
    public final Command small_stmt() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:125:2: (cmd= expr_stmt |cmd= print_stmt |cmd= import_stmt |cmd= flow_stmt )
            int alt11=4;
            switch ( input.LA(1) ) {
            case ALT_NOTEQUAL:
            case AMPER:
            case AMPEREQUAL:
            case AND:
            case ASSIGN:
            case CIRCUMFLEX:
            case CIRCUMFLEXEQUAL:
            case DOUBLESLASH:
            case DOUBLESLASHEQUAL:
            case DOUBLESTAR:
            case DOUBLESTAREQUAL:
            case EQUAL:
            case EXPRESSION:
            case GREATER:
            case GREATEREQUAL:
            case IN:
            case IS:
            case ISNOT:
            case LEFTSHIFT:
            case LEFTSHIFTEQUAL:
            case LESS:
            case LESSEQUAL:
            case MINUS:
            case MINUSEQUAL:
            case NOT:
            case NOTEQUAL:
            case NOTIN:
            case OR:
            case PERCENTEQUAL:
            case PLUS:
            case PLUSEQUAL:
            case RIGHTSHIFT:
            case RIGHTSHIFTEQUAL:
            case SLASH:
            case SLASHEQUAL:
            case STAR:
            case STAREQUAL:
            case UNARY_EXPRESSION:
            case VBAR:
            case VBAREQUAL:
                {
                alt11=1;
                }
                break;
            case PRINT_CMD:
                {
                alt11=2;
                }
                break;
            case IMPORT_CMD:
                {
                alt11=3;
                }
                break;
            case RETURN_CMD:
                {
                alt11=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;

            }

            switch (alt11) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:125:4: cmd= expr_stmt
                    {
                    pushFollow(FOLLOW_expr_stmt_in_small_stmt405);
                    cmd=expr_stmt();

                    state._fsp--;



                    	   result = cmd; 
                    	   

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:128:9: cmd= print_stmt
                    {
                    pushFollow(FOLLOW_print_stmt_in_small_stmt419);
                    cmd=print_stmt();

                    state._fsp--;



                         		result = cmd;
                         		

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:131:9: cmd= import_stmt
                    {
                    pushFollow(FOLLOW_import_stmt_in_small_stmt433);
                    cmd=import_stmt();

                    state._fsp--;



                         		result = cmd;
                         		

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:134:9: cmd= flow_stmt
                    {
                    pushFollow(FOLLOW_flow_stmt_in_small_stmt446);
                    cmd=flow_stmt();

                    state._fsp--;



                         		result = cmd;
                         		

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "small_stmt"



    // $ANTLR start "print_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:139:1: print_stmt returns [Command result] : ^( PRINT_CMD cmd= printlist ) ;
    public final Command print_stmt() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:140:2: ( ^( PRINT_CMD cmd= printlist ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:140:4: ^( PRINT_CMD cmd= printlist )
            {
            match(input,PRINT_CMD,FOLLOW_PRINT_CMD_in_print_stmt472); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_printlist_in_print_stmt476);
            cmd=printlist();

            state._fsp--;


            match(input, Token.UP, null); 



            		result = new PrintCommand(cmd, line);
            		System.out.println("***PrintCommand -> Arguments: " + cmd +" Line: " + line + " " + result);
            		commandList.add(result);
            		Iterator<Command> cit = cmd.iterator();
            		while(cit.hasNext()){
            			commandList.remove(cit.next());
            		}
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "print_stmt"


    protected static class printlist_scope {
        List current;
    }
    protected Stack printlist_stack = new Stack();



    // $ANTLR start "printlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:151:1: printlist returns [List result] : ^( PRINT_ARGS ( print_argument )+ ) ;
    public final List printlist() throws RecognitionException {
        printlist_stack.push(new printlist_scope());
        List result = null;


        ((printlist_scope)printlist_stack.peek()).current = new ArrayList<Command>(); 
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:154:2: ( ^( PRINT_ARGS ( print_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:154:5: ^( PRINT_ARGS ( print_argument )+ )
            {
            match(input,PRINT_ARGS,FOLLOW_PRINT_ARGS_in_printlist518); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:154:18: ( print_argument )+
            int cnt12=0;
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( ((LA12_0 >= ALT_NOTEQUAL && LA12_0 <= AMPER)||LA12_0==AND||LA12_0==CIRCUMFLEX||LA12_0==DOUBLESLASH||LA12_0==DOUBLESTAR||LA12_0==EQUAL||LA12_0==EXPRESSION||(LA12_0 >= GREATER && LA12_0 <= GREATEREQUAL)||LA12_0==IN||(LA12_0 >= IS && LA12_0 <= ISNOT)||LA12_0==LEFTSHIFT||(LA12_0 >= LESS && LA12_0 <= LESSEQUAL)||LA12_0==MINUS||(LA12_0 >= NOT && LA12_0 <= NOTIN)||LA12_0==OR||LA12_0==PLUS||LA12_0==RIGHTSHIFT||LA12_0==SLASH||LA12_0==STAR||LA12_0==UNARY_EXPRESSION||LA12_0==VBAR) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:154:18: print_argument
            	    {
            	    pushFollow(FOLLOW_print_argument_in_printlist520);
            	    print_argument();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);


            match(input, Token.UP, null); 


             
            		result = ((printlist_scope)printlist_stack.peek()).current; 
            		System.out.println("List:"+result);
            		
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            printlist_stack.pop();
        }
        return result;
    }
    // $ANTLR end "printlist"



    // $ANTLR start "print_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:161:1: print_argument : cmd= test ;
    public final void print_argument() throws RecognitionException {
        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:161:16: (cmd= test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:161:18: cmd= test
            {
            pushFollow(FOLLOW_test_in_print_argument537);
            cmd=test();

            state._fsp--;



            		((printlist_scope)printlist_stack.peek()).current.add(cmd);
            		System.out.println("Current List:"+((printlist_scope)printlist_stack.peek()).current);
            		commandList.remove(cmd);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "print_argument"



    // $ANTLR start "import_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:169:1: import_stmt returns [Command result] : (cmd= import_name |cmd= import_from );
    public final Command import_stmt() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:170:2: (cmd= import_name |cmd= import_from )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==IMPORT_CMD) ) {
                int LA13_1 = input.LA(2);

                if ( (LA13_1==DOWN) ) {
                    int LA13_2 = input.LA(3);

                    if ( (LA13_2==NAME) ) {
                        alt13=2;
                    }
                    else if ( (LA13_2==IMPORT_ARGS) ) {
                        alt13=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 13, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:170:4: cmd= import_name
                    {
                    pushFollow(FOLLOW_import_name_in_import_stmt560);
                    cmd=import_name();

                    state._fsp--;


                     result = cmd ; 

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:171:4: cmd= import_from
                    {
                    pushFollow(FOLLOW_import_from_in_import_stmt570);
                    cmd=import_from();

                    state._fsp--;


                     result = cmd ; 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "import_stmt"



    // $ANTLR start "import_from"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:174:1: import_from returns [Command result] : ( ^( IMPORT_CMD id1= NAME cmd= import_as_names ) | ^( IMPORT_CMD id1= NAME id2= STAR ) );
    public final Command import_from() throws RecognitionException {
        Command result = null;


        CommonTree id1=null;
        CommonTree id2=null;
        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:175:2: ( ^( IMPORT_CMD id1= NAME cmd= import_as_names ) | ^( IMPORT_CMD id1= NAME id2= STAR ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==IMPORT_CMD) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==DOWN) ) {
                    int LA14_2 = input.LA(3);

                    if ( (LA14_2==NAME) ) {
                        int LA14_3 = input.LA(4);

                        if ( (LA14_3==STAR) ) {
                            alt14=2;
                        }
                        else if ( (LA14_3==IMPORT_ARGS) ) {
                            alt14=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 14, 3, input);

                            throw nvae;

                        }
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 14, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:175:4: ^( IMPORT_CMD id1= NAME cmd= import_as_names )
                    {
                    match(input,IMPORT_CMD,FOLLOW_IMPORT_CMD_in_import_from589); 

                    match(input, Token.DOWN, null); 
                    id1=(CommonTree)match(input,NAME,FOLLOW_NAME_in_import_from593); 

                    pushFollow(FOLLOW_import_as_names_in_import_from597);
                    cmd=import_as_names();

                    state._fsp--;


                    match(input, Token.UP, null); 



                    		result = new ImportCommand((id1!=null?id1.getText():null), cmd, line);
                    		System.out.println("***ImportCommand " + (id1!=null?id1.getText():null) + " " + cmd + " Line: "+ line + " " +result);
                    		commandList.add(result);
                    	

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:180:4: ^( IMPORT_CMD id1= NAME id2= STAR )
                    {
                    match(input,IMPORT_CMD,FOLLOW_IMPORT_CMD_in_import_from605); 

                    match(input, Token.DOWN, null); 
                    id1=(CommonTree)match(input,NAME,FOLLOW_NAME_in_import_from609); 

                    id2=(CommonTree)match(input,STAR,FOLLOW_STAR_in_import_from613); 

                    match(input, Token.UP, null); 



                    		String id3 = (id1!=null?id1.getText():null) + (id2!=null?id2.getText():null);
                    		result = new ImportCommand(id3, line);
                    		System.out.println("***ImportCommand " + id3 + " Line: "+ line + " " + result);
                    		commandList.add(result);
                    	

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "import_from"


    protected static class import_as_names_scope {
        List current;
    }
    protected Stack import_as_names_stack = new Stack();



    // $ANTLR start "import_as_names"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:187:1: import_as_names returns [List result] : ^( IMPORT_ARGS ( import_as_name )+ ) ;
    public final List import_as_names() throws RecognitionException {
        import_as_names_stack.push(new import_as_names_scope());
        List result = null;


        ((import_as_names_scope)import_as_names_stack.peek()).current = new ArrayList<Command>(); 
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:190:2: ( ^( IMPORT_ARGS ( import_as_name )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:190:5: ^( IMPORT_ARGS ( import_as_name )+ )
            {
            match(input,IMPORT_ARGS,FOLLOW_IMPORT_ARGS_in_import_as_names641); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:190:19: ( import_as_name )+
            int cnt15=0;
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==IMPORT_EQUIV) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:190:19: import_as_name
            	    {
            	    pushFollow(FOLLOW_import_as_name_in_import_as_names643);
            	    import_as_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            match(input, Token.UP, null); 


             
            		result = ((import_as_names_scope)import_as_names_stack.peek()).current; 
            		System.out.println("List:"+result);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            import_as_names_stack.pop();
        }
        return result;
    }
    // $ANTLR end "import_as_names"



    // $ANTLR start "import_as_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:197:1: import_as_name : ^( IMPORT_EQUIV id1= NAME (id2= NAME )? ) ;
    public final void import_as_name() throws RecognitionException {
        CommonTree id1=null;
        CommonTree id2=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:198:2: ( ^( IMPORT_EQUIV id1= NAME (id2= NAME )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:198:4: ^( IMPORT_EQUIV id1= NAME (id2= NAME )? )
            {
            match(input,IMPORT_EQUIV,FOLLOW_IMPORT_EQUIV_in_import_as_name666); 

            match(input, Token.DOWN, null); 
            id1=(CommonTree)match(input,NAME,FOLLOW_NAME_in_import_as_name670); 

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:198:31: (id2= NAME )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==NAME) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:198:31: id2= NAME
                    {
                    id2=(CommonTree)match(input,NAME,FOLLOW_NAME_in_import_as_name674); 

                    }
                    break;

            }


            match(input, Token.UP, null); 



            		if((id2!=null?id2.getText():null)!=null){
            			c = new ImportEquivalent ((id1!=null?id1.getText():null), (id2!=null?id2.getText():null), line);
            			System.out.println("***Import Equivalency " + (id1!=null?id1.getText():null) + " as " + (id2!=null?id2.getText():null) + " Line: "+ line + " " + c);
            		}
            		else{
            			c = new ImportEquivalent ((id1!=null?id1.getText():null), (id1!=null?id1.getText():null), line);
            			System.out.println("***Import Equivalency " + (id1!=null?id1.getText():null) + " as " + (id1!=null?id1.getText():null) + " Line: "+ line + " " + c);
            		}
            		importPairsList.add(c);
            		((import_as_names_scope)import_as_names_stack.peek()).current.add(c);
            		System.out.println("Current List:"+((import_as_names_scope)import_as_names_stack.peek()).current);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "import_as_name"


    protected static class dotted_as_names_scope {
        List current;
    }
    protected Stack dotted_as_names_stack = new Stack();



    // $ANTLR start "dotted_as_names"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:214:1: dotted_as_names returns [List result] : ^( IMPORT_ARGS ( dotted_as_name )+ ) ;
    public final List dotted_as_names() throws RecognitionException {
        dotted_as_names_stack.push(new dotted_as_names_scope());
        List result = null;


        ((dotted_as_names_scope)dotted_as_names_stack.peek()).current = new ArrayList<Command>(); 
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:217:2: ( ^( IMPORT_ARGS ( dotted_as_name )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:217:5: ^( IMPORT_ARGS ( dotted_as_name )+ )
            {
            match(input,IMPORT_ARGS,FOLLOW_IMPORT_ARGS_in_dotted_as_names708); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:217:19: ( dotted_as_name )+
            int cnt17=0;
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==IMPORT_EQUIV) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:217:19: dotted_as_name
            	    {
            	    pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names710);
            	    dotted_as_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        throw eee;
                }
                cnt17++;
            } while (true);


            match(input, Token.UP, null); 


             
            		result = ((dotted_as_names_scope)dotted_as_names_stack.peek()).current; 
            		System.out.println("List:"+result);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            dotted_as_names_stack.pop();
        }
        return result;
    }
    // $ANTLR end "dotted_as_names"



    // $ANTLR start "dotted_as_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:223:1: dotted_as_name : ( ^( IMPORT_EQUIV id1= IMPORT_NAME (id2= NAME )? ) | ^( IMPORT_EQUIV id1= NAME (id2= NAME )? ) );
    public final void dotted_as_name() throws RecognitionException {
        CommonTree id1=null;
        CommonTree id2=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:224:2: ( ^( IMPORT_EQUIV id1= IMPORT_NAME (id2= NAME )? ) | ^( IMPORT_EQUIV id1= NAME (id2= NAME )? ) )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==IMPORT_EQUIV) ) {
                int LA20_1 = input.LA(2);

                if ( (LA20_1==DOWN) ) {
                    int LA20_2 = input.LA(3);

                    if ( (LA20_2==IMPORT_NAME) ) {
                        alt20=1;
                    }
                    else if ( (LA20_2==NAME) ) {
                        alt20=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 20, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }
            switch (alt20) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:224:4: ^( IMPORT_EQUIV id1= IMPORT_NAME (id2= NAME )? )
                    {
                    match(input,IMPORT_EQUIV,FOLLOW_IMPORT_EQUIV_in_dotted_as_name728); 

                    match(input, Token.DOWN, null); 
                    id1=(CommonTree)match(input,IMPORT_NAME,FOLLOW_IMPORT_NAME_in_dotted_as_name732); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:224:38: (id2= NAME )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==NAME) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:224:38: id2= NAME
                            {
                            id2=(CommonTree)match(input,NAME,FOLLOW_NAME_in_dotted_as_name736); 

                            }
                            break;

                    }


                    match(input, Token.UP, null); 



                    		if((id2!=null?id2.getText():null)!=null){
                    			c = new ImportEquivalent ((id1!=null?id1.getText():null), (id2!=null?id2.getText():null), line);
                    			System.out.println("***Import Equivalency " + (id1!=null?id1.getText():null) + " as " + (id2!=null?id2.getText():null) + " Line: "+ line + " " + c);
                    		}
                    		else{
                    			c = new ImportEquivalent ((id1!=null?id1.getText():null), (id1!=null?id1.getText():null), line);
                    			System.out.println("***Import Equivalency " + (id1!=null?id1.getText():null) + " as " + (id1!=null?id1.getText():null) + " Line: "+ line + " " + c);
                    		}
                    		
                    		importPairsList.add(c);
                    		((dotted_as_names_scope)dotted_as_names_stack.peek()).current.add(c);
                    		System.out.println("Current List:"+((dotted_as_names_scope)dotted_as_names_stack.peek()).current);
                    	

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:238:4: ^( IMPORT_EQUIV id1= NAME (id2= NAME )? )
                    {
                    match(input,IMPORT_EQUIV,FOLLOW_IMPORT_EQUIV_in_dotted_as_name746); 

                    match(input, Token.DOWN, null); 
                    id1=(CommonTree)match(input,NAME,FOLLOW_NAME_in_dotted_as_name750); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:238:31: (id2= NAME )?
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==NAME) ) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:238:31: id2= NAME
                            {
                            id2=(CommonTree)match(input,NAME,FOLLOW_NAME_in_dotted_as_name754); 

                            }
                            break;

                    }


                    match(input, Token.UP, null); 



                    		if((id2!=null?id2.getText():null)!=null){
                    			c = new ImportEquivalent ((id1!=null?id1.getText():null), (id2!=null?id2.getText():null), line);
                    			System.out.println("***Import Equivalency " + (id1!=null?id1.getText():null) + " as " + (id2!=null?id2.getText():null) + " Line: "+ line + " " + c);
                    		}
                    		else{
                    			c = new ImportEquivalent ((id1!=null?id1.getText():null), (id1!=null?id1.getText():null), line);
                    			System.out.println("***Import Equivalency " + (id1!=null?id1.getText():null) + " as " + (id1!=null?id1.getText():null) + " Line: "+ line + " " + c);
                    		}
                    		
                    		importPairsList.add(c);
                    		((dotted_as_names_scope)dotted_as_names_stack.peek()).current.add(c);
                    		System.out.println("Current List:"+((dotted_as_names_scope)dotted_as_names_stack.peek()).current);
                    	

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dotted_as_name"



    // $ANTLR start "import_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:254:1: import_name returns [Command result] : ^( IMPORT_CMD cmd= dotted_as_names ) ;
    public final Command import_name() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:255:2: ( ^( IMPORT_CMD cmd= dotted_as_names ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:255:4: ^( IMPORT_CMD cmd= dotted_as_names )
            {
            match(input,IMPORT_CMD,FOLLOW_IMPORT_CMD_in_import_name775); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_dotted_as_names_in_import_name779);
            cmd=dotted_as_names();

            state._fsp--;


            match(input, Token.UP, null); 



            		result = new ImportCommand(cmd, line);
            		System.out.println("***ImportCommand " + cmd + " Line: "+ line + " " + result);
            		commandList.add(result);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "import_name"



    // $ANTLR start "expr_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:262:1: expr_stmt returns [Command result] : ( ^(op= ASSIGN id1= testlist id2= testlist ) | ^(op= PLUSEQUAL id1= testlist id2= testlist ) | ^(op= MINUSEQUAL id1= testlist id2= testlist ) | ^(op= STAREQUAL id1= testlist id2= testlist ) | ^(op= SLASHEQUAL id1= testlist id2= testlist ) | ^(op= PERCENTEQUAL id1= testlist id2= testlist ) | ^(op= AMPEREQUAL id1= testlist id2= testlist ) | ^(op= VBAREQUAL id1= testlist id2= testlist ) | ^(op= CIRCUMFLEXEQUAL id1= testlist id2= testlist ) | ^(op= LEFTSHIFTEQUAL id1= testlist id2= testlist ) | ^(op= RIGHTSHIFTEQUAL id1= testlist id2= testlist ) | ^(op= DOUBLESTAREQUAL id1= testlist id2= testlist ) | ^(op= DOUBLESLASHEQUAL id1= testlist id2= testlist ) |cmd= testlist );
    public final Command expr_stmt() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:263:3: ( ^(op= ASSIGN id1= testlist id2= testlist ) | ^(op= PLUSEQUAL id1= testlist id2= testlist ) | ^(op= MINUSEQUAL id1= testlist id2= testlist ) | ^(op= STAREQUAL id1= testlist id2= testlist ) | ^(op= SLASHEQUAL id1= testlist id2= testlist ) | ^(op= PERCENTEQUAL id1= testlist id2= testlist ) | ^(op= AMPEREQUAL id1= testlist id2= testlist ) | ^(op= VBAREQUAL id1= testlist id2= testlist ) | ^(op= CIRCUMFLEXEQUAL id1= testlist id2= testlist ) | ^(op= LEFTSHIFTEQUAL id1= testlist id2= testlist ) | ^(op= RIGHTSHIFTEQUAL id1= testlist id2= testlist ) | ^(op= DOUBLESTAREQUAL id1= testlist id2= testlist ) | ^(op= DOUBLESLASHEQUAL id1= testlist id2= testlist ) |cmd= testlist )
            int alt21=14;
            switch ( input.LA(1) ) {
            case ASSIGN:
                {
                alt21=1;
                }
                break;
            case PLUSEQUAL:
                {
                alt21=2;
                }
                break;
            case MINUSEQUAL:
                {
                alt21=3;
                }
                break;
            case STAREQUAL:
                {
                alt21=4;
                }
                break;
            case SLASHEQUAL:
                {
                alt21=5;
                }
                break;
            case PERCENTEQUAL:
                {
                alt21=6;
                }
                break;
            case AMPEREQUAL:
                {
                alt21=7;
                }
                break;
            case VBAREQUAL:
                {
                alt21=8;
                }
                break;
            case CIRCUMFLEXEQUAL:
                {
                alt21=9;
                }
                break;
            case LEFTSHIFTEQUAL:
                {
                alt21=10;
                }
                break;
            case RIGHTSHIFTEQUAL:
                {
                alt21=11;
                }
                break;
            case DOUBLESTAREQUAL:
                {
                alt21=12;
                }
                break;
            case DOUBLESLASHEQUAL:
                {
                alt21=13;
                }
                break;
            case ALT_NOTEQUAL:
            case AMPER:
            case AND:
            case CIRCUMFLEX:
            case DOUBLESLASH:
            case DOUBLESTAR:
            case EQUAL:
            case EXPRESSION:
            case GREATER:
            case GREATEREQUAL:
            case IN:
            case IS:
            case ISNOT:
            case LEFTSHIFT:
            case LESS:
            case LESSEQUAL:
            case MINUS:
            case NOT:
            case NOTEQUAL:
            case NOTIN:
            case OR:
            case PLUS:
            case RIGHTSHIFT:
            case SLASH:
            case STAR:
            case UNARY_EXPRESSION:
            case VBAR:
                {
                alt21=14;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }

            switch (alt21) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:263:5: ^(op= ASSIGN id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_stmt805); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt809);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt813);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:268:5: ^(op= PLUSEQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,PLUSEQUAL,FOLLOW_PLUSEQUAL_in_expr_stmt824); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt828);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt832);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:273:5: ^(op= MINUSEQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,MINUSEQUAL,FOLLOW_MINUSEQUAL_in_expr_stmt843); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt847);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt851);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:278:5: ^(op= STAREQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,STAREQUAL,FOLLOW_STAREQUAL_in_expr_stmt862); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt866);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt870);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:283:5: ^(op= SLASHEQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,SLASHEQUAL,FOLLOW_SLASHEQUAL_in_expr_stmt881); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt885);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt889);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:288:5: ^(op= PERCENTEQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,PERCENTEQUAL,FOLLOW_PERCENTEQUAL_in_expr_stmt900); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt904);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt908);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:293:5: ^(op= AMPEREQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,AMPEREQUAL,FOLLOW_AMPEREQUAL_in_expr_stmt919); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt923);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt927);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 8 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:298:5: ^(op= VBAREQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,VBAREQUAL,FOLLOW_VBAREQUAL_in_expr_stmt938); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt942);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt946);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 9 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:303:5: ^(op= CIRCUMFLEXEQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,CIRCUMFLEXEQUAL,FOLLOW_CIRCUMFLEXEQUAL_in_expr_stmt957); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt961);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt965);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 10 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:308:5: ^(op= LEFTSHIFTEQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,LEFTSHIFTEQUAL,FOLLOW_LEFTSHIFTEQUAL_in_expr_stmt976); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt980);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt984);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 11 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:313:5: ^(op= RIGHTSHIFTEQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,RIGHTSHIFTEQUAL,FOLLOW_RIGHTSHIFTEQUAL_in_expr_stmt995); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt999);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt1003);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 12 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:318:5: ^(op= DOUBLESTAREQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,DOUBLESTAREQUAL,FOLLOW_DOUBLESTAREQUAL_in_expr_stmt1014); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt1018);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt1022);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 13 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:323:5: ^(op= DOUBLESLASHEQUAL id1= testlist id2= testlist )
                    {
                    op=(CommonTree)match(input,DOUBLESLASHEQUAL,FOLLOW_DOUBLESLASHEQUAL_in_expr_stmt1033); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_in_expr_stmt1037);
                    id1=testlist();

                    state._fsp--;


                    pushFollow(FOLLOW_testlist_in_expr_stmt1041);
                    id2=testlist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new AssignCommand((op!=null?op.getText():null),id1, id2, line);
                        System.out.println("***AssignCommand -> Op1:"+id1+"  Op2:"+id2+"  "+" Line: " + line + " " + result);
                        commandList.add(result); 
                        

                    }
                    break;
                case 14 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:328:5: cmd= testlist
                    {
                    pushFollow(FOLLOW_testlist_in_expr_stmt1051);
                    cmd=testlist();

                    state._fsp--;



                        result =cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "expr_stmt"



    // $ANTLR start "flow_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:333:1: flow_stmt returns [Command result] : cmd= return_stmt ;
    public final Command flow_stmt() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:334:2: (cmd= return_stmt )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:334:4: cmd= return_stmt
            {
            pushFollow(FOLLOW_return_stmt_in_flow_stmt1070);
            cmd=return_stmt();

            state._fsp--;



            		result = cmd;
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "flow_stmt"



    // $ANTLR start "return_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:339:1: return_stmt returns [Command result] : ^( RETURN_CMD cmd= arglist ) ;
    public final Command return_stmt() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:340:2: ( ^( RETURN_CMD cmd= arglist ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:340:4: ^( RETURN_CMD cmd= arglist )
            {
            match(input,RETURN_CMD,FOLLOW_RETURN_CMD_in_return_stmt1088); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_arglist_in_return_stmt1092);
            cmd=arglist();

            state._fsp--;


            match(input, Token.UP, null); 



            		if(cmd!=null){
            			result = new ReturnCommand(cmd, line);
            			System.out.println("***ReturnCommand "+cmd + " " +"Line: " + line + " " +result);
            			commandList.add(result);
            		}
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "return_stmt"



    // $ANTLR start "compound_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:349:1: compound_stmt returns [Command result] : (cmd= if_stmt |cmd= while_stmt |cmd= for_stmt |cmd= try_stmt |cmd= funcdef |cmd= classdef );
    public final Command compound_stmt() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:350:8: (cmd= if_stmt |cmd= while_stmt |cmd= for_stmt |cmd= try_stmt |cmd= funcdef |cmd= classdef )
            int alt22=6;
            switch ( input.LA(1) ) {
            case IFBLOCK:
                {
                alt22=1;
                }
                break;
            case WHILEBLOCK:
                {
                alt22=2;
                }
                break;
            case FORLOOP_CMD:
                {
                alt22=3;
                }
                break;
            case TRYBLOCK:
                {
                alt22=4;
                }
                break;
            case OUTER_FUNCTION_CMD:
                {
                alt22=5;
                }
                break;
            case CLASS_CMD:
                {
                alt22=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }

            switch (alt22) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:350:10: cmd= if_stmt
                    {
                    pushFollow(FOLLOW_if_stmt_in_compound_stmt1117);
                    cmd=if_stmt();

                    state._fsp--;


                     result = cmd; 

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:351:10: cmd= while_stmt
                    {
                    pushFollow(FOLLOW_while_stmt_in_compound_stmt1133);
                    cmd=while_stmt();

                    state._fsp--;


                     result = cmd; 

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:352:17: cmd= for_stmt
                    {
                    pushFollow(FOLLOW_for_stmt_in_compound_stmt1155);
                    cmd=for_stmt();

                    state._fsp--;


                     result = cmd; 

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:353:17: cmd= try_stmt
                    {
                    pushFollow(FOLLOW_try_stmt_in_compound_stmt1177);
                    cmd=try_stmt();

                    state._fsp--;


                     result = cmd; 

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:354:17: cmd= funcdef
                    {
                    pushFollow(FOLLOW_funcdef_in_compound_stmt1200);
                    cmd=funcdef();

                    state._fsp--;


                     result = cmd; 

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:355:17: cmd= classdef
                    {
                    pushFollow(FOLLOW_classdef_in_compound_stmt1222);
                    cmd=classdef();

                    state._fsp--;


                     result = cmd; 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "compound_stmt"



    // $ANTLR start "if_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:358:1: if_stmt returns [Command result] : ^( IFBLOCK id1= if_clause (id2= elif_clauses )? (id3= else_clause )? ) ;
    public final Command if_stmt() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        List id2 =null;

        Command id3 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:359:2: ( ^( IFBLOCK id1= if_clause (id2= elif_clauses )? (id3= else_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:359:4: ^( IFBLOCK id1= if_clause (id2= elif_clauses )? (id3= else_clause )? )
            {
            match(input,IFBLOCK,FOLLOW_IFBLOCK_in_if_stmt1268); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_if_clause_in_if_stmt1272);
            id1=if_clause();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:359:31: (id2= elif_clauses )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ELIF_CLAUSES) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:359:31: id2= elif_clauses
                    {
                    pushFollow(FOLLOW_elif_clauses_in_if_stmt1276);
                    id2=elif_clauses();

                    state._fsp--;


                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:359:49: (id3= else_clause )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ELSE_CMD) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:359:49: id3= else_clause
                    {
                    pushFollow(FOLLOW_else_clause_in_if_stmt1281);
                    id3=else_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 



            		if(id1!=null && id2!=null && id3!=null){
            			result = new IfBlockCommand(id1, id2, id3, line);
            			
            			int start = ((IfBlockCommand)(result)).findStartLine();
                    		((IfBlockCommand)(result)).setStartLine(start);
                    		
            			System.out.println("***IfBlockCommand -> "+ id1+ " "+ id2 +" "+ id3+" Start: " + ((IfBlockCommand)(result)).getStartLine() + " End: " + ((IfBlockCommand)(result)).getEndLine() + " " + result );
            			commandList.add(result);
            		}
            		else if(id1!=null && id2==null && id3!=null){
                  			result = new IfBlockCommand(id1, id3, line);
                  			
                  			int start = ((IfBlockCommand)(result)).findStartLine();
                    		((IfBlockCommand)(result)).setStartLine(start);
                    		
                  			
                  			System.out.println("***IfBlockCommand -> "+ id1+ " "+ id3+" Start: " + ((IfBlockCommand)(result)).getStartLine() + " End: " + ((IfBlockCommand)(result)).getEndLine() + " " + result );
                  			commandList.add(result);
                		}
                		else if(id1!=null && id2==null && id3==null){
                  			result = new IfBlockCommand(id1, line);
                  
                  			int start = ((IfBlockCommand)(result)).findStartLine();
                    		((IfBlockCommand)(result)).setStartLine(start);
                    	
                  			System.out.println("***IfBlockCommand -> "+ id1+" Start: " + ((IfBlockCommand)(result)).getStartLine() + " End: " + ((IfBlockCommand)(result)).getEndLine() + " " + result );
                  			commandList.add(result);
                		}
                		else if(id1!=null && id2!=null && id3==null){
                  			result = new IfBlockCommand(id1, id2, line);
                  
                  			int start = ((IfBlockCommand)(result)).findStartLine();
                    		((IfBlockCommand)(result)).setStartLine(start);
                    		
                  			System.out.println("***IfBlockCommand -> "+ id1+ " " +id2+ " Start: " + ((IfBlockCommand)(result)).getStartLine() + " End: " + ((IfBlockCommand)(result)).getEndLine() + " " + result );
                  			commandList.add(result);
                		}
                		else{
                
                		}
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "if_stmt"



    // $ANTLR start "if_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:403:1: if_clause returns [Command result] : ^( IF_CMD id1= test id2= suite ) ;
    public final Command if_clause() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        List id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:404:2: ( ^( IF_CMD id1= test id2= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:404:4: ^( IF_CMD id1= test id2= suite )
            {
            match(input,IF_CMD,FOLLOW_IF_CMD_in_if_clause1315); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_test_in_if_clause1319);
            id1=test();

            state._fsp--;


            pushFollow(FOLLOW_suite_in_if_clause1323);
            id2=suite();

            state._fsp--;


            match(input, Token.UP, null); 



            		result = new IfClauseCommand(id1, id2, line);
            		
            		int start = ((IfClauseCommand)(result)).findStartLine();
                    	((IfClauseCommand)(result)).setStartLine(start);
            		
            		System.out.println("***IfClauseCommand -> " + id1 + " "+ id2 + " Start: " + ((IfClauseCommand)(result)).getStartLine() + " End: " + ((IfClauseCommand)(result)).getEndLine() + " " + result );
            		commandList.add(result);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "if_clause"


    protected static class elif_clauses_scope {
        List current;
    }
    protected Stack elif_clauses_stack = new Stack();



    // $ANTLR start "elif_clauses"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:415:1: elif_clauses returns [List result] : ^( ELIF_CLAUSES ( elif_clause )+ ) ;
    public final List elif_clauses() throws RecognitionException {
        elif_clauses_stack.push(new elif_clauses_scope());
        List result = null;


        ((elif_clauses_scope)elif_clauses_stack.peek()).current = new ArrayList<Command>();
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:418:2: ( ^( ELIF_CLAUSES ( elif_clause )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:418:4: ^( ELIF_CLAUSES ( elif_clause )+ )
            {
            match(input,ELIF_CLAUSES,FOLLOW_ELIF_CLAUSES_in_elif_clauses1349); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:418:19: ( elif_clause )+
            int cnt25=0;
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==ELIF_CMD) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:418:19: elif_clause
            	    {
            	    pushFollow(FOLLOW_elif_clause_in_elif_clauses1351);
            	    elif_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt25 >= 1 ) break loop25;
                        EarlyExitException eee =
                            new EarlyExitException(25, input);
                        throw eee;
                }
                cnt25++;
            } while (true);


            match(input, Token.UP, null); 



            		result = ((elif_clauses_scope)elif_clauses_stack.peek()).current;
            		System.out.println("List:"+result);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            elif_clauses_stack.pop();
        }
        return result;
    }
    // $ANTLR end "elif_clauses"



    // $ANTLR start "elif_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:424:1: elif_clause : ^( ELIF_CMD id1= test id2= suite ) ;
    public final void elif_clause() throws RecognitionException {
        Command id1 =null;

        List id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:425:2: ( ^( ELIF_CMD id1= test id2= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:425:4: ^( ELIF_CMD id1= test id2= suite )
            {
            match(input,ELIF_CMD,FOLLOW_ELIF_CMD_in_elif_clause1368); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_test_in_elif_clause1372);
            id1=test();

            state._fsp--;


            pushFollow(FOLLOW_suite_in_elif_clause1376);
            id2=suite();

            state._fsp--;


            match(input, Token.UP, null); 



            		d = new ElifClauseCommand(id1, id2, line);
            		
            		int start = ((ElifClauseCommand)(d)).findStartLine();
                    	((ElifClauseCommand)(d)).setStartLine(start);
                    	
            		System.out.println("***ElifClauseCommand -> "+ id1 + " " + id2 + " Start: " + ((ElifClauseCommand)(d)).getStartLine() + " End: " + ((ElifClauseCommand)(d)).getEndLine() + " " + d );
            		commandList.add(d);
            		
            		((elif_clauses_scope)elif_clauses_stack.peek()).current.add(d);
            		System.out.println("Current List:"+((elif_clauses_scope)elif_clauses_stack.peek()).current);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "elif_clause"



    // $ANTLR start "else_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:439:1: else_clause returns [Command result] : ^( ELSE_CMD cmd= suite ) ;
    public final Command else_clause() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:440:3: ( ^( ELSE_CMD cmd= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:440:5: ^( ELSE_CMD cmd= suite )
            {
            match(input,ELSE_CMD,FOLLOW_ELSE_CMD_in_else_clause1403); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_suite_in_else_clause1407);
            cmd=suite();

            state._fsp--;


            match(input, Token.UP, null); 



                  result = new ElseClauseCommand(cmd, line);
                  
                  int start = ((ElseClauseCommand)(result)).findStartLine();
                  ((ElseClauseCommand)(result)).setStartLine(start);
                    	
                  System.out.println("***ElseClauseCommand -> " + cmd + " Start: " + ((ElseClauseCommand)(result)).getStartLine() + " End: " + ((ElseClauseCommand)(result)).getEndLine() + " " + result );
                  commandList.add(result);
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "else_clause"



    // $ANTLR start "while_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:451:1: while_stmt returns [Command result] : ^( WHILEBLOCK id1= while_clause (id2= else_clause )? ) ;
    public final Command while_stmt() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        Command id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:452:3: ( ^( WHILEBLOCK id1= while_clause (id2= else_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:452:5: ^( WHILEBLOCK id1= while_clause (id2= else_clause )? )
            {
            match(input,WHILEBLOCK,FOLLOW_WHILEBLOCK_in_while_stmt1427); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_while_clause_in_while_stmt1431);
            id1=while_clause();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:452:38: (id2= else_clause )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ELSE_CMD) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:452:38: id2= else_clause
                    {
                    pushFollow(FOLLOW_else_clause_in_while_stmt1435);
                    id2=else_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 



                  if(id1!=null && id2!=null){
                    result = new WhileBlockCommand(id1,id2, line);
                    
                    int start = ((WhileBlockCommand)(result)).findStartLine();
                  ((WhileBlockCommand)(result)).setStartLine(start);
                  
                    System.out.println("***WhileBlockCommand -> " + id1 + " " + id2 + " Start: " + ((WhileBlockCommand)(result)).getStartLine() + " End: " +((WhileBlockCommand)(result)).getEndLine() + " " + result);
                    commandList.add(result);
                  }
                  else if (id1!=null && id2==null){
                    result = new WhileBlockCommand(id1, line);
                    
                    int start = ((WhileBlockCommand)(result)).findStartLine();
                  ((WhileBlockCommand)(result)).setStartLine(start);
                  
                    System.out.println("***WhileBlockCommand -> " + id1 + " Start: " + ((WhileBlockCommand)(result)).getStartLine() + " End: " +((WhileBlockCommand)(result)).getEndLine() + " " + result);
                    commandList.add(result);
                  }
                  else{
                  }
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "while_stmt"



    // $ANTLR start "while_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:476:1: while_clause returns [Command result] : ^( WHILE_CMD id1= test id2= suite ) ;
    public final Command while_clause() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        List id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:477:3: ( ^( WHILE_CMD id1= test id2= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:477:5: ^( WHILE_CMD id1= test id2= suite )
            {
            match(input,WHILE_CMD,FOLLOW_WHILE_CMD_in_while_clause1458); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_test_in_while_clause1462);
            id1=test();

            state._fsp--;


            pushFollow(FOLLOW_suite_in_while_clause1466);
            id2=suite();

            state._fsp--;


            match(input, Token.UP, null); 



                  result = new WhileClauseCommand(id1, id2, line);
                  
                  int start = ((WhileClauseCommand)(result)).findStartLine();
                  ((WhileClauseCommand)(result)).setStartLine(start);
                  
                  System.out.println("***WhileClauseCommand -> " + id1 + " "+ id2 +" Start: " + ((WhileClauseCommand)(result)).getStartLine() + " End: " +((WhileClauseCommand)(result)).getEndLine() + " " + result);
                  commandList.add(result);
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "while_clause"



    // $ANTLR start "for_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:488:1: for_stmt returns [Command result] : ^( FORLOOP_CMD id1= exprlist id2= testlist id3= suite ) ;
    public final Command for_stmt() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        Command id2 =null;

        List id3 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:489:3: ( ^( FORLOOP_CMD id1= exprlist id2= testlist id3= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:489:5: ^( FORLOOP_CMD id1= exprlist id2= testlist id3= suite )
            {
            match(input,FORLOOP_CMD,FOLLOW_FORLOOP_CMD_in_for_stmt1486); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_exprlist_in_for_stmt1490);
            id1=exprlist();

            state._fsp--;


            pushFollow(FOLLOW_testlist_in_for_stmt1494);
            id2=testlist();

            state._fsp--;


            pushFollow(FOLLOW_suite_in_for_stmt1498);
            id3=suite();

            state._fsp--;


            match(input, Token.UP, null); 



              	// start line number
                	result = new ForLoopCommand(id1, id2, id3, line);
                	
                	int start = ((ForLoopCommand)(result)).findStartLine();
                  	((ForLoopCommand)(result)).setStartLine(start);
                  
                	System.out.println("***ForLoopCommand -> " + id1 + " "+id2 + " "+id3+" Start: " + ((ForLoopCommand)(result)).getStartLine() + " End: " +((ForLoopCommand)(result)).getEndLine() + " " + result);
                	commandList.add(result);
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "for_stmt"



    // $ANTLR start "try_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:501:1: try_stmt returns [Command result] : ^( TRYBLOCK id1= try_clause id2= except_clause (id3= finally_clause )? ) ;
    public final Command try_stmt() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        Command id2 =null;

        Command id3 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:502:3: ( ^( TRYBLOCK id1= try_clause id2= except_clause (id3= finally_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:502:5: ^( TRYBLOCK id1= try_clause id2= except_clause (id3= finally_clause )? )
            {
            match(input,TRYBLOCK,FOLLOW_TRYBLOCK_in_try_stmt1521); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_try_clause_in_try_stmt1525);
            id1=try_clause();

            state._fsp--;


            pushFollow(FOLLOW_except_clause_in_try_stmt1529);
            id2=except_clause();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:502:52: (id3= finally_clause )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==FINALLY_CMD) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:502:52: id3= finally_clause
                    {
                    pushFollow(FOLLOW_finally_clause_in_try_stmt1533);
                    id3=finally_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 



                  if(id1!=null && id2!=null && id3!=null){
                    result = new TryBlockCommand(id1, id2, id3, line);
                    
                    int start = ((TryBlockCommand)(result)).findStartLine();
                    ((TryBlockCommand)(result)).setStartLine(start);
                  
                    System.out.println("***TryBlockCommand -> " + id1 + " " + id2 + " " + id3 + " Start: " + ((TryBlockCommand)(result)).getStartLine() + " End: " + ((TryBlockCommand)(result)).getEndLine() + " " + result);
                    commandList.add(result);
                  }
                  else if(id1!=null && id2!=null && id3==null){
                    result = new TryBlockCommand(id1, id2, id3, line);
                    
                    int start = ((TryBlockCommand)(result)).findStartLine();
                    ((TryBlockCommand)(result)).setStartLine(start);
                  
                    System.out.println("***TryBlockCommand -> " + id1 + " " + id2 + " Start: " + ((TryBlockCommand)(result)).getStartLine() + " End: " + ((TryBlockCommand)(result)).getEndLine() + " " + result);
                    commandList.add(result);
                  }      
                  else{
                  }
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "try_stmt"



    // $ANTLR start "try_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:526:1: try_clause returns [Command result] : ^( TRY_CMD cmd= suite ) ;
    public final Command try_clause() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:527:3: ( ^( TRY_CMD cmd= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:527:5: ^( TRY_CMD cmd= suite )
            {
            match(input,TRY_CMD,FOLLOW_TRY_CMD_in_try_clause1556); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_suite_in_try_clause1560);
            cmd=suite();

            state._fsp--;


            match(input, Token.UP, null); 



                  result = new TryClauseCommand(cmd, line);
                  
                  int start = ((TryClauseCommand)(result)).findStartLine();
                  ((TryClauseCommand)(result)).setStartLine(start);
                  
                  System.out.println("***TryClauseCommand -> " + cmd + " Start: " + ((TryClauseCommand)(result)).getStartLine() + " End: " + ((TryClauseCommand)(result)).getEndLine() + " " + result);
                  commandList.add(result);
                  
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "try_clause"



    // $ANTLR start "except_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:539:1: except_clause returns [Command result] : ^( EXCEPT_CMD (id1= trailer )? id2= suite ) ;
    public final Command except_clause() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        List id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:540:3: ( ^( EXCEPT_CMD (id1= trailer )? id2= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:540:5: ^( EXCEPT_CMD (id1= trailer )? id2= suite )
            {
            match(input,EXCEPT_CMD,FOLLOW_EXCEPT_CMD_in_except_clause1582); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:540:21: (id1= trailer )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==SUBSCRIPTS||LA28_0==TRAILER) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:540:21: id1= trailer
                    {
                    pushFollow(FOLLOW_trailer_in_except_clause1586);
                    id1=trailer();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_suite_in_except_clause1591);
            id2=suite();

            state._fsp--;


            match(input, Token.UP, null); 



                  if(id1!=null && id2!=null){
                    result = new ExceptClauseCommand(id1, id2, line);
                    
                    int start = ((ExceptClauseCommand)(result)).findStartLine();
                  	((ExceptClauseCommand)(result)).setStartLine(start);
                    
                    System.out.println("***ExceptClauseCommand -> " + id1 + " " + id2 + " Start: " +((ExceptClauseCommand)(result)).getStartLine() + " End: " + ((ExceptClauseCommand)(result)).getEndLine() + " " + result);
                    commandList.add(result);
                  }
                  
                  else if(id1==null && id2!=null){
                     result = new ExceptClauseCommand(id1, id2, line);
                    
                    int start = ((ExceptClauseCommand)(result)).findStartLine();
                  	((ExceptClauseCommand)(result)).setStartLine(start);
                    
                    System.out.println("***ExceptClauseCommand -> " + id2 + " Start: " +((ExceptClauseCommand)(result)).getStartLine() + " End: " + ((ExceptClauseCommand)(result)).getEndLine() + " " + result);
                    commandList.add(result);
                  } 
                  
                  else{
                  }
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "except_clause"



    // $ANTLR start "finally_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:566:1: finally_clause returns [Command result] : ^( FINALLY_CMD cmd= suite ) ;
    public final Command finally_clause() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:567:3: ( ^( FINALLY_CMD cmd= suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:567:5: ^( FINALLY_CMD cmd= suite )
            {
            match(input,FINALLY_CMD,FOLLOW_FINALLY_CMD_in_finally_clause1612); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_suite_in_finally_clause1616);
            cmd=suite();

            state._fsp--;


            match(input, Token.UP, null); 



                  result = new FinallyClauseCommand(cmd, line);
                  
                  int start = ((FinallyClauseCommand)(result)).findStartLine();
                  ((FinallyClauseCommand)(result)).setStartLine(start);
                  	
                  System.out.println("***FinallyClauseCommand -> " + cmd + " Start: " +((FinallyClauseCommand)(result)).getStartLine() + " End: " + ((FinallyClauseCommand)(result)).getEndLine() + " " + result);
                  commandList.add(result);
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "finally_clause"


    protected static class suite_scope {
        List currentStmt;
    }
    protected Stack suite_stack = new Stack();



    // $ANTLR start "suite"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:578:1: suite returns [List result] : ^( INDENT ( stmt_inside_block )+ ) ;
    public final List suite() throws RecognitionException {
        suite_stack.push(new suite_scope());
        List result = null;


        ((suite_scope)suite_stack.peek()).currentStmt = new ArrayList<Command>(); 
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:581:2: ( ^( INDENT ( stmt_inside_block )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:581:3: ^( INDENT ( stmt_inside_block )+ )
            {
            match(input,INDENT,FOLLOW_INDENT_in_suite1644); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:581:12: ( stmt_inside_block )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( ((LA29_0 >= ALT_NOTEQUAL && LA29_0 <= AND)||LA29_0==ASSIGN||(LA29_0 >= CIRCUMFLEX && LA29_0 <= CIRCUMFLEXEQUAL)||LA29_0==CLASS_CMD||(LA29_0 >= DOUBLESLASH && LA29_0 <= DOUBLESTAREQUAL)||LA29_0==EQUAL||LA29_0==EXPRESSION||(LA29_0 >= FORLOOP_CMD && LA29_0 <= GREATEREQUAL)||LA29_0==IFBLOCK||LA29_0==IMPORT_CMD||LA29_0==IN||(LA29_0 >= IS && LA29_0 <= ISNOT)||(LA29_0 >= LEFTSHIFT && LA29_0 <= LESSEQUAL)||(LA29_0 >= MINUS && LA29_0 <= MINUSEQUAL)||(LA29_0 >= NOT && LA29_0 <= NOTIN)||LA29_0==OR||LA29_0==OUTER_FUNCTION_CMD||(LA29_0 >= PERCENTEQUAL && LA29_0 <= PLUSEQUAL)||LA29_0==PRINT_CMD||(LA29_0 >= RETURN_CMD && LA29_0 <= RIGHTSHIFTEQUAL)||(LA29_0 >= SLASH && LA29_0 <= STAREQUAL)||LA29_0==TRYBLOCK||LA29_0==UNARY_EXPRESSION||(LA29_0 >= VBAR && LA29_0 <= WHILEBLOCK)) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:581:12: stmt_inside_block
            	    {
            	    pushFollow(FOLLOW_stmt_inside_block_in_suite1646);
            	    stmt_inside_block();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);


            match(input, Token.UP, null); 



                  		result = ((suite_scope)suite_stack.peek()).currentStmt;
                  		System.out.println("List of Statements inside block: " + result);
                  		
                    

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            suite_stack.pop();
        }
        return result;
    }
    // $ANTLR end "suite"



    // $ANTLR start "stmt_inside_block"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:588:1: stmt_inside_block : (id1= simple_stmt |id2= compound_stmt );
    public final void stmt_inside_block() throws RecognitionException {
        Command id1 =null;

        Command id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:589:2: (id1= simple_stmt |id2= compound_stmt )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( ((LA30_0 >= ALT_NOTEQUAL && LA30_0 <= AND)||LA30_0==ASSIGN||(LA30_0 >= CIRCUMFLEX && LA30_0 <= CIRCUMFLEXEQUAL)||(LA30_0 >= DOUBLESLASH && LA30_0 <= DOUBLESTAREQUAL)||LA30_0==EQUAL||LA30_0==EXPRESSION||(LA30_0 >= GREATER && LA30_0 <= GREATEREQUAL)||LA30_0==IMPORT_CMD||LA30_0==IN||(LA30_0 >= IS && LA30_0 <= ISNOT)||(LA30_0 >= LEFTSHIFT && LA30_0 <= LESSEQUAL)||(LA30_0 >= MINUS && LA30_0 <= MINUSEQUAL)||(LA30_0 >= NOT && LA30_0 <= NOTIN)||LA30_0==OR||(LA30_0 >= PERCENTEQUAL && LA30_0 <= PLUSEQUAL)||LA30_0==PRINT_CMD||(LA30_0 >= RETURN_CMD && LA30_0 <= RIGHTSHIFTEQUAL)||(LA30_0 >= SLASH && LA30_0 <= STAREQUAL)||LA30_0==UNARY_EXPRESSION||(LA30_0 >= VBAR && LA30_0 <= VBAREQUAL)) ) {
                alt30=1;
            }
            else if ( (LA30_0==CLASS_CMD||LA30_0==FORLOOP_CMD||LA30_0==IFBLOCK||LA30_0==OUTER_FUNCTION_CMD||LA30_0==TRYBLOCK||LA30_0==WHILEBLOCK) ) {
                alt30=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:589:4: id1= simple_stmt
                    {
                    pushFollow(FOLLOW_simple_stmt_in_stmt_inside_block1669);
                    id1=simple_stmt();

                    state._fsp--;


                    ((suite_scope)suite_stack.peek()).currentStmt.add(id1); 

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:590:6: id2= compound_stmt
                    {
                    pushFollow(FOLLOW_compound_stmt_in_stmt_inside_block1680);
                    id2=compound_stmt();

                    state._fsp--;


                    ((suite_scope)suite_stack.peek()).currentStmt.add(id2);

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "stmt_inside_block"



    // $ANTLR start "test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:593:1: test returns [Command result] : cmd= or_test ;
    public final Command test() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:594:3: (cmd= or_test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:594:5: cmd= or_test
            {
            pushFollow(FOLLOW_or_test_in_test1702);
            cmd=or_test();

            state._fsp--;



                  result = cmd;
                

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "test"



    // $ANTLR start "or_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:599:1: or_test returns [Command result] : ( ^(op= OR id1= or_test id2= or_test ) | (cmd= and_test ) );
    public final Command or_test() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:600:3: ( ^(op= OR id1= or_test id2= or_test ) | (cmd= and_test ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==OR) ) {
                alt31=1;
            }
            else if ( ((LA31_0 >= ALT_NOTEQUAL && LA31_0 <= AMPER)||LA31_0==AND||LA31_0==CIRCUMFLEX||LA31_0==DOUBLESLASH||LA31_0==DOUBLESTAR||LA31_0==EQUAL||LA31_0==EXPRESSION||(LA31_0 >= GREATER && LA31_0 <= GREATEREQUAL)||LA31_0==IN||(LA31_0 >= IS && LA31_0 <= ISNOT)||LA31_0==LEFTSHIFT||(LA31_0 >= LESS && LA31_0 <= LESSEQUAL)||LA31_0==MINUS||(LA31_0 >= NOT && LA31_0 <= NOTIN)||LA31_0==PLUS||LA31_0==RIGHTSHIFT||LA31_0==SLASH||LA31_0==STAR||LA31_0==UNARY_EXPRESSION||LA31_0==VBAR) ) {
                alt31=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:600:5: ^(op= OR id1= or_test id2= or_test )
                    {
                    op=(CommonTree)match(input,OR,FOLLOW_OR_in_or_test1726); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_or_test_in_or_test1730);
                    id1=or_test();

                    state._fsp--;


                    pushFollow(FOLLOW_or_test_in_or_test1734);
                    id2=or_test();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+ " Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:605:5: (cmd= and_test )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:605:5: (cmd= and_test )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:605:6: cmd= and_test
                    {
                    pushFollow(FOLLOW_and_test_in_or_test1745);
                    cmd=and_test();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "or_test"



    // $ANTLR start "and_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:610:1: and_test returns [Command result] : ( ^(op= AND id1= and_test id2= and_test ) | (cmd= not_test ) );
    public final Command and_test() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:611:3: ( ^(op= AND id1= and_test id2= and_test ) | (cmd= not_test ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AND) ) {
                alt32=1;
            }
            else if ( ((LA32_0 >= ALT_NOTEQUAL && LA32_0 <= AMPER)||LA32_0==CIRCUMFLEX||LA32_0==DOUBLESLASH||LA32_0==DOUBLESTAR||LA32_0==EQUAL||LA32_0==EXPRESSION||(LA32_0 >= GREATER && LA32_0 <= GREATEREQUAL)||LA32_0==IN||(LA32_0 >= IS && LA32_0 <= ISNOT)||LA32_0==LEFTSHIFT||(LA32_0 >= LESS && LA32_0 <= LESSEQUAL)||LA32_0==MINUS||(LA32_0 >= NOT && LA32_0 <= NOTIN)||LA32_0==PLUS||LA32_0==RIGHTSHIFT||LA32_0==SLASH||LA32_0==STAR||LA32_0==UNARY_EXPRESSION||LA32_0==VBAR) ) {
                alt32=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:611:5: ^(op= AND id1= and_test id2= and_test )
                    {
                    op=(CommonTree)match(input,AND,FOLLOW_AND_in_and_test1769); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_and_test_in_and_test1773);
                    id1=and_test();

                    state._fsp--;


                    pushFollow(FOLLOW_and_test_in_and_test1777);
                    id2=and_test();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:616:5: (cmd= not_test )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:616:5: (cmd= not_test )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:616:6: cmd= not_test
                    {
                    pushFollow(FOLLOW_not_test_in_and_test1788);
                    cmd=not_test();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "and_test"



    // $ANTLR start "not_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:621:1: not_test returns [Command result] : ( ^(op= NOT cmd= not_test ) |cmd= comparison );
    public final Command not_test() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:622:3: ( ^(op= NOT cmd= not_test ) |cmd= comparison )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==NOT) ) {
                alt33=1;
            }
            else if ( ((LA33_0 >= ALT_NOTEQUAL && LA33_0 <= AMPER)||LA33_0==CIRCUMFLEX||LA33_0==DOUBLESLASH||LA33_0==DOUBLESTAR||LA33_0==EQUAL||LA33_0==EXPRESSION||(LA33_0 >= GREATER && LA33_0 <= GREATEREQUAL)||LA33_0==IN||(LA33_0 >= IS && LA33_0 <= ISNOT)||LA33_0==LEFTSHIFT||(LA33_0 >= LESS && LA33_0 <= LESSEQUAL)||LA33_0==MINUS||(LA33_0 >= NOTEQUAL && LA33_0 <= NOTIN)||LA33_0==PLUS||LA33_0==RIGHTSHIFT||LA33_0==SLASH||LA33_0==STAR||LA33_0==UNARY_EXPRESSION||LA33_0==VBAR) ) {
                alt33=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:622:5: ^(op= NOT cmd= not_test )
                    {
                    op=(CommonTree)match(input,NOT,FOLLOW_NOT_in_not_test1811); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_not_test_in_not_test1815);
                    cmd=not_test();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new UnaryCommand((op!=null?op.getText():null), cmd, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+cmd+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:627:5: cmd= comparison
                    {
                    pushFollow(FOLLOW_comparison_in_not_test1825);
                    cmd=comparison();

                    state._fsp--;



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "not_test"



    // $ANTLR start "comparison"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:632:1: comparison returns [Command result] : ( ^(op= LESS id1= comparison id2= comparison ) | ^(op= GREATER id1= comparison id2= comparison ) | ^(op= EQUAL id1= comparison id2= comparison ) | ^(op= GREATEREQUAL id1= comparison id2= comparison ) | ^(op= LESSEQUAL id1= comparison id2= comparison ) | ^(op= ALT_NOTEQUAL id1= comparison id2= comparison ) | ^(op= NOTEQUAL id1= comparison id2= comparison ) | ^(op= IN id1= comparison id2= comparison ) | ^(op= NOTIN id1= comparison id2= comparison ) | ^(op= IS id1= comparison id2= comparison ) | ^(op= ISNOT id1= comparison id2= comparison ) | (cmd= expr ) );
    public final Command comparison() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:633:3: ( ^(op= LESS id1= comparison id2= comparison ) | ^(op= GREATER id1= comparison id2= comparison ) | ^(op= EQUAL id1= comparison id2= comparison ) | ^(op= GREATEREQUAL id1= comparison id2= comparison ) | ^(op= LESSEQUAL id1= comparison id2= comparison ) | ^(op= ALT_NOTEQUAL id1= comparison id2= comparison ) | ^(op= NOTEQUAL id1= comparison id2= comparison ) | ^(op= IN id1= comparison id2= comparison ) | ^(op= NOTIN id1= comparison id2= comparison ) | ^(op= IS id1= comparison id2= comparison ) | ^(op= ISNOT id1= comparison id2= comparison ) | (cmd= expr ) )
            int alt34=12;
            switch ( input.LA(1) ) {
            case LESS:
                {
                alt34=1;
                }
                break;
            case GREATER:
                {
                alt34=2;
                }
                break;
            case EQUAL:
                {
                alt34=3;
                }
                break;
            case GREATEREQUAL:
                {
                alt34=4;
                }
                break;
            case LESSEQUAL:
                {
                alt34=5;
                }
                break;
            case ALT_NOTEQUAL:
                {
                alt34=6;
                }
                break;
            case NOTEQUAL:
                {
                alt34=7;
                }
                break;
            case IN:
                {
                alt34=8;
                }
                break;
            case NOTIN:
                {
                alt34=9;
                }
                break;
            case IS:
                {
                alt34=10;
                }
                break;
            case ISNOT:
                {
                alt34=11;
                }
                break;
            case AMPER:
            case CIRCUMFLEX:
            case DOUBLESLASH:
            case DOUBLESTAR:
            case EXPRESSION:
            case LEFTSHIFT:
            case MINUS:
            case PLUS:
            case RIGHTSHIFT:
            case SLASH:
            case STAR:
            case UNARY_EXPRESSION:
            case VBAR:
                {
                alt34=12;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }

            switch (alt34) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:633:5: ^(op= LESS id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,LESS,FOLLOW_LESS_in_comparison1846); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison1850);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison1854);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:638:5: ^(op= GREATER id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,GREATER,FOLLOW_GREATER_in_comparison1866); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison1870);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison1874);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:643:5: ^(op= EQUAL id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,EQUAL,FOLLOW_EQUAL_in_comparison1886); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison1890);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison1894);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:648:5: ^(op= GREATEREQUAL id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,GREATEREQUAL,FOLLOW_GREATEREQUAL_in_comparison1906); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison1910);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison1914);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:653:5: ^(op= LESSEQUAL id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,LESSEQUAL,FOLLOW_LESSEQUAL_in_comparison1926); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison1930);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison1934);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:658:5: ^(op= ALT_NOTEQUAL id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,ALT_NOTEQUAL,FOLLOW_ALT_NOTEQUAL_in_comparison1946); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison1950);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison1954);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:663:5: ^(op= NOTEQUAL id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_comparison1966); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison1970);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison1974);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 8 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:668:5: ^(op= IN id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,IN,FOLLOW_IN_in_comparison1986); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison1990);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison1994);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 9 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:673:5: ^(op= NOTIN id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,NOTIN,FOLLOW_NOTIN_in_comparison2006); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison2010);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison2014);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 10 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:678:5: ^(op= IS id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,IS,FOLLOW_IS_in_comparison2026); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison2030);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison2034);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 11 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:683:5: ^(op= ISNOT id1= comparison id2= comparison )
                    {
                    op=(CommonTree)match(input,ISNOT,FOLLOW_ISNOT_in_comparison2046); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_comparison_in_comparison2050);
                    id1=comparison();

                    state._fsp--;


                    pushFollow(FOLLOW_comparison_in_comparison2054);
                    id2=comparison();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 12 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:688:5: (cmd= expr )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:688:5: (cmd= expr )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:688:6: cmd= expr
                    {
                    pushFollow(FOLLOW_expr_in_comparison2066);
                    cmd=expr();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "comparison"



    // $ANTLR start "expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:693:1: expr returns [Command result] : ( ^(op= VBAR id1= expr id2= expr ) | (cmd= xor_expr ) );
    public final Command expr() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:694:3: ( ^(op= VBAR id1= expr id2= expr ) | (cmd= xor_expr ) )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==VBAR) ) {
                alt35=1;
            }
            else if ( (LA35_0==AMPER||LA35_0==CIRCUMFLEX||LA35_0==DOUBLESLASH||LA35_0==DOUBLESTAR||LA35_0==EXPRESSION||LA35_0==LEFTSHIFT||LA35_0==MINUS||LA35_0==PLUS||LA35_0==RIGHTSHIFT||LA35_0==SLASH||LA35_0==STAR||LA35_0==UNARY_EXPRESSION) ) {
                alt35=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:694:5: ^(op= VBAR id1= expr id2= expr )
                    {
                    op=(CommonTree)match(input,VBAR,FOLLOW_VBAR_in_expr2088); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expr_in_expr2092);
                    id1=expr();

                    state._fsp--;


                    pushFollow(FOLLOW_expr_in_expr2096);
                    id2=expr();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:699:5: (cmd= xor_expr )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:699:5: (cmd= xor_expr )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:699:6: cmd= xor_expr
                    {
                    pushFollow(FOLLOW_xor_expr_in_expr2107);
                    cmd=xor_expr();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "expr"



    // $ANTLR start "xor_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:704:1: xor_expr returns [Command result] : ( ^(op= CIRCUMFLEX id1= xor_expr id2= xor_expr ) | (cmd= and_expr ) );
    public final Command xor_expr() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:705:3: ( ^(op= CIRCUMFLEX id1= xor_expr id2= xor_expr ) | (cmd= and_expr ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==CIRCUMFLEX) ) {
                alt36=1;
            }
            else if ( (LA36_0==AMPER||LA36_0==DOUBLESLASH||LA36_0==DOUBLESTAR||LA36_0==EXPRESSION||LA36_0==LEFTSHIFT||LA36_0==MINUS||LA36_0==PLUS||LA36_0==RIGHTSHIFT||LA36_0==SLASH||LA36_0==STAR||LA36_0==UNARY_EXPRESSION) ) {
                alt36=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:705:5: ^(op= CIRCUMFLEX id1= xor_expr id2= xor_expr )
                    {
                    op=(CommonTree)match(input,CIRCUMFLEX,FOLLOW_CIRCUMFLEX_in_xor_expr2130); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_xor_expr_in_xor_expr2134);
                    id1=xor_expr();

                    state._fsp--;


                    pushFollow(FOLLOW_xor_expr_in_xor_expr2138);
                    id2=xor_expr();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:710:5: (cmd= and_expr )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:710:5: (cmd= and_expr )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:710:6: cmd= and_expr
                    {
                    pushFollow(FOLLOW_and_expr_in_xor_expr2149);
                    cmd=and_expr();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "xor_expr"



    // $ANTLR start "and_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:715:1: and_expr returns [Command result] : ( ^(op= AMPER id1= and_expr id2= and_expr ) | (cmd= shift_expr ) );
    public final Command and_expr() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:716:3: ( ^(op= AMPER id1= and_expr id2= and_expr ) | (cmd= shift_expr ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==AMPER) ) {
                alt37=1;
            }
            else if ( (LA37_0==DOUBLESLASH||LA37_0==DOUBLESTAR||LA37_0==EXPRESSION||LA37_0==LEFTSHIFT||LA37_0==MINUS||LA37_0==PLUS||LA37_0==RIGHTSHIFT||LA37_0==SLASH||LA37_0==STAR||LA37_0==UNARY_EXPRESSION) ) {
                alt37=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:716:5: ^(op= AMPER id1= and_expr id2= and_expr )
                    {
                    op=(CommonTree)match(input,AMPER,FOLLOW_AMPER_in_and_expr2172); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_and_expr_in_and_expr2176);
                    id1=and_expr();

                    state._fsp--;


                    pushFollow(FOLLOW_and_expr_in_and_expr2180);
                    id2=and_expr();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:721:5: (cmd= shift_expr )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:721:5: (cmd= shift_expr )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:721:6: cmd= shift_expr
                    {
                    pushFollow(FOLLOW_shift_expr_in_and_expr2191);
                    cmd=shift_expr();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "and_expr"



    // $ANTLR start "shift_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:726:1: shift_expr returns [Command result] : ( ^(op= LEFTSHIFT id1= shift_expr id2= shift_expr ) | ^(op= RIGHTSHIFT id1= shift_expr id2= shift_expr ) | (cmd= arith_expr ) );
    public final Command shift_expr() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:727:3: ( ^(op= LEFTSHIFT id1= shift_expr id2= shift_expr ) | ^(op= RIGHTSHIFT id1= shift_expr id2= shift_expr ) | (cmd= arith_expr ) )
            int alt38=3;
            switch ( input.LA(1) ) {
            case LEFTSHIFT:
                {
                alt38=1;
                }
                break;
            case RIGHTSHIFT:
                {
                alt38=2;
                }
                break;
            case DOUBLESLASH:
            case DOUBLESTAR:
            case EXPRESSION:
            case MINUS:
            case PLUS:
            case SLASH:
            case STAR:
            case UNARY_EXPRESSION:
                {
                alt38=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }

            switch (alt38) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:727:5: ^(op= LEFTSHIFT id1= shift_expr id2= shift_expr )
                    {
                    op=(CommonTree)match(input,LEFTSHIFT,FOLLOW_LEFTSHIFT_in_shift_expr2213); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_shift_expr_in_shift_expr2217);
                    id1=shift_expr();

                    state._fsp--;


                    pushFollow(FOLLOW_shift_expr_in_shift_expr2221);
                    id2=shift_expr();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                        

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:732:5: ^(op= RIGHTSHIFT id1= shift_expr id2= shift_expr )
                    {
                    op=(CommonTree)match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_shift_expr2232); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_shift_expr_in_shift_expr2236);
                    id1=shift_expr();

                    state._fsp--;


                    pushFollow(FOLLOW_shift_expr_in_shift_expr2240);
                    id2=shift_expr();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:737:5: (cmd= arith_expr )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:737:5: (cmd= arith_expr )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:737:6: cmd= arith_expr
                    {
                    pushFollow(FOLLOW_arith_expr_in_shift_expr2251);
                    cmd=arith_expr();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "shift_expr"



    // $ANTLR start "arith_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:742:1: arith_expr returns [Command result] : ( ^(op= PLUS id1= arith_expr id2= arith_expr ) | ^(op= MINUS id1= arith_expr id2= arith_expr ) | (cmd= term ) );
    public final Command arith_expr() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:743:3: ( ^(op= PLUS id1= arith_expr id2= arith_expr ) | ^(op= MINUS id1= arith_expr id2= arith_expr ) | (cmd= term ) )
            int alt39=3;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt39=1;
                }
                break;
            case MINUS:
                {
                alt39=2;
                }
                break;
            case DOUBLESLASH:
            case DOUBLESTAR:
            case EXPRESSION:
            case SLASH:
            case STAR:
            case UNARY_EXPRESSION:
                {
                alt39=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:743:5: ^(op= PLUS id1= arith_expr id2= arith_expr )
                    {
                    op=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_arith_expr2273); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_arith_expr_in_arith_expr2277);
                    id1=arith_expr();

                    state._fsp--;


                    pushFollow(FOLLOW_arith_expr_in_arith_expr2281);
                    id2=arith_expr();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                        

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:748:5: ^(op= MINUS id1= arith_expr id2= arith_expr )
                    {
                    op=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_arith_expr2292); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_arith_expr_in_arith_expr2296);
                    id1=arith_expr();

                    state._fsp--;


                    pushFollow(FOLLOW_arith_expr_in_arith_expr2300);
                    id2=arith_expr();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:753:5: (cmd= term )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:753:5: (cmd= term )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:753:6: cmd= term
                    {
                    pushFollow(FOLLOW_term_in_arith_expr2311);
                    cmd=term();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "arith_expr"



    // $ANTLR start "term"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:758:1: term returns [Command result] : ( ^(op= STAR id1= term id2= term ) | ^(op= SLASH id1= term id2= term ) | ^(op= DOUBLESLASH id1= term id2= term ) | ^(op= DOUBLESTAR id1= term id2= term ) | (cmd= factor ) );
    public final Command term() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command id1 =null;

        Command id2 =null;

        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:759:2: ( ^(op= STAR id1= term id2= term ) | ^(op= SLASH id1= term id2= term ) | ^(op= DOUBLESLASH id1= term id2= term ) | ^(op= DOUBLESTAR id1= term id2= term ) | (cmd= factor ) )
            int alt40=5;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt40=1;
                }
                break;
            case SLASH:
                {
                alt40=2;
                }
                break;
            case DOUBLESLASH:
                {
                alt40=3;
                }
                break;
            case DOUBLESTAR:
                {
                alt40=4;
                }
                break;
            case EXPRESSION:
            case UNARY_EXPRESSION:
                {
                alt40=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }

            switch (alt40) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:759:4: ^(op= STAR id1= term id2= term )
                    {
                    op=(CommonTree)match(input,STAR,FOLLOW_STAR_in_term2334); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_term_in_term2338);
                    id1=term();

                    state._fsp--;


                    pushFollow(FOLLOW_term_in_term2342);
                    id2=term();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     
                    		result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                    		System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                    		commandList.add(result);
                    	

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:764:4: ^(op= SLASH id1= term id2= term )
                    {
                    op=(CommonTree)match(input,SLASH,FOLLOW_SLASH_in_term2352); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_term_in_term2356);
                    id1=term();

                    state._fsp--;


                    pushFollow(FOLLOW_term_in_term2360);
                    id2=term();

                    state._fsp--;


                    match(input, Token.UP, null); 



                    	  result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                    	  System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                    	  commandList.add(result);
                    	

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:769:4: ^(op= DOUBLESLASH id1= term id2= term )
                    {
                    op=(CommonTree)match(input,DOUBLESLASH,FOLLOW_DOUBLESLASH_in_term2370); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_term_in_term2374);
                    id1=term();

                    state._fsp--;


                    pushFollow(FOLLOW_term_in_term2378);
                    id2=term();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:774:5: ^(op= DOUBLESTAR id1= term id2= term )
                    {
                    op=(CommonTree)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_term2389); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_term_in_term2393);
                    id1=term();

                    state._fsp--;


                    pushFollow(FOLLOW_term_in_term2397);
                    id2=term();

                    state._fsp--;


                    match(input, Token.UP, null); 



                        result = new BinaryCommand((op!=null?op.getText():null), id1, id2, line);
                        System.out.println("Operator:"+(op!=null?op.getText():null)+" "+id1+" "+id2+" "+" Line: " + line + " " +result);
                        commandList.add(result);
                      

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:779:5: (cmd= factor )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:779:5: (cmd= factor )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:779:6: cmd= factor
                    {
                    pushFollow(FOLLOW_factor_in_term2408);
                    cmd=factor();

                    state._fsp--;


                    }



                        result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "term"



    // $ANTLR start "factor"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:785:1: factor returns [Command result] : ( ^( UNARY_EXPRESSION op= PLUS cmd= power ) | ^( UNARY_EXPRESSION op= MINUS cmd= power ) | ^( UNARY_EXPRESSION op= TILDE cmd= power ) |cmd= power );
    public final Command factor() throws RecognitionException {
        Command result = null;


        CommonTree op=null;
        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:786:2: ( ^( UNARY_EXPRESSION op= PLUS cmd= power ) | ^( UNARY_EXPRESSION op= MINUS cmd= power ) | ^( UNARY_EXPRESSION op= TILDE cmd= power ) |cmd= power )
            int alt41=4;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==UNARY_EXPRESSION) ) {
                int LA41_1 = input.LA(2);

                if ( (LA41_1==DOWN) ) {
                    switch ( input.LA(3) ) {
                    case PLUS:
                        {
                        alt41=1;
                        }
                        break;
                    case MINUS:
                        {
                        alt41=2;
                        }
                        break;
                    case TILDE:
                        {
                        alt41=3;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 41, 3, input);

                        throw nvae;

                    }

                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA41_0==EXPRESSION) ) {
                alt41=4;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:786:4: ^( UNARY_EXPRESSION op= PLUS cmd= power )
                    {
                    match(input,UNARY_EXPRESSION,FOLLOW_UNARY_EXPRESSION_in_factor2432); 

                    match(input, Token.DOWN, null); 
                    op=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_factor2436); 

                    pushFollow(FOLLOW_power_in_factor2440);
                    cmd=power();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     
                    		result = new UnaryCommand((op!=null?op.getText():null), cmd, line);
                    		 System.out.println("Operator:"+(op!=null?op.getText():null)+" "+cmd+" "+" Line: " + line + " " +result);
                    		 commandList.add(result);
                    	

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:791:4: ^( UNARY_EXPRESSION op= MINUS cmd= power )
                    {
                    match(input,UNARY_EXPRESSION,FOLLOW_UNARY_EXPRESSION_in_factor2449); 

                    match(input, Token.DOWN, null); 
                    op=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_factor2453); 

                    pushFollow(FOLLOW_power_in_factor2457);
                    cmd=power();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     
                    		result = new UnaryCommand((op!=null?op.getText():null), cmd, line);
                    		 System.out.println("Operator:"+(op!=null?op.getText():null)+" "+cmd+" "+" Line: " + line + " " +result);
                    		 commandList.add(result);
                    	

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:796:4: ^( UNARY_EXPRESSION op= TILDE cmd= power )
                    {
                    match(input,UNARY_EXPRESSION,FOLLOW_UNARY_EXPRESSION_in_factor2465); 

                    match(input, Token.DOWN, null); 
                    op=(CommonTree)match(input,TILDE,FOLLOW_TILDE_in_factor2469); 

                    pushFollow(FOLLOW_power_in_factor2473);
                    cmd=power();

                    state._fsp--;


                    match(input, Token.UP, null); 


                     
                    		result = new UnaryCommand((op!=null?op.getText():null), cmd, line);
                    		 System.out.println("Operator:"+(op!=null?op.getText():null)+" "+cmd+" "+" Line: " + line + " " +result);
                    		 commandList.add(result);
                    	

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:801:4: cmd= power
                    {
                    pushFollow(FOLLOW_power_in_factor2482);
                    cmd=power();

                    state._fsp--;


                     result = cmd; 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "factor"



    // $ANTLR start "power"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:804:1: power returns [Command result] : ^( EXPRESSION id1= atom (id2= trailer )? ) ;
    public final Command power() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        Command id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:805:2: ( ^( EXPRESSION id1= atom (id2= trailer )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:805:4: ^( EXPRESSION id1= atom (id2= trailer )? )
            {
            match(input,EXPRESSION,FOLLOW_EXPRESSION_in_power2506); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_atom_in_power2510);
            id1=atom();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:805:29: (id2= trailer )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==SUBSCRIPTS||LA42_0==TRAILER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:805:29: id2= trailer
                    {
                    pushFollow(FOLLOW_trailer_in_power2514);
                    id2=trailer();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 



            	  
            	  
            	   
            	  if(id1!=null && id2!=null){
            	  
            	   //System.out.println("Debug: " + id1.toString());	
            	     
            	   if(id1.toString().matches("(.*)ClassVariableCommand(.*)")){
            	   str = ((ClassVariableCommand)(id1)).getName();
            	   //System.out.println("Debug-ClassVariable: " + str);
            	   }
            	  else if(id1.toString().matches("(.*)VariableCommand(.*)")){
            	   str = ((VariableCommand)(id1)).getName();
            	   //System.out.println("Debug-Variable: " + str);
            	   }
            	  else{
            	   str = "";
            	  }
            	  
            	  if(str.equals("int"))
            	   str = "int_casting";
            	  else if (str.equals("long"))
            	   str = "longInt_casting";
            	  else if (str.equals("float"))
            	   str = "float_casting";
            	  else{
            	   str = str;
            	  }
            	  
            	  if(id2.toString().matches("(.*)ArgumentsCommand(.*)")){
            	   	result = new MethodCommand(str, id2, line);
            	   	//System.out.println("*********Before Adding Method*******"+ getCommandList());
            	   	System.out.println("***MethodCommand -> Name: " + str + " Args: " + id2 + " " +" Line: " + line + " " + result);
            	   	commandList.remove(id1);
            	   	commandList.add(result);
            	   	//System.out.println("*********After Adding Method*******"+ getCommandList());
            	   	}
            	   else {
            	   	result = new SubscriptedVariableCommand(str, id2, line);
            	   	System.out.println("***SubscriptedVariableCommand -> Name: " + str + " Args: " + id2 + " " +" Line: " + line + " " + result);
            	   	commandList.remove(id1);
            	   	commandList.add(result);
            	   	}
            	  }
            	  else if (id1!=null && id2==null){   		
            		 result = id1;
            	  }
            	  else if (id1 == null && id2!=null){
            	   result = id2;
            	  }
            	  else{
            	   result = null;
            	  }
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "power"



    // $ANTLR start "atom"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:863:1: atom returns [Command result] : ( ^( VARIABLE_CMD id1= NAME id3= test ) | ^( CLASSVARIABLE_CMD id1= DOTTED_NAME id3= test ) | ^( VALUETYPE type= INT_TYPE id1= INT id3= test ) | ^( VALUETYPE type= LONG_TYPE id1= LONGINT id3= test ) | ^( VALUETYPE type= DOUBLE_TYPE id1= FLOAT id3= test ) | ^( VALUETYPE type= STRING_TYPE id1= STRING (id2= string_argument )? ) | ^( INNER_BRANCH cmd= testlist_gexp ) | ^( LISTMAKER_CMD (cmd= listmaker )? ) | ^( DICTMAKER_CMD (cmd= dictmaker )? ) );
    public final Command atom() throws RecognitionException {
        Command result = null;


        CommonTree id1=null;
        CommonTree type=null;
        Command id3 =null;

        List id2 =null;

        Command cmd =null;



          CommonTree ahead = (CommonTree)input.LT(1);
          line = ahead.getToken().getLine();
          System.out.println("line = " + line);
          

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:870:2: ( ^( VARIABLE_CMD id1= NAME id3= test ) | ^( CLASSVARIABLE_CMD id1= DOTTED_NAME id3= test ) | ^( VALUETYPE type= INT_TYPE id1= INT id3= test ) | ^( VALUETYPE type= LONG_TYPE id1= LONGINT id3= test ) | ^( VALUETYPE type= DOUBLE_TYPE id1= FLOAT id3= test ) | ^( VALUETYPE type= STRING_TYPE id1= STRING (id2= string_argument )? ) | ^( INNER_BRANCH cmd= testlist_gexp ) | ^( LISTMAKER_CMD (cmd= listmaker )? ) | ^( DICTMAKER_CMD (cmd= dictmaker )? ) )
            int alt46=9;
            switch ( input.LA(1) ) {
            case VARIABLE_CMD:
                {
                alt46=1;
                }
                break;
            case CLASSVARIABLE_CMD:
                {
                alt46=2;
                }
                break;
            case VALUETYPE:
                {
                int LA46_3 = input.LA(2);

                if ( (LA46_3==DOWN) ) {
                    switch ( input.LA(3) ) {
                    case INT_TYPE:
                        {
                        alt46=3;
                        }
                        break;
                    case LONG_TYPE:
                        {
                        alt46=4;
                        }
                        break;
                    case DOUBLE_TYPE:
                        {
                        alt46=5;
                        }
                        break;
                    case STRING_TYPE:
                        {
                        alt46=6;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 7, input);

                        throw nvae;

                    }

                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 3, input);

                    throw nvae;

                }
                }
                break;
            case INNER_BRANCH:
                {
                alt46=7;
                }
                break;
            case LISTMAKER_CMD:
                {
                alt46=8;
                }
                break;
            case DICTMAKER_CMD:
                {
                alt46=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:870:4: ^( VARIABLE_CMD id1= NAME id3= test )
                    {
                    match(input,VARIABLE_CMD,FOLLOW_VARIABLE_CMD_in_atom2542); 

                    match(input, Token.DOWN, null); 
                    id1=(CommonTree)match(input,NAME,FOLLOW_NAME_in_atom2546); 

                    pushFollow(FOLLOW_test_in_atom2550);
                    id3=test();

                    state._fsp--;


                    match(input, Token.UP, null); 



                    	  if((id1!=null?id1.getText():null).equals("range"))
                    	     result = null;
                    	  else{
                    	  	if(id3 == null){
                    		  result = new VariableCommand((id1!=null?id1.getText():null),line);
                    		  System.out.println("***Variable:"+(id1!=null?id1.getText():null)+" Line: "+ line + " " + result);
                    		  commandList.add(result);
                    		  //System.out.println("****** After Adding Variable *******" + getCommandList());
                    		  
                    		}
                    		else{
                    		  VariableCommand temp = new VariableCommand((id1!=null?id1.getText():null),line);
                    		  System.out.println("***Variable:"+(id1!=null?id1.getText():null)+" Line: "+ line + " " + temp);
                    		  commandList.add(temp);
                    		  
                    		  String op = "%";
                    		  result = new BinaryCommand(op, temp, id3, line);
                       		  System.out.println("Operator:"+op+" "+temp+" "+id3+" "+" Line: " + line + " " +result);
                       		  commandList.add(result);
                    		  
                    		}
                    	     }
                    	

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:894:4: ^( CLASSVARIABLE_CMD id1= DOTTED_NAME id3= test )
                    {
                    match(input,CLASSVARIABLE_CMD,FOLLOW_CLASSVARIABLE_CMD_in_atom2559); 

                    match(input, Token.DOWN, null); 
                    id1=(CommonTree)match(input,DOTTED_NAME,FOLLOW_DOTTED_NAME_in_atom2563); 

                    pushFollow(FOLLOW_test_in_atom2567);
                    id3=test();

                    state._fsp--;


                    match(input, Token.UP, null); 



                    		if(id3 == null){
                    	     		result = new ClassVariableCommand((id1!=null?id1.getText():null), line);
                    	     		System.out.println("***ClassVariable:"+(id1!=null?id1.getText():null)+" "+" Line: "+ line + " " +result);
                           	     		commandList.add(result);
                           	     	}
                           	     	else{
                           	     		ClassVariableCommand temp = new ClassVariableCommand((id1!=null?id1.getText():null),line);
                    		  	System.out.println("***ClassVariable:"+(id1!=null?id1.getText():null)+" Line: "+ line + " " + temp);
                    		  	commandList.add(temp);
                           	     		
                           	     		String op = "%";
                    		 	result = new BinaryCommand(op, temp, id3, line);
                       		  	System.out.println("Operator:"+op+" "+temp+" "+id3+" "+" Line: " + line + " " +result);
                       		  	commandList.add(result);
                           	     	
                           	     	
                           	     	}
                    	

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:913:4: ^( VALUETYPE type= INT_TYPE id1= INT id3= test )
                    {
                    match(input,VALUETYPE,FOLLOW_VALUETYPE_in_atom2576); 

                    match(input, Token.DOWN, null); 
                    type=(CommonTree)match(input,INT_TYPE,FOLLOW_INT_TYPE_in_atom2580); 

                    id1=(CommonTree)match(input,INT,FOLLOW_INT_in_atom2584); 

                    pushFollow(FOLLOW_test_in_atom2588);
                    id3=test();

                    state._fsp--;


                    match(input, Token.UP, null); 



                    		if(id3 == null){
                    			result = new DatatypeCommand((type!=null?type.getText():null),(id1!=null?id1.getText():null), line);
                    			System.out.println("***Value:"+(id1!=null?id1.getText():null)+" "+" Line: "+ line + " " +result);
                    			commandList.add(result);
                    		}
                    		else{
                    			DatatypeCommand temp = new DatatypeCommand((type!=null?type.getText():null),(id1!=null?id1.getText():null), line);
                    			System.out.println("***Value:"+(id1!=null?id1.getText():null)+" "+" Line: "+ line + " " +result);
                    			commandList.add(temp);
                    			
                    			String op = "%";
                    		 	result = new BinaryCommand(op, temp, id3, line);
                       		  	System.out.println("Operator:"+op+" "+temp+" "+id3+" "+" Line: " + line + " " +result);
                       		  	commandList.add(result);
                    			
                    		}
                    		//System.out.println("****** After Adding Integer Value *******" + getCommandList());
                    	

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:932:4: ^( VALUETYPE type= LONG_TYPE id1= LONGINT id3= test )
                    {
                    match(input,VALUETYPE,FOLLOW_VALUETYPE_in_atom2596); 

                    match(input, Token.DOWN, null); 
                    type=(CommonTree)match(input,LONG_TYPE,FOLLOW_LONG_TYPE_in_atom2600); 

                    id1=(CommonTree)match(input,LONGINT,FOLLOW_LONGINT_in_atom2604); 

                    pushFollow(FOLLOW_test_in_atom2608);
                    id3=test();

                    state._fsp--;


                    match(input, Token.UP, null); 



                    		if(id3 == null){
                    			result = new DatatypeCommand((type!=null?type.getText():null),(id1!=null?id1.getText():null), line);
                    			System.out.println("***Value:"+(id1!=null?id1.getText():null)+" "+" Line: "+ line + " " +result);
                    			commandList.add(result);
                    		}
                    		else{
                    			DatatypeCommand temp = new DatatypeCommand((type!=null?type.getText():null),(id1!=null?id1.getText():null), line);
                    			System.out.println("***Value:"+(id1!=null?id1.getText():null)+" "+" Line: "+ line + " " +result);
                    			commandList.add(temp);
                    			
                    			String op = "%";
                    		 	result = new BinaryCommand(op, temp, id3, line);
                       		  	System.out.println("Operator:"+op+" "+temp+" "+id3+" "+" Line: " + line + " " +result);
                       		  	commandList.add(result);
                    			
                    		}
                    	

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:950:4: ^( VALUETYPE type= DOUBLE_TYPE id1= FLOAT id3= test )
                    {
                    match(input,VALUETYPE,FOLLOW_VALUETYPE_in_atom2616); 

                    match(input, Token.DOWN, null); 
                    type=(CommonTree)match(input,DOUBLE_TYPE,FOLLOW_DOUBLE_TYPE_in_atom2620); 

                    id1=(CommonTree)match(input,FLOAT,FOLLOW_FLOAT_in_atom2624); 

                    pushFollow(FOLLOW_test_in_atom2628);
                    id3=test();

                    state._fsp--;


                    match(input, Token.UP, null); 



                    		if(id3 == null){
                    			result = new DatatypeCommand((type!=null?type.getText():null),(id1!=null?id1.getText():null), line);
                    			System.out.println("***Value:"+(id1!=null?id1.getText():null)+" "+" Line: "+ line + " " +result);
                    			commandList.add(result);
                    		}
                    		else{
                    			DatatypeCommand temp = new DatatypeCommand((type!=null?type.getText():null),(id1!=null?id1.getText():null), line);
                    			System.out.println("***Value:"+(id1!=null?id1.getText():null)+" "+" Line: "+ line + " " +result);
                    			commandList.add(temp);
                    			
                    			String op = "%";
                    		 	result = new BinaryCommand(op, temp, id3, line);
                       		  	System.out.println("Operator:"+op+" "+temp+" "+id3+" "+" Line: " + line + " " +result);
                       		  	commandList.add(result);
                    			
                    		}
                    	

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:968:4: ^( VALUETYPE type= STRING_TYPE id1= STRING (id2= string_argument )? )
                    {
                    match(input,VALUETYPE,FOLLOW_VALUETYPE_in_atom2636); 

                    match(input, Token.DOWN, null); 
                    type=(CommonTree)match(input,STRING_TYPE,FOLLOW_STRING_TYPE_in_atom2640); 

                    id1=(CommonTree)match(input,STRING,FOLLOW_STRING_in_atom2644); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:968:47: (id2= string_argument )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==ARGUMENTS) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:968:47: id2= string_argument
                            {
                            pushFollow(FOLLOW_string_argument_in_atom2648);
                            id2=string_argument();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 



                    	  	if(id2 == null){
                    		  result = new DatatypeCommand((type!=null?type.getText():null),(id1!=null?id1.getText():null), line);
                    		  System.out.println("***Value:"+(id1!=null?id1.getText():null)+" "+" Line: "+ line + " " +result);
                    		  commandList.add(result);
                    		  }
                    		else{
                    		  result = new DatatypeCommand((type!=null?type.getText():null),(id1!=null?id1.getText():null), id2, line);
                          		  System.out.println("***Value:"+(id1!=null?id1.getText():null)+" "+id2 + " " +" Line: "+ line + " " + result);
                          		  commandList.add(result);
                          		  System.out.println(commandList.toString());
                          		  //remove arguments as commands
                          		  /*
                          		  Iterator<Command> cit = id2.iterator();
                          		  while(cit.hasNext())
                      			commandList.remove(cit.next());
                      		  */
                      		  }  		  
                          		  
                    	

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:988:4: ^( INNER_BRANCH cmd= testlist_gexp )
                    {
                    match(input,INNER_BRANCH,FOLLOW_INNER_BRANCH_in_atom2657); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_testlist_gexp_in_atom2661);
                    cmd=testlist_gexp();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    result = cmd;

                    }
                    break;
                case 8 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:989:4: ^( LISTMAKER_CMD (cmd= listmaker )? )
                    {
                    match(input,LISTMAKER_CMD,FOLLOW_LISTMAKER_CMD_in_atom2670); 

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); 
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:989:23: (cmd= listmaker )?
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==LISTCOMPREHENSION_CMD) ) {
                            alt44=1;
                        }
                        switch (alt44) {
                            case 1 :
                                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:989:23: cmd= listmaker
                                {
                                pushFollow(FOLLOW_listmaker_in_atom2674);
                                cmd=listmaker();

                                state._fsp--;


                                }
                                break;

                        }


                        match(input, Token.UP, null); 
                    }



                            
                              result = cmd;
                      

                    }
                    break;
                case 9 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:993:5: ^( DICTMAKER_CMD (cmd= dictmaker )? )
                    {
                    match(input,DICTMAKER_CMD,FOLLOW_DICTMAKER_CMD_in_atom2685); 

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); 
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:993:24: (cmd= dictmaker )?
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==DICTIONARY_CMD) ) {
                            alt45=1;
                        }
                        switch (alt45) {
                            case 1 :
                                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:993:24: cmd= dictmaker
                                {
                                pushFollow(FOLLOW_dictmaker_in_atom2689);
                                cmd=dictmaker();

                                state._fsp--;


                                }
                                break;

                        }


                        match(input, Token.UP, null); 
                    }



                            if(cmd == null)
                              result = null;
                            else
                              result = cmd;
                      

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "atom"



    // $ANTLR start "string_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1001:1: string_argument returns [List result] : cmd= arglist ;
    public final List string_argument() throws RecognitionException {
        List result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1002:2: (cmd= arglist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1002:4: cmd= arglist
            {
            pushFollow(FOLLOW_arglist_in_string_argument2710);
            cmd=arglist();

            state._fsp--;


             result = cmd;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "string_argument"



    // $ANTLR start "listmaker"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1005:1: listmaker returns [Command result] : ^( LISTCOMPREHENSION_CMD id1= list_arguments (id2= list_for )? ) ;
    public final Command listmaker() throws RecognitionException {
        Command result = null;


        List id1 =null;

        Command id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1006:11: ( ^( LISTCOMPREHENSION_CMD id1= list_arguments (id2= list_for )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1006:13: ^( LISTCOMPREHENSION_CMD id1= list_arguments (id2= list_for )? )
            {
            match(input,LISTCOMPREHENSION_CMD,FOLLOW_LISTCOMPREHENSION_CMD_in_listmaker2738); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_list_arguments_in_listmaker2742);
            id1=list_arguments();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1006:59: (id2= list_for )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==LISTLOOPCONTROL_CMD) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1006:59: id2= list_for
                    {
                    pushFollow(FOLLOW_list_for_in_listmaker2746);
                    id2=list_for();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 



                      	if(id2!=null){
                         		result = new ListComprehensionCommand(id1, id2, line);
                         		System.out.println("***ListComprehension -> Arguments: " + id1 + " " + id2 + " " + "Line: " + line + " " +result);
                         		commandList.add(result);
                         	}
                         	else{
                         		result = new ListComprehensionCommand(id1, line);
                         		System.out.println("***ListComprehension -> Arguments: " + id1 + " " + "Line: " + line + " " +result);
                         		commandList.add(result);
                         	}
                      

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "listmaker"


    protected static class list_arguments_scope {
        List current;
    }
    protected Stack list_arguments_stack = new Stack();



    // $ANTLR start "list_arguments"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1020:1: list_arguments returns [List result] : ^( LIST_ARGS ( list_argument )+ ) ;
    public final List list_arguments() throws RecognitionException {
        list_arguments_stack.push(new list_arguments_scope());
        List result = null;


        ((list_arguments_scope)list_arguments_stack.peek()).current = new ArrayList<Command>();
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1023:3: ( ^( LIST_ARGS ( list_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1023:5: ^( LIST_ARGS ( list_argument )+ )
            {
            match(input,LIST_ARGS,FOLLOW_LIST_ARGS_in_list_arguments2782); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1023:17: ( list_argument )+
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( ((LA48_0 >= ALT_NOTEQUAL && LA48_0 <= AMPER)||LA48_0==AND||LA48_0==CIRCUMFLEX||LA48_0==DOUBLESLASH||LA48_0==DOUBLESTAR||LA48_0==EQUAL||LA48_0==EXPRESSION||(LA48_0 >= GREATER && LA48_0 <= GREATEREQUAL)||LA48_0==IN||(LA48_0 >= IS && LA48_0 <= ISNOT)||LA48_0==LEFTSHIFT||(LA48_0 >= LESS && LA48_0 <= LESSEQUAL)||LA48_0==MINUS||(LA48_0 >= NOT && LA48_0 <= NOTIN)||LA48_0==OR||LA48_0==PLUS||LA48_0==RIGHTSHIFT||LA48_0==SLASH||LA48_0==STAR||LA48_0==UNARY_EXPRESSION||LA48_0==VBAR) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1023:17: list_argument
            	    {
            	    pushFollow(FOLLOW_list_argument_in_list_arguments2784);
            	    list_argument();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt48 >= 1 ) break loop48;
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);


            match(input, Token.UP, null); 



                  result = ((list_arguments_scope)list_arguments_stack.peek()).current;
                  System.out.println("List:"+result);
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            list_arguments_stack.pop();
        }
        return result;
    }
    // $ANTLR end "list_arguments"



    // $ANTLR start "list_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1029:1: list_argument : cmd= testlist ;
    public final void list_argument() throws RecognitionException {
        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1030:5: (cmd= testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1030:7: cmd= testlist
            {
            pushFollow(FOLLOW_testlist_in_list_argument2806);
            cmd=testlist();

            state._fsp--;


            ((list_arguments_scope)list_arguments_stack.peek()).current.add(cmd); commandList.remove(cmd);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "list_argument"



    // $ANTLR start "dictmaker"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1033:1: dictmaker returns [Command result] : ^( DICTIONARY_CMD cmd= dict_arguments ) ;
    public final Command dictmaker() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1034:5: ( ^( DICTIONARY_CMD cmd= dict_arguments ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1034:7: ^( DICTIONARY_CMD cmd= dict_arguments )
            {
            match(input,DICTIONARY_CMD,FOLLOW_DICTIONARY_CMD_in_dictmaker2829); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_dict_arguments_in_dictmaker2833);
            cmd=dict_arguments();

            state._fsp--;


            match(input, Token.UP, null); 



                    result = new DictComprehensionCommand(cmd, line);
                    System.out.println("***DictComprehension -> Arguments: " + cmd + " " + "Line: " + line + " " +result);
                    commandList.add(result);
                

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "dictmaker"


    protected static class dict_arguments_scope {
        List current;
    }
    protected Stack dict_arguments_stack = new Stack();



    // $ANTLR start "dict_arguments"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1041:1: dict_arguments returns [List result] : ^( DICT_ARGS ( dict_argument )+ ) ;
    public final List dict_arguments() throws RecognitionException {
        dict_arguments_stack.push(new dict_arguments_scope());
        List result = null;


        ((dict_arguments_scope)dict_arguments_stack.peek()).current = new ArrayList<Command>();
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1044:3: ( ^( DICT_ARGS ( dict_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1044:5: ^( DICT_ARGS ( dict_argument )+ )
            {
            match(input,DICT_ARGS,FOLLOW_DICT_ARGS_in_dict_arguments2874); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1044:17: ( dict_argument )+
            int cnt49=0;
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( ((LA49_0 >= ALT_NOTEQUAL && LA49_0 <= AMPER)||LA49_0==AND||LA49_0==CIRCUMFLEX||LA49_0==DOUBLESLASH||LA49_0==DOUBLESTAR||LA49_0==EQUAL||LA49_0==EXPRESSION||(LA49_0 >= GREATER && LA49_0 <= GREATEREQUAL)||LA49_0==IN||(LA49_0 >= IS && LA49_0 <= ISNOT)||LA49_0==LEFTSHIFT||(LA49_0 >= LESS && LA49_0 <= LESSEQUAL)||LA49_0==MINUS||(LA49_0 >= NOT && LA49_0 <= NOTIN)||LA49_0==OR||LA49_0==PLUS||LA49_0==RIGHTSHIFT||LA49_0==SLASH||LA49_0==STAR||LA49_0==UNARY_EXPRESSION||LA49_0==VBAR) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1044:17: dict_argument
            	    {
            	    pushFollow(FOLLOW_dict_argument_in_dict_arguments2876);
            	    dict_argument();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt49 >= 1 ) break loop49;
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);


            match(input, Token.UP, null); 



                  result = ((dict_arguments_scope)dict_arguments_stack.peek()).current;
                  System.out.println("Dictionary List:"+result);
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            dict_arguments_stack.pop();
        }
        return result;
    }
    // $ANTLR end "dict_arguments"



    // $ANTLR start "dict_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1050:1: dict_argument : cmd= testlist ;
    public final void dict_argument() throws RecognitionException {
        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1051:5: (cmd= testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1051:7: cmd= testlist
            {
            pushFollow(FOLLOW_testlist_in_dict_argument2898);
            cmd=testlist();

            state._fsp--;


            ((dict_arguments_scope)dict_arguments_stack.peek()).current.add(cmd); commandList.remove(cmd);

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dict_argument"



    // $ANTLR start "testlist_gexp"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1054:1: testlist_gexp returns [Command result] : cmd= test ( ( options {k=2; } : test )* ) ;
    public final Command testlist_gexp() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1055:5: (cmd= test ( ( options {k=2; } : test )* ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1055:7: cmd= test ( ( options {k=2; } : test )* )
            {
            pushFollow(FOLLOW_test_in_testlist_gexp2922);
            cmd=test();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1055:16: ( ( options {k=2; } : test )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1055:18: ( options {k=2; } : test )*
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1055:18: ( options {k=2; } : test )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( ((LA50_0 >= ALT_NOTEQUAL && LA50_0 <= AMPER)||LA50_0==AND||LA50_0==CIRCUMFLEX||LA50_0==DOUBLESLASH||LA50_0==DOUBLESTAR||LA50_0==EQUAL||LA50_0==EXPRESSION||(LA50_0 >= GREATER && LA50_0 <= GREATEREQUAL)||LA50_0==IN||(LA50_0 >= IS && LA50_0 <= ISNOT)||LA50_0==LEFTSHIFT||(LA50_0 >= LESS && LA50_0 <= LESSEQUAL)||LA50_0==MINUS||(LA50_0 >= NOT && LA50_0 <= NOTIN)||LA50_0==OR||LA50_0==PLUS||LA50_0==RIGHTSHIFT||LA50_0==SLASH||LA50_0==STAR||LA50_0==UNARY_EXPRESSION||LA50_0==VBAR) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1055:35: test
            	    {
            	    pushFollow(FOLLOW_test_in_testlist_gexp2935);
            	    test();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }



                result = cmd;
                

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "testlist_gexp"



    // $ANTLR start "trailer"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1083:1: trailer returns [Command result] : (cmd1= inner_trailer | (cmd= subscriptlist ) );
    public final Command trailer() throws RecognitionException {
        Command result = null;


        Command cmd1 =null;

        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1084:2: (cmd1= inner_trailer | (cmd= subscriptlist ) )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==TRAILER) ) {
                alt51=1;
            }
            else if ( (LA51_0==SUBSCRIPTS) ) {
                alt51=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1084:4: cmd1= inner_trailer
                    {
                    pushFollow(FOLLOW_inner_trailer_in_trailer2970);
                    cmd1=inner_trailer();

                    state._fsp--;



                    		result = cmd1;
                    	

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1087:4: (cmd= subscriptlist )
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1087:4: (cmd= subscriptlist )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1087:5: cmd= subscriptlist
                    {
                    pushFollow(FOLLOW_subscriptlist_in_trailer2979);
                    cmd=subscriptlist();

                    state._fsp--;


                    }



                              	result = new SubscriptsCommand(cmd, line);
                              	System.out.println("Subscripts:"+cmd+" "+"Line: " + line + " " +result);
                              	commandList.add(result);
                            

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "trailer"



    // $ANTLR start "inner_trailer"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1094:1: inner_trailer returns [Command result] : ( ^( TRAILER cmd= arglist ) | ^( TRAILER NO_ARGS ) );
    public final Command inner_trailer() throws RecognitionException {
        Command result = null;


        List cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1095:2: ( ^( TRAILER cmd= arglist ) | ^( TRAILER NO_ARGS ) )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==TRAILER) ) {
                int LA52_1 = input.LA(2);

                if ( (LA52_1==DOWN) ) {
                    int LA52_2 = input.LA(3);

                    if ( (LA52_2==NO_ARGS) ) {
                        alt52=2;
                    }
                    else if ( (LA52_2==ARGUMENTS) ) {
                        alt52=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 52, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 52, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }
            switch (alt52) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1095:4: ^( TRAILER cmd= arglist )
                    {
                    match(input,TRAILER,FOLLOW_TRAILER_in_inner_trailer3013); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_arglist_in_inner_trailer3017);
                    cmd=arglist();

                    state._fsp--;


                    match(input, Token.UP, null); 



                    		result = new ArgumentsCommand(cmd, line);
                            	 System.out.println("Arguments:"+cmd+" "+" Line: " + line + " " +result);
                            	 commandList.add(result);
                            	 //System.out.println("******* After Adding Arguments ******* " + getCommandList());
                    	

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1101:4: ^( TRAILER NO_ARGS )
                    {
                    match(input,TRAILER,FOLLOW_TRAILER_in_inner_trailer3025); 

                    match(input, Token.DOWN, null); 
                    match(input,NO_ARGS,FOLLOW_NO_ARGS_in_inner_trailer3027); 

                    match(input, Token.UP, null); 



                    		 result = new ArgumentsCommand(line);
                            	 System.out.println("Empty Arguments: ... "+" Line: " + line + " " +result);
                            	 commandList.add(result);
                            	 //System.out.println("******* After Adding Empty Arguments ******* " + getCommandList());
                    	

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "inner_trailer"


    protected static class subscriptlist_scope {
        List current;
    }
    protected Stack subscriptlist_stack = new Stack();



    // $ANTLR start "subscriptlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1109:1: subscriptlist returns [List result] : ^( SUBSCRIPTS subscript ) ;
    public final List subscriptlist() throws RecognitionException {
        subscriptlist_stack.push(new subscriptlist_scope());
        List result = null;


        ((subscriptlist_scope)subscriptlist_stack.peek()).current = new ArrayList<Command>(); 
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1112:2: ( ^( SUBSCRIPTS subscript ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1112:4: ^( SUBSCRIPTS subscript )
            {
            match(input,SUBSCRIPTS,FOLLOW_SUBSCRIPTS_in_subscriptlist3057); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_subscript_in_subscriptlist3059);
            subscript();

            state._fsp--;


            match(input, Token.UP, null); 



            		result = ((subscriptlist_scope)subscriptlist_stack.peek()).current; 
            		System.out.println("Subscript List:"+result);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            subscriptlist_stack.pop();
        }
        return result;
    }
    // $ANTLR end "subscriptlist"



    // $ANTLR start "subscript"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1118:1: subscript : cmd= test ;
    public final void subscript() throws RecognitionException {
        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1119:2: (cmd= test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1120:2: cmd= test
            {
            pushFollow(FOLLOW_test_in_subscript3089);
            cmd=test();

            state._fsp--;



                    	((subscriptlist_scope)subscriptlist_stack.peek()).current.add(cmd);
                    	//commandList.remove(cmd);
            		System.out.println("Current Subscript List:"+((subscriptlist_scope)subscriptlist_stack.peek()).current);
            		
                    

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subscript"



    // $ANTLR start "exprlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1128:1: exprlist returns [Command result] : cmd= expr ;
    public final Command exprlist() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1129:3: (cmd= expr )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1129:5: cmd= expr
            {
            pushFollow(FOLLOW_expr_in_exprlist3116);
            cmd=expr();

            state._fsp--;



                result = cmd;
              

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "exprlist"



    // $ANTLR start "testlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1134:1: testlist returns [Command result] : cmd= test ;
    public final Command testlist() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1135:5: (cmd= test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1135:7: cmd= test
            {
            pushFollow(FOLLOW_test_in_testlist3140);
            cmd=test();

            state._fsp--;



                  result = cmd;
                

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "testlist"



    // $ANTLR start "classdef"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1140:1: classdef returns [Command result] : ^( CLASS_CMD id1= NAME id2= suite (id3= testlist )? ) ;
    public final Command classdef() throws RecognitionException {
        Command result = null;


        CommonTree id1=null;
        List id2 =null;

        Command id3 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1141:5: ( ^( CLASS_CMD id1= NAME id2= suite (id3= testlist )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1141:7: ^( CLASS_CMD id1= NAME id2= suite (id3= testlist )? )
            {
            match(input,CLASS_CMD,FOLLOW_CLASS_CMD_in_classdef3165); 

            match(input, Token.DOWN, null); 
            id1=(CommonTree)match(input,NAME,FOLLOW_NAME_in_classdef3169); 

            pushFollow(FOLLOW_suite_in_classdef3173);
            id2=suite();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1141:41: (id3= testlist )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( ((LA53_0 >= ALT_NOTEQUAL && LA53_0 <= AMPER)||LA53_0==AND||LA53_0==CIRCUMFLEX||LA53_0==DOUBLESLASH||LA53_0==DOUBLESTAR||LA53_0==EQUAL||LA53_0==EXPRESSION||(LA53_0 >= GREATER && LA53_0 <= GREATEREQUAL)||LA53_0==IN||(LA53_0 >= IS && LA53_0 <= ISNOT)||LA53_0==LEFTSHIFT||(LA53_0 >= LESS && LA53_0 <= LESSEQUAL)||LA53_0==MINUS||(LA53_0 >= NOT && LA53_0 <= NOTIN)||LA53_0==OR||LA53_0==PLUS||LA53_0==RIGHTSHIFT||LA53_0==SLASH||LA53_0==STAR||LA53_0==UNARY_EXPRESSION||LA53_0==VBAR) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1141:41: id3= testlist
                    {
                    pushFollow(FOLLOW_testlist_in_classdef3177);
                    id3=testlist();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 



                    if(id3!=null){
                      result = new ClassDefinitionCommand((id1!=null?id1.getText():null), id2, id3, line);
                      
                      int start = ((ClassDefinitionCommand)(result)).findStartLine();
                      ((ClassDefinitionCommand)(result)).setStartLine(start);
                    		
                      System.out.println("***ClassDefinitionCommand -> " + (id1!=null?id1.getText():null) + " " + id2 + " " + id3 + " Start: " + ((ClassDefinitionCommand)(result)).getStartLine() + " End: " + ((ClassDefinitionCommand)(result)).getEndLine() + " " + result );
                      commandList.add(result);
                      classList.add(result);
                    }
                    else {
                      result = new ClassDefinitionCommand((id1!=null?id1.getText():null), id2, line);
                      
                      int start = ((ClassDefinitionCommand)(result)).findStartLine();
                      ((ClassDefinitionCommand)(result)).setStartLine(start);
                      
                      System.out.println("***ClassDefinitionCommand -> " + (id1!=null?id1.getText():null) + " " + id2 + " Start: " + ((ClassDefinitionCommand)(result)).getStartLine() + " End: " + ((ClassDefinitionCommand)(result)).getEndLine() + " " + result );
                      commandList.add(result);
                      classList.add(result);
                    }
                

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "classdef"


    protected static class arglist_scope {
        List current;
    }
    protected Stack arglist_stack = new Stack();



    // $ANTLR start "arglist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1165:1: arglist returns [List result] : ^( ARGUMENTS ( argument )+ ) ;
    public final List arglist() throws RecognitionException {
        arglist_stack.push(new arglist_scope());
        List result = null;


        ((arglist_scope)arglist_stack.peek()).current = new ArrayList<Command>(); 
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1168:2: ( ^( ARGUMENTS ( argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1168:5: ^( ARGUMENTS ( argument )+ )
            {
            match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_arglist3211); 

            match(input, Token.DOWN, null); 
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1168:17: ( argument )+
            int cnt54=0;
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( ((LA54_0 >= ALT_NOTEQUAL && LA54_0 <= AMPER)||LA54_0==AND||LA54_0==CIRCUMFLEX||LA54_0==DOUBLESLASH||LA54_0==DOUBLESTAR||LA54_0==EQUAL||LA54_0==EXPRESSION||(LA54_0 >= GREATER && LA54_0 <= GREATEREQUAL)||LA54_0==IN||(LA54_0 >= IS && LA54_0 <= ISNOT)||LA54_0==LEFTSHIFT||(LA54_0 >= LESS && LA54_0 <= LESSEQUAL)||LA54_0==MINUS||(LA54_0 >= NOT && LA54_0 <= NOTIN)||LA54_0==OR||LA54_0==PLUS||LA54_0==RIGHTSHIFT||LA54_0==SLASH||LA54_0==STAR||LA54_0==UNARY_EXPRESSION||LA54_0==VBAR) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1168:17: argument
            	    {
            	    pushFollow(FOLLOW_argument_in_arglist3213);
            	    argument();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt54 >= 1 ) break loop54;
                        EarlyExitException eee =
                            new EarlyExitException(54, input);
                        throw eee;
                }
                cnt54++;
            } while (true);


            match(input, Token.UP, null); 


             
            		result = ((arglist_scope)arglist_stack.peek()).current; 
            		System.out.println("List:"+result);
            		
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            arglist_stack.pop();
        }
        return result;
    }
    // $ANTLR end "arglist"



    // $ANTLR start "argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1175:1: argument : cmd= test ;
    public final void argument() throws RecognitionException {
        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1175:10: (cmd= test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1175:12: cmd= test
            {
            pushFollow(FOLLOW_test_in_argument3230);
            cmd=test();

            state._fsp--;



            		((arglist_scope)arglist_stack.peek()).current.add(cmd);
            		System.out.println("Current List:"+((arglist_scope)arglist_stack.peek()).current);
            	

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "argument"



    // $ANTLR start "list_iter"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1181:1: list_iter returns [Command result] : (cmd= list_for |cmd= list_if );
    public final Command list_iter() throws RecognitionException {
        Command result = null;


        Command cmd =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1182:2: (cmd= list_for |cmd= list_if )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==LISTLOOPCONTROL_CMD) ) {
                alt55=1;
            }
            else if ( (LA55_0==LISTCONDITION_CMD) ) {
                alt55=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1182:4: cmd= list_for
                    {
                    pushFollow(FOLLOW_list_for_in_list_iter3250);
                    cmd=list_for();

                    state._fsp--;


                    result = cmd;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1183:5: cmd= list_if
                    {
                    pushFollow(FOLLOW_list_if_in_list_iter3260);
                    cmd=list_if();

                    state._fsp--;


                    result = cmd;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "list_iter"



    // $ANTLR start "list_for"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1186:1: list_for returns [Command result] : ^( LISTLOOPCONTROL_CMD id1= exprlist id2= testlist (id3= list_iter )? ) ;
    public final Command list_for() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        Command id2 =null;

        Command id3 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1187:11: ( ^( LISTLOOPCONTROL_CMD id1= exprlist id2= testlist (id3= list_iter )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1187:13: ^( LISTLOOPCONTROL_CMD id1= exprlist id2= testlist (id3= list_iter )? )
            {
            match(input,LISTLOOPCONTROL_CMD,FOLLOW_LISTLOOPCONTROL_CMD_in_list_for3294); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_exprlist_in_list_for3298);
            id1=exprlist();

            state._fsp--;


            pushFollow(FOLLOW_testlist_in_list_for3302);
            id2=testlist();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1187:64: (id3= list_iter )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( ((LA56_0 >= LISTCONDITION_CMD && LA56_0 <= LISTLOOPCONTROL_CMD)) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1187:64: id3= list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_for3306);
                    id3=list_iter();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 



                      	if(id3!=null){
                      		result = new ListLoopControlCommand(id1, id2, id3, line);
                      		System.out.println("***ListLoopControl -> Args: " + id1 +" "+id2+" "+id3 + " "+"Line: " + line + " " +result);
                      		commandList.add(result);
                      	}
                      	else
                      		{
                      		result = new ListLoopControlCommand(id1, id2, line);
                      		System.out.println("***ListLoopControl -> Args: " + id1 +" "+id2+ " "+"Line: " + line + " " +result);
                      		commandList.add(result);
                      	}
                      

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "list_for"



    // $ANTLR start "list_if"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1202:1: list_if returns [Command result] : ^( LISTCONDITION_CMD id1= test (id2= list_iter )? ) ;
    public final Command list_if() throws RecognitionException {
        Command result = null;


        Command id1 =null;

        Command id2 =null;


        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1203:2: ( ^( LISTCONDITION_CMD id1= test (id2= list_iter )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1203:4: ^( LISTCONDITION_CMD id1= test (id2= list_iter )? )
            {
            match(input,LISTCONDITION_CMD,FOLLOW_LISTCONDITION_CMD_in_list_if3333); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_test_in_list_if3337);
            id1=test();

            state._fsp--;


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1203:36: (id2= list_iter )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( ((LA57_0 >= LISTCONDITION_CMD && LA57_0 <= LISTLOOPCONTROL_CMD)) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenanceTree.g:1203:36: id2= list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_if3341);
                    id2=list_iter();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 



            		result = new ListConditionCommand (id1, id2, line);
                      	System.out.println("***ListCondition -> Args: " + id1 +" "+id2+" "+ " "+"Line: " + line + " " +result);
                      	commandList.add(result);
                      

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "list_if"

    // Delegated rules


 

    public static final BitSet FOLLOW_simple_stmt_in_single_input48 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_single_input66 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_file_input90 = new BitSet(new long[]{0x3092E243C002C4F2L,0x01CA03CE4EAE601EL});
    public static final BitSet FOLLOW_testlist_in_eval_input118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decorator_in_decorators140 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AT_in_decorator159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dotted_attr_in_decorator161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000011000L});
    public static final BitSet FOLLOW_LPAREN_in_decorator164 = new BitSet(new long[]{0x0000000000000100L,0x0000001000000000L});
    public static final BitSet FOLLOW_arglist_in_decorator166 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_decorator169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_decorator173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr195 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_DOT_in_dotted_attr198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr200 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_OUTER_FUNCTION_CMD_in_funcdef221 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAME_in_funcdef225 = new BitSet(new long[]{0x0100000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameters_in_funcdef229 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_suite_in_funcdef233 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_varargslist_in_parameters261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_FUNCTION_ARGS_in_varargslist295 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_defparameter_in_varargslist297 = new BitSet(new long[]{0x3080C241400040B8L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_defparameter321 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ASSIGN_in_defparameter324 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_defparameter326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_stmt348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_stmt_in_small_stmt405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_print_stmt_in_small_stmt419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_stmt_in_small_stmt433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flow_stmt_in_small_stmt446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRINT_CMD_in_print_stmt472 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_printlist_in_print_stmt476 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PRINT_ARGS_in_printlist518 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_print_argument_in_printlist520 = new BitSet(new long[]{0x3080C241400040B8L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_print_argument537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_name_in_import_stmt560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_from_in_import_stmt570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_CMD_in_import_from589 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAME_in_import_from593 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_import_as_names_in_import_from597 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IMPORT_CMD_in_import_from605 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAME_in_import_from609 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_import_from613 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IMPORT_ARGS_in_import_as_names641 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names643 = new BitSet(new long[]{0x0020000000000008L});
    public static final BitSet FOLLOW_IMPORT_EQUIV_in_import_as_name666 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAME_in_import_as_name670 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_import_as_name674 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IMPORT_ARGS_in_dotted_as_names708 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names710 = new BitSet(new long[]{0x0020000000000008L});
    public static final BitSet FOLLOW_IMPORT_EQUIV_in_dotted_as_name728 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IMPORT_NAME_in_dotted_as_name732 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name736 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IMPORT_EQUIV_in_dotted_as_name746 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name750 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name754 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IMPORT_CMD_in_import_name775 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_dotted_as_names_in_import_name779 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_stmt805 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt809 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt813 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLUSEQUAL_in_expr_stmt824 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt828 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt832 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUSEQUAL_in_expr_stmt843 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt847 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt851 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAREQUAL_in_expr_stmt862 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt866 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt870 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SLASHEQUAL_in_expr_stmt881 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt885 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt889 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERCENTEQUAL_in_expr_stmt900 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt904 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt908 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AMPEREQUAL_in_expr_stmt919 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt923 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt927 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VBAREQUAL_in_expr_stmt938 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt942 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt946 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CIRCUMFLEXEQUAL_in_expr_stmt957 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt961 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt965 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LEFTSHIFTEQUAL_in_expr_stmt976 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt980 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt984 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RIGHTSHIFTEQUAL_in_expr_stmt995 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt999 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1003 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DOUBLESTAREQUAL_in_expr_stmt1014 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1018 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1022 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DOUBLESLASHEQUAL_in_expr_stmt1033 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1037 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1041 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_flow_stmt1070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_CMD_in_return_stmt1088 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_arglist_in_return_stmt1092 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_if_stmt_in_compound_stmt1117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_compound_stmt1133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_compound_stmt1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_compound_stmt1177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcdef_in_compound_stmt1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classdef_in_compound_stmt1222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IFBLOCK_in_if_stmt1268 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_if_clause_in_if_stmt1272 = new BitSet(new long[]{0x0000002800000008L});
    public static final BitSet FOLLOW_elif_clauses_in_if_stmt1276 = new BitSet(new long[]{0x0000002000000008L});
    public static final BitSet FOLLOW_else_clause_in_if_stmt1281 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IF_CMD_in_if_clause1315 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_if_clause1319 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_suite_in_if_clause1323 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELIF_CLAUSES_in_elif_clauses1349 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_elif_clause_in_elif_clauses1351 = new BitSet(new long[]{0x0000001000000008L});
    public static final BitSet FOLLOW_ELIF_CMD_in_elif_clause1368 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_elif_clause1372 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_suite_in_elif_clause1376 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELSE_CMD_in_else_clause1403 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_suite_in_else_clause1407 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WHILEBLOCK_in_while_stmt1427 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_while_clause_in_while_stmt1431 = new BitSet(new long[]{0x0000002000000008L});
    public static final BitSet FOLLOW_else_clause_in_while_stmt1435 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WHILE_CMD_in_while_clause1458 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_while_clause1462 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_suite_in_while_clause1466 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FORLOOP_CMD_in_for_stmt1486 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_exprlist_in_for_stmt1490 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_for_stmt1494 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_suite_in_for_stmt1498 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TRYBLOCK_in_try_stmt1521 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_try_clause_in_try_stmt1525 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_except_clause_in_try_stmt1529 = new BitSet(new long[]{0x0000080000000008L});
    public static final BitSet FOLLOW_finally_clause_in_try_stmt1533 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TRY_CMD_in_try_clause1556 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_suite_in_try_clause1560 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXCEPT_CMD_in_except_clause1582 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_trailer_in_except_clause1586 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_suite_in_except_clause1591 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALLY_CMD_in_finally_clause1612 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_suite_in_finally_clause1616 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDENT_in_suite1644 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stmt_inside_block_in_suite1646 = new BitSet(new long[]{0x3092E243C002C4F8L,0x01CA03CE4EAE601EL});
    public static final BitSet FOLLOW_simple_stmt_in_stmt_inside_block1669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt_inside_block1680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_test_in_test1702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_or_test1726 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_or_test_in_or_test1730 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_or_test_in_or_test1734 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_and_test_in_or_test1745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_and_test1769 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_and_test_in_and_test1773 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144040E201AL});
    public static final BitSet FOLLOW_and_test_in_and_test1777 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_not_test_in_and_test1788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_not_test1811 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_not_test_in_not_test1815 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_comparison_in_not_test1825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_comparison1846 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison1850 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison1854 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GREATER_in_comparison1866 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison1870 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison1874 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EQUAL_in_comparison1886 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison1890 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison1894 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GREATEREQUAL_in_comparison1906 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison1910 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison1914 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LESSEQUAL_in_comparison1926 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison1930 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison1934 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALT_NOTEQUAL_in_comparison1946 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison1950 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison1954 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOTEQUAL_in_comparison1966 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison1970 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison1974 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IN_in_comparison1986 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison1990 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison1994 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOTIN_in_comparison2006 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison2010 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison2014 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_in_comparison2026 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison2030 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison2034 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ISNOT_in_comparison2046 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_comparison_in_comparison2050 = new BitSet(new long[]{0x3080C24140004030L,0x00480144040C201AL});
    public static final BitSet FOLLOW_comparison_in_comparison2054 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_comparison2066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VBAR_in_expr2088 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr2092 = new BitSet(new long[]{0x0000020140004020L,0x0048014404002002L});
    public static final BitSet FOLLOW_expr_in_expr2096 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_xor_expr_in_expr2107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CIRCUMFLEX_in_xor_expr2130 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_xor_expr_in_xor_expr2134 = new BitSet(new long[]{0x0000020140004020L,0x0008014404002002L});
    public static final BitSet FOLLOW_xor_expr_in_xor_expr2138 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPER_in_and_expr2172 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_and_expr_in_and_expr2176 = new BitSet(new long[]{0x0000020140000020L,0x0008014404002002L});
    public static final BitSet FOLLOW_and_expr_in_and_expr2180 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFTSHIFT_in_shift_expr2213 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_shift_expr_in_shift_expr2217 = new BitSet(new long[]{0x0000020140000000L,0x0008014404002002L});
    public static final BitSet FOLLOW_shift_expr_in_shift_expr2221 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_shift_expr2232 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_shift_expr_in_shift_expr2236 = new BitSet(new long[]{0x0000020140000000L,0x0008014404002002L});
    public static final BitSet FOLLOW_shift_expr_in_shift_expr2240 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr2251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_arith_expr2273 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_arith_expr_in_arith_expr2277 = new BitSet(new long[]{0x0000020140000000L,0x0008014004002000L});
    public static final BitSet FOLLOW_arith_expr_in_arith_expr2281 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_arith_expr2292 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_arith_expr_in_arith_expr2296 = new BitSet(new long[]{0x0000020140000000L,0x0008014004002000L});
    public static final BitSet FOLLOW_arith_expr_in_arith_expr2300 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_term_in_arith_expr2311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_term2334 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_term_in_term2338 = new BitSet(new long[]{0x0000020140000000L,0x0008014000000000L});
    public static final BitSet FOLLOW_term_in_term2342 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SLASH_in_term2352 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_term_in_term2356 = new BitSet(new long[]{0x0000020140000000L,0x0008014000000000L});
    public static final BitSet FOLLOW_term_in_term2360 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DOUBLESLASH_in_term2370 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_term_in_term2374 = new BitSet(new long[]{0x0000020140000000L,0x0008014000000000L});
    public static final BitSet FOLLOW_term_in_term2378 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_term2389 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_term_in_term2393 = new BitSet(new long[]{0x0000020140000000L,0x0008014000000000L});
    public static final BitSet FOLLOW_term_in_term2397 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_factor_in_term2408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNARY_EXPRESSION_in_factor2432 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_PLUS_in_factor2436 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_power_in_factor2440 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNARY_EXPRESSION_in_factor2449 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_MINUS_in_factor2453 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_power_in_factor2457 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNARY_EXPRESSION_in_factor2465 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_TILDE_in_factor2469 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_power_in_factor2473 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_power_in_factor2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSION_in_power2506 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_atom_in_power2510 = new BitSet(new long[]{0x0000000000000008L,0x0000500000000000L});
    public static final BitSet FOLLOW_trailer_in_power2514 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VARIABLE_CMD_in_atom2542 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAME_in_atom2546 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_atom2550 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CLASSVARIABLE_CMD_in_atom2559 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_DOTTED_NAME_in_atom2563 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_atom2567 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VALUETYPE_in_atom2576 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_INT_TYPE_in_atom2580 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_INT_in_atom2584 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_atom2588 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VALUETYPE_in_atom2596 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_LONG_TYPE_in_atom2600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LONGINT_in_atom2604 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_atom2608 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VALUETYPE_in_atom2616 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_DOUBLE_TYPE_in_atom2620 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_FLOAT_in_atom2624 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_atom2628 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VALUETYPE_in_atom2636 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_STRING_TYPE_in_atom2640 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_STRING_in_atom2644 = new BitSet(new long[]{0x0000000000000108L});
    public static final BitSet FOLLOW_string_argument_in_atom2648 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INNER_BRANCH_in_atom2657 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_gexp_in_atom2661 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LISTMAKER_CMD_in_atom2670 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_listmaker_in_atom2674 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DICTMAKER_CMD_in_atom2685 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_dictmaker_in_atom2689 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_arglist_in_string_argument2710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LISTCOMPREHENSION_CMD_in_listmaker2738 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_list_arguments_in_listmaker2742 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000080L});
    public static final BitSet FOLLOW_list_for_in_listmaker2746 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIST_ARGS_in_list_arguments2782 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_list_argument_in_list_arguments2784 = new BitSet(new long[]{0x3080C241400040B8L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_list_argument2806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DICTIONARY_CMD_in_dictmaker2829 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_dict_arguments_in_dictmaker2833 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DICT_ARGS_in_dict_arguments2874 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments2876 = new BitSet(new long[]{0x3080C241400040B8L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_dict_argument2898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist_gexp2922 = new BitSet(new long[]{0x3080C241400040B2L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_testlist_gexp2935 = new BitSet(new long[]{0x3080C241400040B2L,0x00480144042E201AL});
    public static final BitSet FOLLOW_inner_trailer_in_trailer2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subscriptlist_in_trailer2979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRAILER_in_inner_trailer3013 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_arglist_in_inner_trailer3017 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TRAILER_in_inner_trailer3025 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NO_ARGS_in_inner_trailer3027 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUBSCRIPTS_in_subscriptlist3057 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist3059 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_test_in_subscript3089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist3140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_CMD_in_classdef3165 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAME_in_classdef3169 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_suite_in_classdef3173 = new BitSet(new long[]{0x3080C241400040B8L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_classdef3177 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ARGUMENTS_in_arglist3211 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_argument_in_arglist3213 = new BitSet(new long[]{0x3080C241400040B8L,0x00480144042E201AL});
    public static final BitSet FOLLOW_test_in_argument3230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_for_in_list_iter3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_if_in_list_iter3260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LISTLOOPCONTROL_CMD_in_list_for3294 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_exprlist_in_list_for3298 = new BitSet(new long[]{0x3080C241400040B0L,0x00480144042E201AL});
    public static final BitSet FOLLOW_testlist_in_list_for3302 = new BitSet(new long[]{0x0000000000000008L,0x00000000000000C0L});
    public static final BitSet FOLLOW_list_iter_in_list_for3306 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LISTCONDITION_CMD_in_list_if3333 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_list_if3337 = new BitSet(new long[]{0x0000000000000008L,0x00000000000000C0L});
    public static final BitSet FOLLOW_list_iter_in_list_if3341 = new BitSet(new long[]{0x0000000000000008L});

}