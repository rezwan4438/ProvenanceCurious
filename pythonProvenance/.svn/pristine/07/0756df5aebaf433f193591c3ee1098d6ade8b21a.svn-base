package pythonProvenance;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeNodeStream;

import pythonProvenance.commands.ClassDefinitionCommand;
import pythonProvenance.commands.Command;
import pythonProvenance.commands.ImportEquivalent;
import pythonProvenance.commands.MethodCommand;

public class PythonProvenanceCmd {
	public PythonProvenanceCmd(){
	}

	public String start(String fullpath){
		try {
			ANTLRFileStream h1 = new ANTLRFileStream(fullpath);
			PythonProvenanceLexer lex = new PythonProvenanceLexer(h1);
			CommonTokenStream tokens = new CommonTokenStream(lex);
			PythonProvenanceParser parser = new PythonProvenanceParser(tokens);
			// starting rule of the grammar, thus start of the parser
			PythonProvenanceParser.file_input_return r = parser.file_input();
			CommonTree ast = null;
			if(r!=null){
				ast = (CommonTree) r.getTree();
			}
			
			if(ast==null) return "Th selected script seems to be empty.";
			/********** WALKER ***********/
			CommonTreeNodeStream nodes = new CommonTreeNodeStream(ast);
			nodes.setTokenStream(tokens);
			PythonProvenanceTree walker = new PythonProvenanceTree(nodes);
			walker.file_input();
			/******* walker complete *****/

			ArrayList<Command> c = (ArrayList<Command>) walker.getClassList();
			ArrayList<ImportEquivalent> p = (ArrayList<ImportEquivalent>) walker.getImportPairsList();
			Iterator<ImportEquivalent> pt = p.iterator(); 
			Command cmd;
			boolean foundClass = false;
			boolean foundImport = false;
			String fPart = "";
			String lPart = "";
			//			System.out.println("****** Commands ******* ");
			ArrayList<Command> b = (ArrayList<Command>) walker.getCommandList();
			Iterator<Command> it = b.iterator(); 
			//			BufferedWriter out ;
			// Open a file to write methods 
			//			File file=new File("methods_list.txt");
			//			if(file.exists()==true){
			//				file.delete();
			//			}
			//			FileWriter fstream = new FileWriter( "methods_list.txt", true );
			//			out = new BufferedWriter(fstream);
			HashMap<String,CommandLinePair> cmdMap = new HashMap<String,CommandLinePair>();
			while(it.hasNext()){
				cmd = it.next();
				//				System.out.println(cmd);
				/**** Write method command into a file ****/
				if(cmd!=null)
//					if(cmd.toString().matches("(.*)MethodCommand(.*)")){
						if(cmd instanceof MethodCommand){
//						System.out.println("Method Name: " + ((MethodCommand)cmd).getName());
						if(((MethodCommand)cmd).getName().contains(".")){
							fPart = ((MethodCommand)cmd).getName().split("[.]")[0];
							lPart = ((MethodCommand)cmd).getName().split("[.]")[1];
						} else{
							fPart = ((MethodCommand)cmd).getName();
							lPart = ((MethodCommand)cmd).getName();
						}
						foundClass = false;
						foundImport = false;
						Iterator<Command> classit = c.iterator();
						while(classit.hasNext()){
							ClassDefinitionCommand curCmd = (ClassDefinitionCommand) classit.next();
							if(((MethodCommand)cmd).getName().equals(curCmd.getName())){
								foundClass = true;
								break;
							}
						}
						if(p.size()==0)
							foundImport = false;
						else{
							Iterator<ImportEquivalent> pit = p.iterator(); 
							while(pit.hasNext()){
								ImportEquivalent curIm = pit.next();
								if(fPart.equals(curIm.getOp2())){
									foundImport = true;
									break;
								}
							}
						}
						if(foundClass == false && foundImport == true){
							CommandLinePair cmdLP = new CommandLinePair((MethodCommand)cmd, ((MethodCommand)(cmd)).getLine());
							cmdMap.put(((MethodCommand)(cmd)).getName(),cmdLP);
//							out.write(((MethodCommand)(cmd)).getName()+ "," + ((MethodCommand)(cmd)).getLine());
//							out.write("\n");
						}
						else if(foundClass == false && foundImport == false){
							CommandLinePair cmdLP = new CommandLinePair((MethodCommand)cmd, ((MethodCommand)(cmd)).getLine());
							cmdMap.put(lPart,cmdLP);
//							out.write(lPart+ "," + ((MethodCommand)(cmd)).getLine());
//							out.write("\n");
						}
						else{
							System.out.println("Not including ... ");
						}
					}

			}

			/***** Close methods_list.txt *****/
//			out.close();
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
		} catch (RecognitionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;

	}

}
