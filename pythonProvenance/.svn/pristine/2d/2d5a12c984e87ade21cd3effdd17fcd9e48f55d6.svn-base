// $ANTLR 3.4 D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g 2012-11-07 17:42:11

  package pythonProvenance;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class PythonProvenanceParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALT_NOTEQUAL", "AMPER", "AMPEREQUAL", "AND", "ARGUMENTS", "AS", "ASSIGN", "ASSIGN_CMD", "AT", "BACKQUOTE", "CIRCUMFLEX", "CIRCUMFLEXEQUAL", "CLASSVARIABLE_CMD", "CLASS_CMD", "COLON", "COMMA", "COMMENT", "COMPLEX", "CONTINUED_LINE", "DEDENT", "DICTIONARY_CMD", "DICTMAKER_CMD", "DICT_ARGS", "DIGITS", "DOT", "DOTTED_NAME", "DOUBLESLASH", "DOUBLESLASHEQUAL", "DOUBLESTAR", "DOUBLESTAREQUAL", "DOUBLE_TYPE", "ELIF_CLAUSES", "ELIF_CMD", "ELSE_CMD", "EQUAL", "ESC", "EXCEPT_CMD", "EXPRESSION", "Exponent", "FINALLY_CMD", "FLOAT", "FORLOOP_CMD", "GREATER", "GREATEREQUAL", "IF", "IFBLOCK", "IF_CMD", "IMPORT_ARGS", "IMPORT_CMD", "IMPORT_EQUIV", "IN", "INDENT", "INNER_BRANCH", "INT", "INT_TYPE", "IS", "ISNOT", "I_NAME", "LBRACK", "LCURLY", "LEADING_WS", "LEFTSHIFT", "LEFTSHIFTEQUAL", "LESS", "LESSEQUAL", "LISTCOMPREHENSION_CMD", "LISTCONDITION_CMD", "LISTLOOPCONTROL_CMD", "LISTMAKER_CMD", "LIST_ARGS", "LONGINT", "LONG_TYPE", "LPAREN", "MINUS", "MINUSEQUAL", "NAME", "NEWLINE", "NOT", "NOTEQUAL", "NOTIN", "NO_ARGS", "OR", "OUTER_FUNCTION_ARGS", "OUTER_FUNCTION_CMD", "PERCENT", "PERCENTEQUAL", "PLUS", "PLUSEQUAL", "PRINT", "PRINT_ARGS", "PRINT_CMD", "RBRACK", "RCURLY", "RETURN_CMD", "RIGHTSHIFT", "RIGHTSHIFTEQUAL", "RPAREN", "SEMI", "SLASH", "SLASHEQUAL", "STAR", "STAREQUAL", "STRING", "STRING_TYPE", "SUBSCRIPTS", "TILDE", "TRAILER", "TRIAPOS", "TRIQUOTE", "TRYBLOCK", "TRY_CMD", "UNARY_EXPRESSION", "VALUETYPE", "VARIABLE_CMD", "VBAR", "VBAREQUAL", "WHILEBLOCK", "WHILE_CMD", "WITH_ARGS", "WITH_CMD", "WITH_EQUIV", "WS", "'assert'", "'break'", "'class'", "'continue'", "'def'", "'del'", "'elif'", "'else'", "'except'", "'exec'", "'finally'", "'for'", "'from'", "'global'", "'import'", "'pass'", "'raise'", "'return'", "'try'", "'while'", "'with'"
    };

    public static final int EOF=-1;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int ALT_NOTEQUAL=4;
    public static final int AMPER=5;
    public static final int AMPEREQUAL=6;
    public static final int AND=7;
    public static final int ARGUMENTS=8;
    public static final int AS=9;
    public static final int ASSIGN=10;
    public static final int ASSIGN_CMD=11;
    public static final int AT=12;
    public static final int BACKQUOTE=13;
    public static final int CIRCUMFLEX=14;
    public static final int CIRCUMFLEXEQUAL=15;
    public static final int CLASSVARIABLE_CMD=16;
    public static final int CLASS_CMD=17;
    public static final int COLON=18;
    public static final int COMMA=19;
    public static final int COMMENT=20;
    public static final int COMPLEX=21;
    public static final int CONTINUED_LINE=22;
    public static final int DEDENT=23;
    public static final int DICTIONARY_CMD=24;
    public static final int DICTMAKER_CMD=25;
    public static final int DICT_ARGS=26;
    public static final int DIGITS=27;
    public static final int DOT=28;
    public static final int DOTTED_NAME=29;
    public static final int DOUBLESLASH=30;
    public static final int DOUBLESLASHEQUAL=31;
    public static final int DOUBLESTAR=32;
    public static final int DOUBLESTAREQUAL=33;
    public static final int DOUBLE_TYPE=34;
    public static final int ELIF_CLAUSES=35;
    public static final int ELIF_CMD=36;
    public static final int ELSE_CMD=37;
    public static final int EQUAL=38;
    public static final int ESC=39;
    public static final int EXCEPT_CMD=40;
    public static final int EXPRESSION=41;
    public static final int Exponent=42;
    public static final int FINALLY_CMD=43;
    public static final int FLOAT=44;
    public static final int FORLOOP_CMD=45;
    public static final int GREATER=46;
    public static final int GREATEREQUAL=47;
    public static final int IF=48;
    public static final int IFBLOCK=49;
    public static final int IF_CMD=50;
    public static final int IMPORT_ARGS=51;
    public static final int IMPORT_CMD=52;
    public static final int IMPORT_EQUIV=53;
    public static final int IN=54;
    public static final int INDENT=55;
    public static final int INNER_BRANCH=56;
    public static final int INT=57;
    public static final int INT_TYPE=58;
    public static final int IS=59;
    public static final int ISNOT=60;
    public static final int I_NAME=61;
    public static final int LBRACK=62;
    public static final int LCURLY=63;
    public static final int LEADING_WS=64;
    public static final int LEFTSHIFT=65;
    public static final int LEFTSHIFTEQUAL=66;
    public static final int LESS=67;
    public static final int LESSEQUAL=68;
    public static final int LISTCOMPREHENSION_CMD=69;
    public static final int LISTCONDITION_CMD=70;
    public static final int LISTLOOPCONTROL_CMD=71;
    public static final int LISTMAKER_CMD=72;
    public static final int LIST_ARGS=73;
    public static final int LONGINT=74;
    public static final int LONG_TYPE=75;
    public static final int LPAREN=76;
    public static final int MINUS=77;
    public static final int MINUSEQUAL=78;
    public static final int NAME=79;
    public static final int NEWLINE=80;
    public static final int NOT=81;
    public static final int NOTEQUAL=82;
    public static final int NOTIN=83;
    public static final int NO_ARGS=84;
    public static final int OR=85;
    public static final int OUTER_FUNCTION_ARGS=86;
    public static final int OUTER_FUNCTION_CMD=87;
    public static final int PERCENT=88;
    public static final int PERCENTEQUAL=89;
    public static final int PLUS=90;
    public static final int PLUSEQUAL=91;
    public static final int PRINT=92;
    public static final int PRINT_ARGS=93;
    public static final int PRINT_CMD=94;
    public static final int RBRACK=95;
    public static final int RCURLY=96;
    public static final int RETURN_CMD=97;
    public static final int RIGHTSHIFT=98;
    public static final int RIGHTSHIFTEQUAL=99;
    public static final int RPAREN=100;
    public static final int SEMI=101;
    public static final int SLASH=102;
    public static final int SLASHEQUAL=103;
    public static final int STAR=104;
    public static final int STAREQUAL=105;
    public static final int STRING=106;
    public static final int STRING_TYPE=107;
    public static final int SUBSCRIPTS=108;
    public static final int TILDE=109;
    public static final int TRAILER=110;
    public static final int TRIAPOS=111;
    public static final int TRIQUOTE=112;
    public static final int TRYBLOCK=113;
    public static final int TRY_CMD=114;
    public static final int UNARY_EXPRESSION=115;
    public static final int VALUETYPE=116;
    public static final int VARIABLE_CMD=117;
    public static final int VBAR=118;
    public static final int VBAREQUAL=119;
    public static final int WHILEBLOCK=120;
    public static final int WHILE_CMD=121;
    public static final int WITH_ARGS=122;
    public static final int WITH_CMD=123;
    public static final int WITH_EQUIV=124;
    public static final int WS=125;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public PythonProvenanceParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public PythonProvenanceParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return PythonProvenanceParser.tokenNames; }
    public String getGrammarFileName() { return "D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g"; }


    public static class single_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:97:1: single_input : ( NEWLINE !| simple_stmt | compound_stmt NEWLINE !);
    public final PythonProvenanceParser.single_input_return single_input() throws RecognitionException {
        PythonProvenanceParser.single_input_return retval = new PythonProvenanceParser.single_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE1=null;
        Token NEWLINE4=null;
        PythonProvenanceParser.simple_stmt_return simple_stmt2 =null;

        PythonProvenanceParser.compound_stmt_return compound_stmt3 =null;


        Object NEWLINE1_tree=null;
        Object NEWLINE4_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:97:14: ( NEWLINE !| simple_stmt | compound_stmt NEWLINE !)
            int alt1=3;
            switch ( input.LA(1) ) {
            case NEWLINE:
                {
                alt1=1;
                }
                break;
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case MINUS:
            case NAME:
            case NOT:
            case PLUS:
            case PRINT:
            case STRING:
            case TILDE:
            case 126:
            case 127:
            case 129:
            case 131:
            case 135:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt1=2;
                }
                break;
            case AT:
            case IF:
            case 128:
            case 130:
            case 137:
            case 144:
            case 145:
            case 146:
                {
                alt1=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }

            switch (alt1) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:97:16: NEWLINE !
                    {
                    root_0 = (Object)adaptor.nil();


                    NEWLINE1=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input411); 

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:98:16: simple_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_stmt_in_single_input429);
                    simple_stmt2=simple_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_stmt2.getTree());

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:99:16: compound_stmt NEWLINE !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_compound_stmt_in_single_input446);
                    compound_stmt3=compound_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, compound_stmt3.getTree());

                    NEWLINE4=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input448); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_input"


    public static class file_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "file_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:102:1: file_input : ( NEWLINE !| stmt )* ;
    public final PythonProvenanceParser.file_input_return file_input() throws RecognitionException {
        PythonProvenanceParser.file_input_return retval = new PythonProvenanceParser.file_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE5=null;
        PythonProvenanceParser.stmt_return stmt6 =null;


        Object NEWLINE5_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:102:12: ( ( NEWLINE !| stmt )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:102:14: ( NEWLINE !| stmt )*
            {
            root_0 = (Object)adaptor.nil();


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:102:14: ( NEWLINE !| stmt )*
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==NEWLINE) ) {
                    alt2=1;
                }
                else if ( ((LA2_0 >= AT && LA2_0 <= BACKQUOTE)||LA2_0==DOTTED_NAME||LA2_0==FLOAT||LA2_0==IF||LA2_0==INT||(LA2_0 >= LBRACK && LA2_0 <= LCURLY)||LA2_0==LONGINT||(LA2_0 >= LPAREN && LA2_0 <= MINUS)||LA2_0==NAME||LA2_0==NOT||LA2_0==PLUS||LA2_0==PRINT||LA2_0==STRING||LA2_0==TILDE||(LA2_0 >= 126 && LA2_0 <= 131)||LA2_0==135||(LA2_0 >= 137 && LA2_0 <= 146)) ) {
                    alt2=2;
                }


                switch (alt2) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:102:15: NEWLINE !
            	    {
            	    NEWLINE5=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_file_input472); 

            	    }
            	    break;
            	case 2 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:102:26: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_file_input477);
            	    stmt6=stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, stmt6.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "file_input"


    public static class eval_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eval_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:106:1: eval_input : ( NEWLINE !)* testlist ( NEWLINE !)* ;
    public final PythonProvenanceParser.eval_input_return eval_input() throws RecognitionException {
        PythonProvenanceParser.eval_input_return retval = new PythonProvenanceParser.eval_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE7=null;
        Token NEWLINE9=null;
        PythonProvenanceParser.testlist_return testlist8 =null;


        Object NEWLINE7_tree=null;
        Object NEWLINE9_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:106:12: ( ( NEWLINE !)* testlist ( NEWLINE !)* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:106:14: ( NEWLINE !)* testlist ( NEWLINE !)*
            {
            root_0 = (Object)adaptor.nil();


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:106:14: ( NEWLINE !)*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NEWLINE) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:106:15: NEWLINE !
            	    {
            	    NEWLINE7=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input502); 

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            pushFollow(FOLLOW_testlist_in_eval_input507);
            testlist8=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist8.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:106:35: ( NEWLINE !)*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==NEWLINE) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:106:36: NEWLINE !
            	    {
            	    NEWLINE9=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input510); 

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eval_input"


    public static class decorators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decorators"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:109:1: decorators : ( decorator )+ ;
    public final PythonProvenanceParser.decorators_return decorators() throws RecognitionException {
        PythonProvenanceParser.decorators_return retval = new PythonProvenanceParser.decorators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.decorator_return decorator10 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:109:11: ( ( decorator )+ )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:109:13: ( decorator )+
            {
            root_0 = (Object)adaptor.nil();


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:109:13: ( decorator )+
            int cnt5=0;
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==AT) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:109:13: decorator
            	    {
            	    pushFollow(FOLLOW_decorator_in_decorators532);
            	    decorator10=decorator();

            	    state._fsp--;

            	    adaptor.addChild(root_0, decorator10.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "decorators"


    public static class decorator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decorator"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:112:1: decorator : AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE ;
    public final PythonProvenanceParser.decorator_return decorator() throws RecognitionException {
        PythonProvenanceParser.decorator_return retval = new PythonProvenanceParser.decorator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AT11=null;
        Token LPAREN13=null;
        Token RPAREN15=null;
        Token NEWLINE16=null;
        PythonProvenanceParser.dotted_attr_return dotted_attr12 =null;

        PythonProvenanceParser.arglist_return arglist14 =null;


        Object AT11_tree=null;
        Object LPAREN13_tree=null;
        Object RPAREN15_tree=null;
        Object NEWLINE16_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:112:10: ( AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:112:12: AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE
            {
            root_0 = (Object)adaptor.nil();


            AT11=(Token)match(input,AT,FOLLOW_AT_in_decorator551); 
            AT11_tree = 
            (Object)adaptor.create(AT11)
            ;
            adaptor.addChild(root_0, AT11_tree);


            pushFollow(FOLLOW_dotted_attr_in_decorator553);
            dotted_attr12=dotted_attr();

            state._fsp--;

            adaptor.addChild(root_0, dotted_attr12.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:112:27: ( LPAREN ( arglist )? RPAREN )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:112:28: LPAREN ( arglist )? RPAREN
                    {
                    LPAREN13=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_decorator556); 
                    LPAREN13_tree = 
                    (Object)adaptor.create(LPAREN13)
                    ;
                    adaptor.addChild(root_0, LPAREN13_tree);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:112:35: ( arglist )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==BACKQUOTE||LA6_0==DOTTED_NAME||LA6_0==DOUBLESTAR||LA6_0==FLOAT||LA6_0==INT||(LA6_0 >= LBRACK && LA6_0 <= LCURLY)||LA6_0==LONGINT||(LA6_0 >= LPAREN && LA6_0 <= MINUS)||LA6_0==NAME||LA6_0==NOT||LA6_0==PLUS||LA6_0==STAR||LA6_0==STRING||LA6_0==TILDE) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:112:35: arglist
                            {
                            pushFollow(FOLLOW_arglist_in_decorator558);
                            arglist14=arglist();

                            state._fsp--;

                            adaptor.addChild(root_0, arglist14.getTree());

                            }
                            break;

                    }


                    RPAREN15=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_decorator561); 
                    RPAREN15_tree = 
                    (Object)adaptor.create(RPAREN15)
                    ;
                    adaptor.addChild(root_0, RPAREN15_tree);


                    }
                    break;

            }


            NEWLINE16=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_decorator565); 
            NEWLINE16_tree = 
            (Object)adaptor.create(NEWLINE16)
            ;
            adaptor.addChild(root_0, NEWLINE16_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "decorator"


    public static class dotted_attr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dotted_attr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:115:1: dotted_attr : NAME ( DOT NAME )* ;
    public final PythonProvenanceParser.dotted_attr_return dotted_attr() throws RecognitionException {
        PythonProvenanceParser.dotted_attr_return retval = new PythonProvenanceParser.dotted_attr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NAME17=null;
        Token DOT18=null;
        Token NAME19=null;

        Object NAME17_tree=null;
        Object DOT18_tree=null;
        Object NAME19_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:116:5: ( NAME ( DOT NAME )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:116:7: NAME ( DOT NAME )*
            {
            root_0 = (Object)adaptor.nil();


            NAME17=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_attr587); 
            NAME17_tree = 
            (Object)adaptor.create(NAME17)
            ;
            adaptor.addChild(root_0, NAME17_tree);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:116:12: ( DOT NAME )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==DOT) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:116:13: DOT NAME
            	    {
            	    DOT18=(Token)match(input,DOT,FOLLOW_DOT_in_dotted_attr590); 
            	    DOT18_tree = 
            	    (Object)adaptor.create(DOT18)
            	    ;
            	    adaptor.addChild(root_0, DOT18_tree);


            	    NAME19=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_attr592); 
            	    NAME19_tree = 
            	    (Object)adaptor.create(NAME19)
            	    ;
            	    adaptor.addChild(root_0, NAME19_tree);


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dotted_attr"


    public static class funcdef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "funcdef"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:119:1: funcdef : ( decorators )? ref= 'def' id1= NAME parameters COLON suite -> ^( OUTER_FUNCTION_CMD[$ref] $id1 ( parameters )? suite ) ;
    public final PythonProvenanceParser.funcdef_return funcdef() throws RecognitionException {
        PythonProvenanceParser.funcdef_return retval = new PythonProvenanceParser.funcdef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token id1=null;
        Token COLON22=null;
        PythonProvenanceParser.decorators_return decorators20 =null;

        PythonProvenanceParser.parameters_return parameters21 =null;

        PythonProvenanceParser.suite_return suite23 =null;


        Object ref_tree=null;
        Object id1_tree=null;
        Object COLON22_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_decorators=new RewriteRuleSubtreeStream(adaptor,"rule decorators");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:119:9: ( ( decorators )? ref= 'def' id1= NAME parameters COLON suite -> ^( OUTER_FUNCTION_CMD[$ref] $id1 ( parameters )? suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:119:11: ( decorators )? ref= 'def' id1= NAME parameters COLON suite
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:119:11: ( decorators )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==AT) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:119:11: decorators
                    {
                    pushFollow(FOLLOW_decorators_in_funcdef608);
                    decorators20=decorators();

                    state._fsp--;

                    stream_decorators.add(decorators20.getTree());

                    }
                    break;

            }


            ref=(Token)match(input,130,FOLLOW_130_in_funcdef613);  
            stream_130.add(ref);


            id1=(Token)match(input,NAME,FOLLOW_NAME_in_funcdef617);  
            stream_NAME.add(id1);


            pushFollow(FOLLOW_parameters_in_funcdef619);
            parameters21=parameters();

            state._fsp--;

            stream_parameters.add(parameters21.getTree());

            COLON22=(Token)match(input,COLON,FOLLOW_COLON_in_funcdef621);  
            stream_COLON.add(COLON22);


            pushFollow(FOLLOW_suite_in_funcdef623);
            suite23=suite();

            state._fsp--;

            stream_suite.add(suite23.getTree());

            // AST REWRITE
            // elements: id1, suite, parameters
            // token labels: id1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 119:65: -> ^( OUTER_FUNCTION_CMD[$ref] $id1 ( parameters )? suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:119:68: ^( OUTER_FUNCTION_CMD[$ref] $id1 ( parameters )? suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OUTER_FUNCTION_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:119:100: ( parameters )?
                if ( stream_parameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameters.nextTree());

                }
                stream_parameters.reset();

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "funcdef"


    public static class parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameters"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:122:1: parameters : LPAREN ! ( varargslist )? RPAREN !;
    public final PythonProvenanceParser.parameters_return parameters() throws RecognitionException {
        PythonProvenanceParser.parameters_return retval = new PythonProvenanceParser.parameters_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LPAREN24=null;
        Token RPAREN26=null;
        PythonProvenanceParser.varargslist_return varargslist25 =null;


        Object LPAREN24_tree=null;
        Object RPAREN26_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:122:12: ( LPAREN ! ( varargslist )? RPAREN !)
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:122:14: LPAREN ! ( varargslist )? RPAREN !
            {
            root_0 = (Object)adaptor.nil();


            LPAREN24=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parameters655); 

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:122:22: ( varargslist )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==BACKQUOTE||LA10_0==DOTTED_NAME||LA10_0==DOUBLESTAR||LA10_0==FLOAT||LA10_0==INT||(LA10_0 >= LBRACK && LA10_0 <= LCURLY)||LA10_0==LONGINT||(LA10_0 >= LPAREN && LA10_0 <= MINUS)||LA10_0==NAME||LA10_0==NOT||LA10_0==PLUS||LA10_0==STAR||LA10_0==STRING||LA10_0==TILDE) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:122:23: varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_parameters659);
                    varargslist25=varargslist();

                    state._fsp--;

                    adaptor.addChild(root_0, varargslist25.getTree());

                    }
                    break;

            }


            RPAREN26=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parameters663); 

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameters"


    public static class varargslist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varargslist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:125:1: varargslist : ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )? )? -> ^( OUTER_FUNCTION_ARGS ( defparameter )+ ) | STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME );
    public final PythonProvenanceParser.varargslist_return varargslist() throws RecognitionException {
        PythonProvenanceParser.varargslist_return retval = new PythonProvenanceParser.varargslist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA28=null;
        Token COMMA30=null;
        Token STAR31=null;
        Token NAME32=null;
        Token COMMA33=null;
        Token DOUBLESTAR34=null;
        Token NAME35=null;
        Token DOUBLESTAR36=null;
        Token NAME37=null;
        Token STAR38=null;
        Token NAME39=null;
        Token COMMA40=null;
        Token DOUBLESTAR41=null;
        Token NAME42=null;
        Token DOUBLESTAR43=null;
        Token NAME44=null;
        PythonProvenanceParser.defparameter_return defparameter27 =null;

        PythonProvenanceParser.defparameter_return defparameter29 =null;


        Object COMMA28_tree=null;
        Object COMMA30_tree=null;
        Object STAR31_tree=null;
        Object NAME32_tree=null;
        Object COMMA33_tree=null;
        Object DOUBLESTAR34_tree=null;
        Object NAME35_tree=null;
        Object DOUBLESTAR36_tree=null;
        Object NAME37_tree=null;
        Object STAR38_tree=null;
        Object NAME39_tree=null;
        Object COMMA40_tree=null;
        Object DOUBLESTAR41_tree=null;
        Object NAME42_tree=null;
        Object DOUBLESTAR43_tree=null;
        Object NAME44_tree=null;
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOUBLESTAR=new RewriteRuleTokenStream(adaptor,"token DOUBLESTAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_defparameter=new RewriteRuleSubtreeStream(adaptor,"rule defparameter");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:125:13: ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )? )? -> ^( OUTER_FUNCTION_ARGS ( defparameter )+ ) | STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )
            int alt16=3;
            switch ( input.LA(1) ) {
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case MINUS:
            case NAME:
            case NOT:
            case PLUS:
            case STRING:
            case TILDE:
                {
                alt16=1;
                }
                break;
            case STAR:
                {
                alt16=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt16=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:125:15: defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )? )?
                    {
                    pushFollow(FOLLOW_defparameter_in_varargslist685);
                    defparameter27=defparameter();

                    state._fsp--;

                    stream_defparameter.add(defparameter27.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:125:28: ( options {greedy=true; } : COMMA defparameter )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( (LA11_1==BACKQUOTE||LA11_1==DOTTED_NAME||LA11_1==FLOAT||LA11_1==INT||(LA11_1 >= LBRACK && LA11_1 <= LCURLY)||LA11_1==LONGINT||(LA11_1 >= LPAREN && LA11_1 <= MINUS)||LA11_1==NAME||LA11_1==NOT||LA11_1==PLUS||LA11_1==STRING||LA11_1==TILDE) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:125:52: COMMA defparameter
                    	    {
                    	    COMMA28=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist695);  
                    	    stream_COMMA.add(COMMA28);


                    	    pushFollow(FOLLOW_defparameter_in_varargslist697);
                    	    defparameter29=defparameter();

                    	    state._fsp--;

                    	    stream_defparameter.add(defparameter29.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:126:15: ( COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )? )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==COMMA) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:126:16: COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )?
                            {
                            COMMA30=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist716);  
                            stream_COMMA.add(COMMA30);


                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:127:19: ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )?
                            int alt13=3;
                            int LA13_0 = input.LA(1);

                            if ( (LA13_0==STAR) ) {
                                alt13=1;
                            }
                            else if ( (LA13_0==DOUBLESTAR) ) {
                                alt13=2;
                            }
                            switch (alt13) {
                                case 1 :
                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:127:21: STAR NAME ( COMMA DOUBLESTAR NAME )?
                                    {
                                    STAR31=(Token)match(input,STAR,FOLLOW_STAR_in_varargslist738);  
                                    stream_STAR.add(STAR31);


                                    NAME32=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist740);  
                                    stream_NAME.add(NAME32);


                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:127:31: ( COMMA DOUBLESTAR NAME )?
                                    int alt12=2;
                                    int LA12_0 = input.LA(1);

                                    if ( (LA12_0==COMMA) ) {
                                        alt12=1;
                                    }
                                    switch (alt12) {
                                        case 1 :
                                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:127:32: COMMA DOUBLESTAR NAME
                                            {
                                            COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist743);  
                                            stream_COMMA.add(COMMA33);


                                            DOUBLESTAR34=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist745);  
                                            stream_DOUBLESTAR.add(DOUBLESTAR34);


                                            NAME35=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist747);  
                                            stream_NAME.add(NAME35);


                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:128:21: DOUBLESTAR NAME
                                    {
                                    DOUBLESTAR36=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist771);  
                                    stream_DOUBLESTAR.add(DOUBLESTAR36);


                                    NAME37=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist773);  
                                    stream_NAME.add(NAME37);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: defparameter
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 130:18: -> ^( OUTER_FUNCTION_ARGS ( defparameter )+ )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:130:21: ^( OUTER_FUNCTION_ARGS ( defparameter )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(OUTER_FUNCTION_ARGS, "OUTER_FUNCTION_ARGS")
                        , root_1);

                        if ( !(stream_defparameter.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_defparameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_defparameter.nextTree());

                        }
                        stream_defparameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:131:15: STAR NAME ( COMMA DOUBLESTAR NAME )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR38=(Token)match(input,STAR,FOLLOW_STAR_in_varargslist836); 
                    STAR38_tree = 
                    (Object)adaptor.create(STAR38)
                    ;
                    adaptor.addChild(root_0, STAR38_tree);


                    NAME39=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist838); 
                    NAME39_tree = 
                    (Object)adaptor.create(NAME39)
                    ;
                    adaptor.addChild(root_0, NAME39_tree);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:131:25: ( COMMA DOUBLESTAR NAME )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==COMMA) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:131:26: COMMA DOUBLESTAR NAME
                            {
                            COMMA40=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist841); 
                            COMMA40_tree = 
                            (Object)adaptor.create(COMMA40)
                            ;
                            adaptor.addChild(root_0, COMMA40_tree);


                            DOUBLESTAR41=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist843); 
                            DOUBLESTAR41_tree = 
                            (Object)adaptor.create(DOUBLESTAR41)
                            ;
                            adaptor.addChild(root_0, DOUBLESTAR41_tree);


                            NAME42=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist845); 
                            NAME42_tree = 
                            (Object)adaptor.create(NAME42)
                            ;
                            adaptor.addChild(root_0, NAME42_tree);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:132:15: DOUBLESTAR NAME
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLESTAR43=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist864); 
                    DOUBLESTAR43_tree = 
                    (Object)adaptor.create(DOUBLESTAR43)
                    ;
                    adaptor.addChild(root_0, DOUBLESTAR43_tree);


                    NAME44=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist866); 
                    NAME44_tree = 
                    (Object)adaptor.create(NAME44)
                    ;
                    adaptor.addChild(root_0, NAME44_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varargslist"


    public static class defparameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defparameter"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:135:1: defparameter : test ( ASSIGN test )? ;
    public final PythonProvenanceParser.defparameter_return defparameter() throws RecognitionException {
        PythonProvenanceParser.defparameter_return retval = new PythonProvenanceParser.defparameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSIGN46=null;
        PythonProvenanceParser.test_return test45 =null;

        PythonProvenanceParser.test_return test47 =null;


        Object ASSIGN46_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:135:14: ( test ( ASSIGN test )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:135:16: test ( ASSIGN test )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_test_in_defparameter888);
            test45=test();

            state._fsp--;

            adaptor.addChild(root_0, test45.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:135:21: ( ASSIGN test )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==ASSIGN) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:135:22: ASSIGN test
                    {
                    ASSIGN46=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_defparameter891); 
                    ASSIGN46_tree = 
                    (Object)adaptor.create(ASSIGN46)
                    ;
                    adaptor.addChild(root_0, ASSIGN46_tree);


                    pushFollow(FOLLOW_test_in_defparameter893);
                    test47=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test47.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "defparameter"


    public static class stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:138:1: stmt : ( simple_stmt | compound_stmt );
    public final PythonProvenanceParser.stmt_return stmt() throws RecognitionException {
        PythonProvenanceParser.stmt_return retval = new PythonProvenanceParser.stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.simple_stmt_return simple_stmt48 =null;

        PythonProvenanceParser.compound_stmt_return compound_stmt49 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:138:6: ( simple_stmt | compound_stmt )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==BACKQUOTE||LA18_0==DOTTED_NAME||LA18_0==FLOAT||LA18_0==INT||(LA18_0 >= LBRACK && LA18_0 <= LCURLY)||LA18_0==LONGINT||(LA18_0 >= LPAREN && LA18_0 <= MINUS)||LA18_0==NAME||LA18_0==NOT||LA18_0==PLUS||LA18_0==PRINT||LA18_0==STRING||LA18_0==TILDE||(LA18_0 >= 126 && LA18_0 <= 127)||LA18_0==129||LA18_0==131||LA18_0==135||(LA18_0 >= 138 && LA18_0 <= 143)) ) {
                alt18=1;
            }
            else if ( (LA18_0==AT||LA18_0==IF||LA18_0==128||LA18_0==130||LA18_0==137||(LA18_0 >= 144 && LA18_0 <= 146)) ) {
                alt18=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:138:8: simple_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_stmt_in_stmt919);
                    simple_stmt48=simple_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_stmt48.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:139:8: compound_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_compound_stmt_in_stmt929);
                    compound_stmt49=compound_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, compound_stmt49.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmt"


    public static class stmt_inside_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt_inside_block"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:142:1: stmt_inside_block : ( simple_stmt | compound_stmt );
    public final PythonProvenanceParser.stmt_inside_block_return stmt_inside_block() throws RecognitionException {
        PythonProvenanceParser.stmt_inside_block_return retval = new PythonProvenanceParser.stmt_inside_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.simple_stmt_return simple_stmt50 =null;

        PythonProvenanceParser.compound_stmt_return compound_stmt51 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:143:3: ( simple_stmt | compound_stmt )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==BACKQUOTE||LA19_0==DOTTED_NAME||LA19_0==FLOAT||LA19_0==INT||(LA19_0 >= LBRACK && LA19_0 <= LCURLY)||LA19_0==LONGINT||(LA19_0 >= LPAREN && LA19_0 <= MINUS)||LA19_0==NAME||LA19_0==NOT||LA19_0==PLUS||LA19_0==PRINT||LA19_0==STRING||LA19_0==TILDE||(LA19_0 >= 126 && LA19_0 <= 127)||LA19_0==129||LA19_0==131||LA19_0==135||(LA19_0 >= 138 && LA19_0 <= 143)) ) {
                alt19=1;
            }
            else if ( (LA19_0==AT||LA19_0==IF||LA19_0==128||LA19_0==130||LA19_0==137||(LA19_0 >= 144 && LA19_0 <= 146)) ) {
                alt19=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:143:5: simple_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_stmt_in_stmt_inside_block951);
                    simple_stmt50=simple_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_stmt50.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:144:9: compound_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_compound_stmt_in_stmt_inside_block962);
                    compound_stmt51=compound_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, compound_stmt51.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmt_inside_block"


    public static class simple_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:147:1: simple_stmt : small_stmt ( NEWLINE !) ;
    public final PythonProvenanceParser.simple_stmt_return simple_stmt() throws RecognitionException {
        PythonProvenanceParser.simple_stmt_return retval = new PythonProvenanceParser.simple_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE53=null;
        PythonProvenanceParser.small_stmt_return small_stmt52 =null;


        Object NEWLINE53_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:148:3: ( small_stmt ( NEWLINE !) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:148:5: small_stmt ( NEWLINE !)
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_small_stmt_in_simple_stmt979);
            small_stmt52=small_stmt();

            state._fsp--;

            adaptor.addChild(root_0, small_stmt52.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:148:16: ( NEWLINE !)
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:148:17: NEWLINE !
            {
            NEWLINE53=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_simple_stmt982); 

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_stmt"


    public static class small_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "small_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:151:1: small_stmt : ( expr_stmt | print_stmt | del_stmt ->| pass_stmt ->| flow_stmt | import_stmt | global_stmt ->| exec_stmt ->| assert_stmt ->);
    public final PythonProvenanceParser.small_stmt_return small_stmt() throws RecognitionException {
        PythonProvenanceParser.small_stmt_return retval = new PythonProvenanceParser.small_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.expr_stmt_return expr_stmt54 =null;

        PythonProvenanceParser.print_stmt_return print_stmt55 =null;

        PythonProvenanceParser.del_stmt_return del_stmt56 =null;

        PythonProvenanceParser.pass_stmt_return pass_stmt57 =null;

        PythonProvenanceParser.flow_stmt_return flow_stmt58 =null;

        PythonProvenanceParser.import_stmt_return import_stmt59 =null;

        PythonProvenanceParser.global_stmt_return global_stmt60 =null;

        PythonProvenanceParser.exec_stmt_return exec_stmt61 =null;

        PythonProvenanceParser.assert_stmt_return assert_stmt62 =null;


        RewriteRuleSubtreeStream stream_global_stmt=new RewriteRuleSubtreeStream(adaptor,"rule global_stmt");
        RewriteRuleSubtreeStream stream_pass_stmt=new RewriteRuleSubtreeStream(adaptor,"rule pass_stmt");
        RewriteRuleSubtreeStream stream_del_stmt=new RewriteRuleSubtreeStream(adaptor,"rule del_stmt");
        RewriteRuleSubtreeStream stream_assert_stmt=new RewriteRuleSubtreeStream(adaptor,"rule assert_stmt");
        RewriteRuleSubtreeStream stream_exec_stmt=new RewriteRuleSubtreeStream(adaptor,"rule exec_stmt");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:151:12: ( expr_stmt | print_stmt | del_stmt ->| pass_stmt ->| flow_stmt | import_stmt | global_stmt ->| exec_stmt ->| assert_stmt ->)
            int alt20=9;
            switch ( input.LA(1) ) {
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case MINUS:
            case NAME:
            case NOT:
            case PLUS:
            case STRING:
            case TILDE:
                {
                alt20=1;
                }
                break;
            case PRINT:
                {
                alt20=2;
                }
                break;
            case 131:
                {
                alt20=3;
                }
                break;
            case 141:
                {
                alt20=4;
                }
                break;
            case 127:
            case 129:
            case 142:
            case 143:
                {
                alt20=5;
                }
                break;
            case 138:
            case 140:
                {
                alt20=6;
                }
                break;
            case 139:
                {
                alt20=7;
                }
                break;
            case 135:
                {
                alt20=8;
                }
                break;
            case 126:
                {
                alt20=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }

            switch (alt20) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:151:14: expr_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_stmt_in_small_stmt995);
                    expr_stmt54=expr_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_stmt54.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:152:14: print_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_print_stmt_in_small_stmt1010);
                    print_stmt55=print_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, print_stmt55.getTree());

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:153:14: del_stmt
                    {
                    pushFollow(FOLLOW_del_stmt_in_small_stmt1026);
                    del_stmt56=del_stmt();

                    state._fsp--;

                    stream_del_stmt.add(del_stmt56.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 153:23: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:154:14: pass_stmt
                    {
                    pushFollow(FOLLOW_pass_stmt_in_small_stmt1044);
                    pass_stmt57=pass_stmt();

                    state._fsp--;

                    stream_pass_stmt.add(pass_stmt57.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 154:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:155:14: flow_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_flow_stmt_in_small_stmt1061);
                    flow_stmt58=flow_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, flow_stmt58.getTree());

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:156:14: import_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_stmt_in_small_stmt1077);
                    import_stmt59=import_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, import_stmt59.getTree());

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:157:14: global_stmt
                    {
                    pushFollow(FOLLOW_global_stmt_in_small_stmt1092);
                    global_stmt60=global_stmt();

                    state._fsp--;

                    stream_global_stmt.add(global_stmt60.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 157:26: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 8 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:158:14: exec_stmt
                    {
                    pushFollow(FOLLOW_exec_stmt_in_small_stmt1109);
                    exec_stmt61=exec_stmt();

                    state._fsp--;

                    stream_exec_stmt.add(exec_stmt61.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 158:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 9 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:159:14: assert_stmt
                    {
                    pushFollow(FOLLOW_assert_stmt_in_small_stmt1126);
                    assert_stmt62=assert_stmt();

                    state._fsp--;

                    stream_assert_stmt.add(assert_stmt62.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 159:26: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "small_stmt"


    public static class expr_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:162:1: expr_stmt : testlist ( ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist )? ;
    public final PythonProvenanceParser.expr_stmt_return expr_stmt() throws RecognitionException {
        PythonProvenanceParser.expr_stmt_return retval = new PythonProvenanceParser.expr_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSIGN64=null;
        Token PLUSEQUAL65=null;
        Token MINUSEQUAL66=null;
        Token STAREQUAL67=null;
        Token SLASHEQUAL68=null;
        Token PERCENTEQUAL69=null;
        Token AMPEREQUAL70=null;
        Token VBAREQUAL71=null;
        Token CIRCUMFLEXEQUAL72=null;
        Token LEFTSHIFTEQUAL73=null;
        Token RIGHTSHIFTEQUAL74=null;
        Token DOUBLESTAREQUAL75=null;
        Token DOUBLESLASHEQUAL76=null;
        PythonProvenanceParser.testlist_return testlist63 =null;

        PythonProvenanceParser.testlist_return testlist77 =null;


        Object ASSIGN64_tree=null;
        Object PLUSEQUAL65_tree=null;
        Object MINUSEQUAL66_tree=null;
        Object STAREQUAL67_tree=null;
        Object SLASHEQUAL68_tree=null;
        Object PERCENTEQUAL69_tree=null;
        Object AMPEREQUAL70_tree=null;
        Object VBAREQUAL71_tree=null;
        Object CIRCUMFLEXEQUAL72_tree=null;
        Object LEFTSHIFTEQUAL73_tree=null;
        Object RIGHTSHIFTEQUAL74_tree=null;
        Object DOUBLESTAREQUAL75_tree=null;
        Object DOUBLESLASHEQUAL76_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:162:11: ( testlist ( ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:162:13: testlist ( ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_expr_stmt1141);
            testlist63=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist63.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:162:22: ( ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==AMPEREQUAL||LA22_0==ASSIGN||LA22_0==CIRCUMFLEXEQUAL||LA22_0==DOUBLESLASHEQUAL||LA22_0==DOUBLESTAREQUAL||LA22_0==LEFTSHIFTEQUAL||LA22_0==MINUSEQUAL||LA22_0==PERCENTEQUAL||LA22_0==PLUSEQUAL||LA22_0==RIGHTSHIFTEQUAL||LA22_0==SLASHEQUAL||LA22_0==STAREQUAL||LA22_0==VBAREQUAL) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:163:5: ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:163:5: ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^)
                    int alt21=13;
                    switch ( input.LA(1) ) {
                    case ASSIGN:
                        {
                        alt21=1;
                        }
                        break;
                    case PLUSEQUAL:
                        {
                        alt21=2;
                        }
                        break;
                    case MINUSEQUAL:
                        {
                        alt21=3;
                        }
                        break;
                    case STAREQUAL:
                        {
                        alt21=4;
                        }
                        break;
                    case SLASHEQUAL:
                        {
                        alt21=5;
                        }
                        break;
                    case PERCENTEQUAL:
                        {
                        alt21=6;
                        }
                        break;
                    case AMPEREQUAL:
                        {
                        alt21=7;
                        }
                        break;
                    case VBAREQUAL:
                        {
                        alt21=8;
                        }
                        break;
                    case CIRCUMFLEXEQUAL:
                        {
                        alt21=9;
                        }
                        break;
                    case LEFTSHIFTEQUAL:
                        {
                        alt21=10;
                        }
                        break;
                    case RIGHTSHIFTEQUAL:
                        {
                        alt21=11;
                        }
                        break;
                    case DOUBLESTAREQUAL:
                        {
                        alt21=12;
                        }
                        break;
                    case DOUBLESLASHEQUAL:
                        {
                        alt21=13;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 0, input);

                        throw nvae;

                    }

                    switch (alt21) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:163:7: ASSIGN ^
                            {
                            ASSIGN64=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_stmt1152); 
                            ASSIGN64_tree = 
                            (Object)adaptor.create(ASSIGN64)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(ASSIGN64_tree, root_0);


                            }
                            break;
                        case 2 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:164:7: PLUSEQUAL ^
                            {
                            PLUSEQUAL65=(Token)match(input,PLUSEQUAL,FOLLOW_PLUSEQUAL_in_expr_stmt1161); 
                            PLUSEQUAL65_tree = 
                            (Object)adaptor.create(PLUSEQUAL65)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(PLUSEQUAL65_tree, root_0);


                            }
                            break;
                        case 3 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:165:7: MINUSEQUAL ^
                            {
                            MINUSEQUAL66=(Token)match(input,MINUSEQUAL,FOLLOW_MINUSEQUAL_in_expr_stmt1170); 
                            MINUSEQUAL66_tree = 
                            (Object)adaptor.create(MINUSEQUAL66)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(MINUSEQUAL66_tree, root_0);


                            }
                            break;
                        case 4 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:166:7: STAREQUAL ^
                            {
                            STAREQUAL67=(Token)match(input,STAREQUAL,FOLLOW_STAREQUAL_in_expr_stmt1179); 
                            STAREQUAL67_tree = 
                            (Object)adaptor.create(STAREQUAL67)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(STAREQUAL67_tree, root_0);


                            }
                            break;
                        case 5 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:167:7: SLASHEQUAL ^
                            {
                            SLASHEQUAL68=(Token)match(input,SLASHEQUAL,FOLLOW_SLASHEQUAL_in_expr_stmt1188); 
                            SLASHEQUAL68_tree = 
                            (Object)adaptor.create(SLASHEQUAL68)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(SLASHEQUAL68_tree, root_0);


                            }
                            break;
                        case 6 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:168:7: PERCENTEQUAL ^
                            {
                            PERCENTEQUAL69=(Token)match(input,PERCENTEQUAL,FOLLOW_PERCENTEQUAL_in_expr_stmt1197); 
                            PERCENTEQUAL69_tree = 
                            (Object)adaptor.create(PERCENTEQUAL69)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(PERCENTEQUAL69_tree, root_0);


                            }
                            break;
                        case 7 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:169:7: AMPEREQUAL ^
                            {
                            AMPEREQUAL70=(Token)match(input,AMPEREQUAL,FOLLOW_AMPEREQUAL_in_expr_stmt1206); 
                            AMPEREQUAL70_tree = 
                            (Object)adaptor.create(AMPEREQUAL70)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(AMPEREQUAL70_tree, root_0);


                            }
                            break;
                        case 8 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:170:7: VBAREQUAL ^
                            {
                            VBAREQUAL71=(Token)match(input,VBAREQUAL,FOLLOW_VBAREQUAL_in_expr_stmt1215); 
                            VBAREQUAL71_tree = 
                            (Object)adaptor.create(VBAREQUAL71)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(VBAREQUAL71_tree, root_0);


                            }
                            break;
                        case 9 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:171:7: CIRCUMFLEXEQUAL ^
                            {
                            CIRCUMFLEXEQUAL72=(Token)match(input,CIRCUMFLEXEQUAL,FOLLOW_CIRCUMFLEXEQUAL_in_expr_stmt1224); 
                            CIRCUMFLEXEQUAL72_tree = 
                            (Object)adaptor.create(CIRCUMFLEXEQUAL72)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(CIRCUMFLEXEQUAL72_tree, root_0);


                            }
                            break;
                        case 10 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:172:7: LEFTSHIFTEQUAL ^
                            {
                            LEFTSHIFTEQUAL73=(Token)match(input,LEFTSHIFTEQUAL,FOLLOW_LEFTSHIFTEQUAL_in_expr_stmt1233); 
                            LEFTSHIFTEQUAL73_tree = 
                            (Object)adaptor.create(LEFTSHIFTEQUAL73)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(LEFTSHIFTEQUAL73_tree, root_0);


                            }
                            break;
                        case 11 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:173:7: RIGHTSHIFTEQUAL ^
                            {
                            RIGHTSHIFTEQUAL74=(Token)match(input,RIGHTSHIFTEQUAL,FOLLOW_RIGHTSHIFTEQUAL_in_expr_stmt1242); 
                            RIGHTSHIFTEQUAL74_tree = 
                            (Object)adaptor.create(RIGHTSHIFTEQUAL74)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(RIGHTSHIFTEQUAL74_tree, root_0);


                            }
                            break;
                        case 12 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:174:7: DOUBLESTAREQUAL ^
                            {
                            DOUBLESTAREQUAL75=(Token)match(input,DOUBLESTAREQUAL,FOLLOW_DOUBLESTAREQUAL_in_expr_stmt1251); 
                            DOUBLESTAREQUAL75_tree = 
                            (Object)adaptor.create(DOUBLESTAREQUAL75)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(DOUBLESTAREQUAL75_tree, root_0);


                            }
                            break;
                        case 13 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:175:7: DOUBLESLASHEQUAL ^
                            {
                            DOUBLESLASHEQUAL76=(Token)match(input,DOUBLESLASHEQUAL,FOLLOW_DOUBLESLASHEQUAL_in_expr_stmt1260); 
                            DOUBLESLASHEQUAL76_tree = 
                            (Object)adaptor.create(DOUBLESLASHEQUAL76)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(DOUBLESLASHEQUAL76_tree, root_0);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_testlist_in_expr_stmt1274);
                    testlist77=testlist();

                    state._fsp--;

                    adaptor.addChild(root_0, testlist77.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_stmt"


    public static class print_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "print_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:180:1: print_stmt : ref= PRINT ( printlist | RIGHTSHIFT printlist )? -> ^( PRINT_CMD[$ref] printlist ) ;
    public final PythonProvenanceParser.print_stmt_return print_stmt() throws RecognitionException {
        PythonProvenanceParser.print_stmt_return retval = new PythonProvenanceParser.print_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token RIGHTSHIFT79=null;
        PythonProvenanceParser.printlist_return printlist78 =null;

        PythonProvenanceParser.printlist_return printlist80 =null;


        Object ref_tree=null;
        Object RIGHTSHIFT79_tree=null;
        RewriteRuleTokenStream stream_RIGHTSHIFT=new RewriteRuleTokenStream(adaptor,"token RIGHTSHIFT");
        RewriteRuleTokenStream stream_PRINT=new RewriteRuleTokenStream(adaptor,"token PRINT");
        RewriteRuleSubtreeStream stream_printlist=new RewriteRuleSubtreeStream(adaptor,"rule printlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:180:12: (ref= PRINT ( printlist | RIGHTSHIFT printlist )? -> ^( PRINT_CMD[$ref] printlist ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:180:14: ref= PRINT ( printlist | RIGHTSHIFT printlist )?
            {
            ref=(Token)match(input,PRINT,FOLLOW_PRINT_in_print_stmt1292);  
            stream_PRINT.add(ref);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:180:24: ( printlist | RIGHTSHIFT printlist )?
            int alt23=3;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==BACKQUOTE||LA23_0==DOTTED_NAME||LA23_0==FLOAT||LA23_0==INT||(LA23_0 >= LBRACK && LA23_0 <= LCURLY)||LA23_0==LONGINT||(LA23_0 >= LPAREN && LA23_0 <= MINUS)||LA23_0==NAME||LA23_0==NOT||LA23_0==PLUS||LA23_0==STRING||LA23_0==TILDE) ) {
                alt23=1;
            }
            else if ( (LA23_0==RIGHTSHIFT) ) {
                alt23=2;
            }
            switch (alt23) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:180:25: printlist
                    {
                    pushFollow(FOLLOW_printlist_in_print_stmt1295);
                    printlist78=printlist();

                    state._fsp--;

                    stream_printlist.add(printlist78.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:180:37: RIGHTSHIFT printlist
                    {
                    RIGHTSHIFT79=(Token)match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_print_stmt1299);  
                    stream_RIGHTSHIFT.add(RIGHTSHIFT79);


                    pushFollow(FOLLOW_printlist_in_print_stmt1301);
                    printlist80=printlist();

                    state._fsp--;

                    stream_printlist.add(printlist80.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: printlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:60: -> ^( PRINT_CMD[$ref] printlist )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:180:63: ^( PRINT_CMD[$ref] printlist )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRINT_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_printlist.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "print_stmt"


    public static class printlist_return extends ParserRuleReturnScope {
        public boolean newline;
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:183:1: printlist returns [boolean newline] : print_argument ( options {k=2; } : COMMA print_argument )* ( COMMA )? -> ^( PRINT_ARGS ( print_argument )+ ) ;
    public final PythonProvenanceParser.printlist_return printlist() throws RecognitionException {
        PythonProvenanceParser.printlist_return retval = new PythonProvenanceParser.printlist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA82=null;
        Token COMMA84=null;
        PythonProvenanceParser.print_argument_return print_argument81 =null;

        PythonProvenanceParser.print_argument_return print_argument83 =null;


        Object COMMA82_tree=null;
        Object COMMA84_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_print_argument=new RewriteRuleSubtreeStream(adaptor,"rule print_argument");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:184:5: ( print_argument ( options {k=2; } : COMMA print_argument )* ( COMMA )? -> ^( PRINT_ARGS ( print_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:184:7: print_argument ( options {k=2; } : COMMA print_argument )* ( COMMA )?
            {
            pushFollow(FOLLOW_print_argument_in_printlist1340);
            print_argument81=print_argument();

            state._fsp--;

            stream_print_argument.add(print_argument81.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:184:22: ( options {k=2; } : COMMA print_argument )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMA) ) {
                    int LA24_1 = input.LA(2);

                    if ( (LA24_1==BACKQUOTE||LA24_1==DOTTED_NAME||LA24_1==FLOAT||LA24_1==INT||(LA24_1 >= LBRACK && LA24_1 <= LCURLY)||LA24_1==LONGINT||(LA24_1 >= LPAREN && LA24_1 <= MINUS)||LA24_1==NAME||LA24_1==NOT||LA24_1==PLUS||LA24_1==STRING||LA24_1==TILDE) ) {
                        alt24=1;
                    }


                }


                switch (alt24) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:184:39: COMMA print_argument
            	    {
            	    COMMA82=(Token)match(input,COMMA,FOLLOW_COMMA_in_printlist1351);  
            	    stream_COMMA.add(COMMA82);


            	    pushFollow(FOLLOW_print_argument_in_printlist1353);
            	    print_argument83=print_argument();

            	    state._fsp--;

            	    stream_print_argument.add(print_argument83.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:184:62: ( COMMA )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==COMMA) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:184:63: COMMA
                    {
                    COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_printlist1358);  
                    stream_COMMA.add(COMMA84);


                    }
                    break;

            }


            // AST REWRITE
            // elements: print_argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 184:71: -> ^( PRINT_ARGS ( print_argument )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:184:74: ^( PRINT_ARGS ( print_argument )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRINT_ARGS, "PRINT_ARGS")
                , root_1);

                if ( !(stream_print_argument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_print_argument.hasNext() ) {
                    adaptor.addChild(root_1, stream_print_argument.nextTree());

                }
                stream_print_argument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "printlist"


    public static class del_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "del_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:188:1: del_stmt : 'del' exprlist ;
    public final PythonProvenanceParser.del_stmt_return del_stmt() throws RecognitionException {
        PythonProvenanceParser.del_stmt_return retval = new PythonProvenanceParser.del_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal85=null;
        PythonProvenanceParser.exprlist_return exprlist86 =null;


        Object string_literal85_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:188:10: ( 'del' exprlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:188:12: 'del' exprlist
            {
            root_0 = (Object)adaptor.nil();


            string_literal85=(Token)match(input,131,FOLLOW_131_in_del_stmt1383); 
            string_literal85_tree = 
            (Object)adaptor.create(string_literal85)
            ;
            adaptor.addChild(root_0, string_literal85_tree);


            pushFollow(FOLLOW_exprlist_in_del_stmt1385);
            exprlist86=exprlist();

            state._fsp--;

            adaptor.addChild(root_0, exprlist86.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "del_stmt"


    public static class pass_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pass_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:191:1: pass_stmt : 'pass' ;
    public final PythonProvenanceParser.pass_stmt_return pass_stmt() throws RecognitionException {
        PythonProvenanceParser.pass_stmt_return retval = new PythonProvenanceParser.pass_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal87=null;

        Object string_literal87_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:191:11: ( 'pass' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:191:13: 'pass'
            {
            root_0 = (Object)adaptor.nil();


            string_literal87=(Token)match(input,141,FOLLOW_141_in_pass_stmt1403); 
            string_literal87_tree = 
            (Object)adaptor.create(string_literal87)
            ;
            adaptor.addChild(root_0, string_literal87_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pass_stmt"


    public static class flow_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flow_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:194:1: flow_stmt : ( break_stmt ->| continue_stmt ->| return_stmt | raise_stmt ->);
    public final PythonProvenanceParser.flow_stmt_return flow_stmt() throws RecognitionException {
        PythonProvenanceParser.flow_stmt_return retval = new PythonProvenanceParser.flow_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.break_stmt_return break_stmt88 =null;

        PythonProvenanceParser.continue_stmt_return continue_stmt89 =null;

        PythonProvenanceParser.return_stmt_return return_stmt90 =null;

        PythonProvenanceParser.raise_stmt_return raise_stmt91 =null;


        RewriteRuleSubtreeStream stream_raise_stmt=new RewriteRuleSubtreeStream(adaptor,"rule raise_stmt");
        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        RewriteRuleSubtreeStream stream_continue_stmt=new RewriteRuleSubtreeStream(adaptor,"rule continue_stmt");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:194:11: ( break_stmt ->| continue_stmt ->| return_stmt | raise_stmt ->)
            int alt26=4;
            switch ( input.LA(1) ) {
            case 127:
                {
                alt26=1;
                }
                break;
            case 129:
                {
                alt26=2;
                }
                break;
            case 143:
                {
                alt26=3;
                }
                break;
            case 142:
                {
                alt26=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }

            switch (alt26) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:194:13: break_stmt
                    {
                    pushFollow(FOLLOW_break_stmt_in_flow_stmt1422);
                    break_stmt88=break_stmt();

                    state._fsp--;

                    stream_break_stmt.add(break_stmt88.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 194:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:195:13: continue_stmt
                    {
                    pushFollow(FOLLOW_continue_stmt_in_flow_stmt1438);
                    continue_stmt89=continue_stmt();

                    state._fsp--;

                    stream_continue_stmt.add(continue_stmt89.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 195:27: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:196:13: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_flow_stmt1454);
                    return_stmt90=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt90.getTree());

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:197:13: raise_stmt
                    {
                    pushFollow(FOLLOW_raise_stmt_in_flow_stmt1468);
                    raise_stmt91=raise_stmt();

                    state._fsp--;

                    stream_raise_stmt.add(raise_stmt91.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 197:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flow_stmt"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:200:1: break_stmt : 'break' ;
    public final PythonProvenanceParser.break_stmt_return break_stmt() throws RecognitionException {
        PythonProvenanceParser.break_stmt_return retval = new PythonProvenanceParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal92=null;

        Object string_literal92_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:200:12: ( 'break' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:200:14: 'break'
            {
            root_0 = (Object)adaptor.nil();


            string_literal92=(Token)match(input,127,FOLLOW_127_in_break_stmt1489); 
            string_literal92_tree = 
            (Object)adaptor.create(string_literal92)
            ;
            adaptor.addChild(root_0, string_literal92_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:203:1: continue_stmt : 'continue' ;
    public final PythonProvenanceParser.continue_stmt_return continue_stmt() throws RecognitionException {
        PythonProvenanceParser.continue_stmt_return retval = new PythonProvenanceParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal93=null;

        Object string_literal93_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:203:15: ( 'continue' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:203:17: 'continue'
            {
            root_0 = (Object)adaptor.nil();


            string_literal93=(Token)match(input,129,FOLLOW_129_in_continue_stmt1509); 
            string_literal93_tree = 
            (Object)adaptor.create(string_literal93)
            ;
            adaptor.addChild(root_0, string_literal93_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:206:1: return_stmt : ref= 'return' ( arglist )? -> ^( RETURN_CMD[$ref] ( arglist )? ) ;
    public final PythonProvenanceParser.return_stmt_return return_stmt() throws RecognitionException {
        PythonProvenanceParser.return_stmt_return retval = new PythonProvenanceParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        PythonProvenanceParser.arglist_return arglist94 =null;


        Object ref_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleSubtreeStream stream_arglist=new RewriteRuleSubtreeStream(adaptor,"rule arglist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:206:13: (ref= 'return' ( arglist )? -> ^( RETURN_CMD[$ref] ( arglist )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:206:15: ref= 'return' ( arglist )?
            {
            ref=(Token)match(input,143,FOLLOW_143_in_return_stmt1534);  
            stream_143.add(ref);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:206:28: ( arglist )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BACKQUOTE||LA27_0==DOTTED_NAME||LA27_0==DOUBLESTAR||LA27_0==FLOAT||LA27_0==INT||(LA27_0 >= LBRACK && LA27_0 <= LCURLY)||LA27_0==LONGINT||(LA27_0 >= LPAREN && LA27_0 <= MINUS)||LA27_0==NAME||LA27_0==NOT||LA27_0==PLUS||LA27_0==STAR||LA27_0==STRING||LA27_0==TILDE) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:206:29: arglist
                    {
                    pushFollow(FOLLOW_arglist_in_return_stmt1537);
                    arglist94=arglist();

                    state._fsp--;

                    stream_arglist.add(arglist94.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: arglist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:39: -> ^( RETURN_CMD[$ref] ( arglist )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:206:42: ^( RETURN_CMD[$ref] ( arglist )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_CMD, ref)
                , root_1);

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:206:61: ( arglist )?
                if ( stream_arglist.hasNext() ) {
                    adaptor.addChild(root_1, stream_arglist.nextTree());

                }
                stream_arglist.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class raise_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "raise_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:1: raise_stmt : 'raise' ( test ( COMMA test ( COMMA test )? )? )? ;
    public final PythonProvenanceParser.raise_stmt_return raise_stmt() throws RecognitionException {
        PythonProvenanceParser.raise_stmt_return retval = new PythonProvenanceParser.raise_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal95=null;
        Token COMMA97=null;
        Token COMMA99=null;
        PythonProvenanceParser.test_return test96 =null;

        PythonProvenanceParser.test_return test98 =null;

        PythonProvenanceParser.test_return test100 =null;


        Object string_literal95_tree=null;
        Object COMMA97_tree=null;
        Object COMMA99_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:11: ( 'raise' ( test ( COMMA test ( COMMA test )? )? )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:13: 'raise' ( test ( COMMA test ( COMMA test )? )? )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal95=(Token)match(input,142,FOLLOW_142_in_raise_stmt1569); 
            string_literal95_tree = 
            (Object)adaptor.create(string_literal95)
            ;
            adaptor.addChild(root_0, string_literal95_tree);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:21: ( test ( COMMA test ( COMMA test )? )? )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==BACKQUOTE||LA30_0==DOTTED_NAME||LA30_0==FLOAT||LA30_0==INT||(LA30_0 >= LBRACK && LA30_0 <= LCURLY)||LA30_0==LONGINT||(LA30_0 >= LPAREN && LA30_0 <= MINUS)||LA30_0==NAME||LA30_0==NOT||LA30_0==PLUS||LA30_0==STRING||LA30_0==TILDE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:22: test ( COMMA test ( COMMA test )? )?
                    {
                    pushFollow(FOLLOW_test_in_raise_stmt1572);
                    test96=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test96.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:27: ( COMMA test ( COMMA test )? )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==COMMA) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:28: COMMA test ( COMMA test )?
                            {
                            COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_raise_stmt1575); 
                            COMMA97_tree = 
                            (Object)adaptor.create(COMMA97)
                            ;
                            adaptor.addChild(root_0, COMMA97_tree);


                            pushFollow(FOLLOW_test_in_raise_stmt1577);
                            test98=test();

                            state._fsp--;

                            adaptor.addChild(root_0, test98.getTree());

                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:39: ( COMMA test )?
                            int alt28=2;
                            int LA28_0 = input.LA(1);

                            if ( (LA28_0==COMMA) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:209:40: COMMA test
                                    {
                                    COMMA99=(Token)match(input,COMMA,FOLLOW_COMMA_in_raise_stmt1580); 
                                    COMMA99_tree = 
                                    (Object)adaptor.create(COMMA99)
                                    ;
                                    adaptor.addChild(root_0, COMMA99_tree);


                                    pushFollow(FOLLOW_test_in_raise_stmt1582);
                                    test100=test();

                                    state._fsp--;

                                    adaptor.addChild(root_0, test100.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "raise_stmt"


    public static class import_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:212:1: import_stmt : ( import_name | import_from );
    public final PythonProvenanceParser.import_stmt_return import_stmt() throws RecognitionException {
        PythonProvenanceParser.import_stmt_return retval = new PythonProvenanceParser.import_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.import_name_return import_name101 =null;

        PythonProvenanceParser.import_from_return import_from102 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:212:13: ( import_name | import_from )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==140) ) {
                alt31=1;
            }
            else if ( (LA31_0==138) ) {
                alt31=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:212:15: import_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_name_in_import_stmt1607);
                    import_name101=import_name();

                    state._fsp--;

                    adaptor.addChild(root_0, import_name101.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:213:15: import_from
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_from_in_import_stmt1623);
                    import_from102=import_from();

                    state._fsp--;

                    adaptor.addChild(root_0, import_from102.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_stmt"


    public static class import_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:216:1: import_name : ref= 'import' dotted_as_names -> ^( IMPORT_CMD[$ref] dotted_as_names ) ;
    public final PythonProvenanceParser.import_name_return import_name() throws RecognitionException {
        PythonProvenanceParser.import_name_return retval = new PythonProvenanceParser.import_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        PythonProvenanceParser.dotted_as_names_return dotted_as_names103 =null;


        Object ref_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_dotted_as_names=new RewriteRuleSubtreeStream(adaptor,"rule dotted_as_names");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:216:13: (ref= 'import' dotted_as_names -> ^( IMPORT_CMD[$ref] dotted_as_names ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:216:15: ref= 'import' dotted_as_names
            {
            ref=(Token)match(input,140,FOLLOW_140_in_import_name1646);  
            stream_140.add(ref);


            pushFollow(FOLLOW_dotted_as_names_in_import_name1648);
            dotted_as_names103=dotted_as_names();

            state._fsp--;

            stream_dotted_as_names.add(dotted_as_names103.getTree());

            // AST REWRITE
            // elements: dotted_as_names
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 216:44: -> ^( IMPORT_CMD[$ref] dotted_as_names )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:216:47: ^( IMPORT_CMD[$ref] dotted_as_names )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPORT_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_dotted_as_names.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_name"


    public static class import_from_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_from"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:219:1: import_from : ( import_from_name | import_from_dotted_name );
    public final PythonProvenanceParser.import_from_return import_from() throws RecognitionException {
        PythonProvenanceParser.import_from_return retval = new PythonProvenanceParser.import_from_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.import_from_name_return import_from_name104 =null;

        PythonProvenanceParser.import_from_dotted_name_return import_from_dotted_name105 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:220:2: ( import_from_name | import_from_dotted_name )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==138) ) {
                int LA32_1 = input.LA(2);

                if ( (LA32_1==NAME) ) {
                    alt32=1;
                }
                else if ( (LA32_1==DOTTED_NAME) ) {
                    alt32=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 32, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:220:4: import_from_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_from_name_in_import_from1680);
                    import_from_name104=import_from_name();

                    state._fsp--;

                    adaptor.addChild(root_0, import_from_name104.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:221:4: import_from_dotted_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_from_dotted_name_in_import_from1686);
                    import_from_dotted_name105=import_from_dotted_name();

                    state._fsp--;

                    adaptor.addChild(root_0, import_from_dotted_name105.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_from"


    public static class import_from_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_from_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:224:1: import_from_name : ref= 'from' id1= NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] $id1 STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) ) ;
    public final PythonProvenanceParser.import_from_name_return import_from_name() throws RecognitionException {
        PythonProvenanceParser.import_from_name_return retval = new PythonProvenanceParser.import_from_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token id1=null;
        Token string_literal106=null;
        Token STAR107=null;
        Token LPAREN109=null;
        Token RPAREN111=null;
        PythonProvenanceParser.import_as_names_return import_as_names108 =null;

        PythonProvenanceParser.import_as_names_return import_as_names110 =null;


        Object ref_tree=null;
        Object id1_tree=null;
        Object string_literal106_tree=null;
        Object STAR107_tree=null;
        Object LPAREN109_tree=null;
        Object RPAREN111_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_import_as_names=new RewriteRuleSubtreeStream(adaptor,"rule import_as_names");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:224:17: (ref= 'from' id1= NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] $id1 STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:224:19: ref= 'from' id1= NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] $id1 STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) )
            {
            ref=(Token)match(input,138,FOLLOW_138_in_import_from_name1697);  
            stream_138.add(ref);


            id1=(Token)match(input,NAME,FOLLOW_NAME_in_import_from_name1701);  
            stream_NAME.add(id1);


            string_literal106=(Token)match(input,140,FOLLOW_140_in_import_from_name1703);  
            stream_140.add(string_literal106);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:225:15: ( STAR -> ^( IMPORT_CMD[$ref] $id1 STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) )
            int alt33=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt33=1;
                }
                break;
            case DOTTED_NAME:
            case NAME:
                {
                alt33=2;
                }
                break;
            case LPAREN:
                {
                alt33=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }

            switch (alt33) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:225:16: STAR
                    {
                    STAR107=(Token)match(input,STAR,FOLLOW_STAR_in_import_from_name1720);  
                    stream_STAR.add(STAR107);


                    // AST REWRITE
                    // elements: id1, STAR
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 225:21: -> ^( IMPORT_CMD[$ref] $id1 STAR )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:225:24: ^( IMPORT_CMD[$ref] $id1 STAR )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_1, 
                        stream_STAR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:226:17: import_as_names
                    {
                    pushFollow(FOLLOW_import_as_names_in_import_from_name1750);
                    import_as_names108=import_as_names();

                    state._fsp--;

                    stream_import_as_names.add(import_as_names108.getTree());

                    // AST REWRITE
                    // elements: import_as_names, id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 226:33: -> ^( IMPORT_CMD[$ref] $id1 import_as_names )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:226:36: ^( IMPORT_CMD[$ref] $id1 import_as_names )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_1, stream_import_as_names.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:227:17: LPAREN import_as_names RPAREN
                    {
                    LPAREN109=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_import_from_name1780);  
                    stream_LPAREN.add(LPAREN109);


                    pushFollow(FOLLOW_import_as_names_in_import_from_name1782);
                    import_as_names110=import_as_names();

                    state._fsp--;

                    stream_import_as_names.add(import_as_names110.getTree());

                    RPAREN111=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_import_from_name1784);  
                    stream_RPAREN.add(RPAREN111);


                    // AST REWRITE
                    // elements: import_as_names, id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 227:47: -> ^( IMPORT_CMD[$ref] $id1 import_as_names )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:227:50: ^( IMPORT_CMD[$ref] $id1 import_as_names )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_1, stream_import_as_names.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_from_name"


    public static class import_from_dotted_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_from_dotted_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:231:1: import_from_dotted_name : ref= 'from' id1= DOTTED_NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] $id1 STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) ) ;
    public final PythonProvenanceParser.import_from_dotted_name_return import_from_dotted_name() throws RecognitionException {
        PythonProvenanceParser.import_from_dotted_name_return retval = new PythonProvenanceParser.import_from_dotted_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token id1=null;
        Token string_literal112=null;
        Token STAR113=null;
        Token LPAREN115=null;
        Token RPAREN117=null;
        PythonProvenanceParser.import_as_names_return import_as_names114 =null;

        PythonProvenanceParser.import_as_names_return import_as_names116 =null;


        Object ref_tree=null;
        Object id1_tree=null;
        Object string_literal112_tree=null;
        Object STAR113_tree=null;
        Object LPAREN115_tree=null;
        Object RPAREN117_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_DOTTED_NAME=new RewriteRuleTokenStream(adaptor,"token DOTTED_NAME");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_import_as_names=new RewriteRuleSubtreeStream(adaptor,"rule import_as_names");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:231:24: (ref= 'from' id1= DOTTED_NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] $id1 STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:231:26: ref= 'from' id1= DOTTED_NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] $id1 STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) )
            {
            ref=(Token)match(input,138,FOLLOW_138_in_import_from_dotted_name1844);  
            stream_138.add(ref);


            id1=(Token)match(input,DOTTED_NAME,FOLLOW_DOTTED_NAME_in_import_from_dotted_name1848);  
            stream_DOTTED_NAME.add(id1);


            string_literal112=(Token)match(input,140,FOLLOW_140_in_import_from_dotted_name1850);  
            stream_140.add(string_literal112);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:232:15: ( STAR -> ^( IMPORT_CMD[$ref] $id1 STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] $id1 import_as_names ) )
            int alt34=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt34=1;
                }
                break;
            case DOTTED_NAME:
            case NAME:
                {
                alt34=2;
                }
                break;
            case LPAREN:
                {
                alt34=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }

            switch (alt34) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:232:16: STAR
                    {
                    STAR113=(Token)match(input,STAR,FOLLOW_STAR_in_import_from_dotted_name1867);  
                    stream_STAR.add(STAR113);


                    // AST REWRITE
                    // elements: id1, STAR
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 232:21: -> ^( IMPORT_CMD[$ref] $id1 STAR )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:232:24: ^( IMPORT_CMD[$ref] $id1 STAR )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_1, 
                        stream_STAR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:233:17: import_as_names
                    {
                    pushFollow(FOLLOW_import_as_names_in_import_from_dotted_name1897);
                    import_as_names114=import_as_names();

                    state._fsp--;

                    stream_import_as_names.add(import_as_names114.getTree());

                    // AST REWRITE
                    // elements: id1, import_as_names
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 233:33: -> ^( IMPORT_CMD[$ref] $id1 import_as_names )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:233:36: ^( IMPORT_CMD[$ref] $id1 import_as_names )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_1, stream_import_as_names.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:234:17: LPAREN import_as_names RPAREN
                    {
                    LPAREN115=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_import_from_dotted_name1927);  
                    stream_LPAREN.add(LPAREN115);


                    pushFollow(FOLLOW_import_as_names_in_import_from_dotted_name1929);
                    import_as_names116=import_as_names();

                    state._fsp--;

                    stream_import_as_names.add(import_as_names116.getTree());

                    RPAREN117=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_import_from_dotted_name1931);  
                    stream_RPAREN.add(RPAREN117);


                    // AST REWRITE
                    // elements: import_as_names, id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 234:47: -> ^( IMPORT_CMD[$ref] $id1 import_as_names )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:234:50: ^( IMPORT_CMD[$ref] $id1 import_as_names )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_1, stream_import_as_names.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_from_dotted_name"


    public static class import_as_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_as_names"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:238:1: import_as_names : import_as_name ( COMMA import_as_name )* ( COMMA )? -> ^( IMPORT_ARGS ( import_as_name )+ ) ;
    public final PythonProvenanceParser.import_as_names_return import_as_names() throws RecognitionException {
        PythonProvenanceParser.import_as_names_return retval = new PythonProvenanceParser.import_as_names_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA119=null;
        Token COMMA121=null;
        PythonProvenanceParser.import_as_name_return import_as_name118 =null;

        PythonProvenanceParser.import_as_name_return import_as_name120 =null;


        Object COMMA119_tree=null;
        Object COMMA121_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_import_as_name=new RewriteRuleSubtreeStream(adaptor,"rule import_as_name");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:238:17: ( import_as_name ( COMMA import_as_name )* ( COMMA )? -> ^( IMPORT_ARGS ( import_as_name )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:238:19: import_as_name ( COMMA import_as_name )* ( COMMA )?
            {
            pushFollow(FOLLOW_import_as_name_in_import_as_names1979);
            import_as_name118=import_as_name();

            state._fsp--;

            stream_import_as_name.add(import_as_name118.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:238:34: ( COMMA import_as_name )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==COMMA) ) {
                    int LA35_1 = input.LA(2);

                    if ( (LA35_1==DOTTED_NAME||LA35_1==NAME) ) {
                        alt35=1;
                    }


                }


                switch (alt35) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:238:35: COMMA import_as_name
            	    {
            	    COMMA119=(Token)match(input,COMMA,FOLLOW_COMMA_in_import_as_names1982);  
            	    stream_COMMA.add(COMMA119);


            	    pushFollow(FOLLOW_import_as_name_in_import_as_names1984);
            	    import_as_name120=import_as_name();

            	    state._fsp--;

            	    stream_import_as_name.add(import_as_name120.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:238:58: ( COMMA )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==COMMA) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:238:59: COMMA
                    {
                    COMMA121=(Token)match(input,COMMA,FOLLOW_COMMA_in_import_as_names1989);  
                    stream_COMMA.add(COMMA121);


                    }
                    break;

            }


            // AST REWRITE
            // elements: import_as_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 238:67: -> ^( IMPORT_ARGS ( import_as_name )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:238:70: ^( IMPORT_ARGS ( import_as_name )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPORT_ARGS, "IMPORT_ARGS")
                , root_1);

                if ( !(stream_import_as_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_import_as_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_import_as_name.nextTree());

                }
                stream_import_as_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_as_names"


    public static class import_as_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_as_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:241:1: import_as_name : (id1= NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? ) |id1= DOTTED_NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? ) );
    public final PythonProvenanceParser.import_as_name_return import_as_name() throws RecognitionException {
        PythonProvenanceParser.import_as_name_return retval = new PythonProvenanceParser.import_as_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token AS122=null;
        Token AS123=null;

        Object id1_tree=null;
        Object id2_tree=null;
        Object AS122_tree=null;
        Object AS123_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_DOTTED_NAME=new RewriteRuleTokenStream(adaptor,"token DOTTED_NAME");

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:242:2: (id1= NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? ) |id1= DOTTED_NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? ) )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==NAME) ) {
                alt39=1;
            }
            else if ( (LA39_0==DOTTED_NAME) ) {
                alt39=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:242:4: id1= NAME ( AS id2= NAME )?
                    {
                    id1=(Token)match(input,NAME,FOLLOW_NAME_in_import_as_name2028);  
                    stream_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:242:13: ( AS id2= NAME )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==AS) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:242:14: AS id2= NAME
                            {
                            AS122=(Token)match(input,AS,FOLLOW_AS_in_import_as_name2031);  
                            stream_AS.add(AS122);


                            id2=(Token)match(input,NAME,FOLLOW_NAME_in_import_as_name2035);  
                            stream_NAME.add(id2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id2, id1
                    // token labels: id2, id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 242:28: -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:242:31: ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_EQUIV, id1)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:242:58: ( $id2)?
                        if ( stream_id2.hasNext() ) {
                            adaptor.addChild(root_1, stream_id2.nextNode());

                        }
                        stream_id2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:243:4: id1= DOTTED_NAME ( AS id2= NAME )?
                    {
                    id1=(Token)match(input,DOTTED_NAME,FOLLOW_DOTTED_NAME_in_import_as_name2059);  
                    stream_DOTTED_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:243:20: ( AS id2= NAME )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==AS) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:243:21: AS id2= NAME
                            {
                            AS123=(Token)match(input,AS,FOLLOW_AS_in_import_as_name2062);  
                            stream_AS.add(AS123);


                            id2=(Token)match(input,NAME,FOLLOW_NAME_in_import_as_name2066);  
                            stream_NAME.add(id2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id1, id2
                    // token labels: id2, id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 243:35: -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:243:38: ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_EQUIV, id1)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:243:65: ( $id2)?
                        if ( stream_id2.hasNext() ) {
                            adaptor.addChild(root_1, stream_id2.nextNode());

                        }
                        stream_id2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_as_name"


    public static class dotted_as_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dotted_as_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:246:1: dotted_as_name : (id1= NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? ) |id1= DOTTED_NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? ) );
    public final PythonProvenanceParser.dotted_as_name_return dotted_as_name() throws RecognitionException {
        PythonProvenanceParser.dotted_as_name_return retval = new PythonProvenanceParser.dotted_as_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token AS124=null;
        Token AS125=null;

        Object id1_tree=null;
        Object id2_tree=null;
        Object AS124_tree=null;
        Object AS125_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_DOTTED_NAME=new RewriteRuleTokenStream(adaptor,"token DOTTED_NAME");

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:247:2: (id1= NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? ) |id1= DOTTED_NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? ) )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==NAME) ) {
                alt42=1;
            }
            else if ( (LA42_0==DOTTED_NAME) ) {
                alt42=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:247:4: id1= NAME ( AS id2= NAME )?
                    {
                    id1=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_as_name2096);  
                    stream_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:247:13: ( AS id2= NAME )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==AS) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:247:14: AS id2= NAME
                            {
                            AS124=(Token)match(input,AS,FOLLOW_AS_in_dotted_as_name2099);  
                            stream_AS.add(AS124);


                            id2=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_as_name2103);  
                            stream_NAME.add(id2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id1, id2
                    // token labels: id2, id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 247:28: -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:247:31: ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_EQUIV, id1)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:247:58: ( $id2)?
                        if ( stream_id2.hasNext() ) {
                            adaptor.addChild(root_1, stream_id2.nextNode());

                        }
                        stream_id2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:248:5: id1= DOTTED_NAME ( AS id2= NAME )?
                    {
                    id1=(Token)match(input,DOTTED_NAME,FOLLOW_DOTTED_NAME_in_dotted_as_name2128);  
                    stream_DOTTED_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:248:21: ( AS id2= NAME )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==AS) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:248:22: AS id2= NAME
                            {
                            AS125=(Token)match(input,AS,FOLLOW_AS_in_dotted_as_name2131);  
                            stream_AS.add(AS125);


                            id2=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_as_name2135);  
                            stream_NAME.add(id2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id2, id1
                    // token labels: id2, id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 248:36: -> ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:248:39: ^( IMPORT_EQUIV[$id1] $id1 ( $id2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_EQUIV, id1)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:248:66: ( $id2)?
                        if ( stream_id2.hasNext() ) {
                            adaptor.addChild(root_1, stream_id2.nextNode());

                        }
                        stream_id2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dotted_as_name"


    public static class dotted_as_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dotted_as_names"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:251:1: dotted_as_names : dotted_as_name ( COMMA dotted_as_name )* -> ^( IMPORT_ARGS ( dotted_as_name )+ ) ;
    public final PythonProvenanceParser.dotted_as_names_return dotted_as_names() throws RecognitionException {
        PythonProvenanceParser.dotted_as_names_return retval = new PythonProvenanceParser.dotted_as_names_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA127=null;
        PythonProvenanceParser.dotted_as_name_return dotted_as_name126 =null;

        PythonProvenanceParser.dotted_as_name_return dotted_as_name128 =null;


        Object COMMA127_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_dotted_as_name=new RewriteRuleSubtreeStream(adaptor,"rule dotted_as_name");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:251:17: ( dotted_as_name ( COMMA dotted_as_name )* -> ^( IMPORT_ARGS ( dotted_as_name )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:251:19: dotted_as_name ( COMMA dotted_as_name )*
            {
            pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names2163);
            dotted_as_name126=dotted_as_name();

            state._fsp--;

            stream_dotted_as_name.add(dotted_as_name126.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:251:34: ( COMMA dotted_as_name )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMA) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:251:35: COMMA dotted_as_name
            	    {
            	    COMMA127=(Token)match(input,COMMA,FOLLOW_COMMA_in_dotted_as_names2166);  
            	    stream_COMMA.add(COMMA127);


            	    pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names2168);
            	    dotted_as_name128=dotted_as_name();

            	    state._fsp--;

            	    stream_dotted_as_name.add(dotted_as_name128.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            // AST REWRITE
            // elements: dotted_as_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 251:58: -> ^( IMPORT_ARGS ( dotted_as_name )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:251:61: ^( IMPORT_ARGS ( dotted_as_name )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPORT_ARGS, "IMPORT_ARGS")
                , root_1);

                if ( !(stream_dotted_as_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dotted_as_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_dotted_as_name.nextTree());

                }
                stream_dotted_as_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dotted_as_names"


    public static class global_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "global_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:254:1: global_stmt : 'global' NAME ( COMMA NAME )* ;
    public final PythonProvenanceParser.global_stmt_return global_stmt() throws RecognitionException {
        PythonProvenanceParser.global_stmt_return retval = new PythonProvenanceParser.global_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal129=null;
        Token NAME130=null;
        Token COMMA131=null;
        Token NAME132=null;

        Object string_literal129_tree=null;
        Object NAME130_tree=null;
        Object COMMA131_tree=null;
        Object NAME132_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:254:13: ( 'global' NAME ( COMMA NAME )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:254:15: 'global' NAME ( COMMA NAME )*
            {
            root_0 = (Object)adaptor.nil();


            string_literal129=(Token)match(input,139,FOLLOW_139_in_global_stmt2204); 
            string_literal129_tree = 
            (Object)adaptor.create(string_literal129)
            ;
            adaptor.addChild(root_0, string_literal129_tree);


            NAME130=(Token)match(input,NAME,FOLLOW_NAME_in_global_stmt2206); 
            NAME130_tree = 
            (Object)adaptor.create(NAME130)
            ;
            adaptor.addChild(root_0, NAME130_tree);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:254:29: ( COMMA NAME )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:254:30: COMMA NAME
            	    {
            	    COMMA131=(Token)match(input,COMMA,FOLLOW_COMMA_in_global_stmt2209); 
            	    COMMA131_tree = 
            	    (Object)adaptor.create(COMMA131)
            	    ;
            	    adaptor.addChild(root_0, COMMA131_tree);


            	    NAME132=(Token)match(input,NAME,FOLLOW_NAME_in_global_stmt2211); 
            	    NAME132_tree = 
            	    (Object)adaptor.create(NAME132)
            	    ;
            	    adaptor.addChild(root_0, NAME132_tree);


            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_stmt"


    public static class exec_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exec_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:257:1: exec_stmt : 'exec' expr ( 'in' test ( COMMA test )? )? ;
    public final PythonProvenanceParser.exec_stmt_return exec_stmt() throws RecognitionException {
        PythonProvenanceParser.exec_stmt_return retval = new PythonProvenanceParser.exec_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal133=null;
        Token string_literal135=null;
        Token COMMA137=null;
        PythonProvenanceParser.expr_return expr134 =null;

        PythonProvenanceParser.test_return test136 =null;

        PythonProvenanceParser.test_return test138 =null;


        Object string_literal133_tree=null;
        Object string_literal135_tree=null;
        Object COMMA137_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:257:11: ( 'exec' expr ( 'in' test ( COMMA test )? )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:257:13: 'exec' expr ( 'in' test ( COMMA test )? )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal133=(Token)match(input,135,FOLLOW_135_in_exec_stmt2234); 
            string_literal133_tree = 
            (Object)adaptor.create(string_literal133)
            ;
            adaptor.addChild(root_0, string_literal133_tree);


            pushFollow(FOLLOW_expr_in_exec_stmt2236);
            expr134=expr();

            state._fsp--;

            adaptor.addChild(root_0, expr134.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:257:25: ( 'in' test ( COMMA test )? )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==IN) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:257:26: 'in' test ( COMMA test )?
                    {
                    string_literal135=(Token)match(input,IN,FOLLOW_IN_in_exec_stmt2239); 
                    string_literal135_tree = 
                    (Object)adaptor.create(string_literal135)
                    ;
                    adaptor.addChild(root_0, string_literal135_tree);


                    pushFollow(FOLLOW_test_in_exec_stmt2241);
                    test136=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test136.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:257:36: ( COMMA test )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==COMMA) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:257:37: COMMA test
                            {
                            COMMA137=(Token)match(input,COMMA,FOLLOW_COMMA_in_exec_stmt2244); 
                            COMMA137_tree = 
                            (Object)adaptor.create(COMMA137)
                            ;
                            adaptor.addChild(root_0, COMMA137_tree);


                            pushFollow(FOLLOW_test_in_exec_stmt2246);
                            test138=test();

                            state._fsp--;

                            adaptor.addChild(root_0, test138.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exec_stmt"


    public static class assert_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assert_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:260:1: assert_stmt : 'assert' test ( COMMA test )? ;
    public final PythonProvenanceParser.assert_stmt_return assert_stmt() throws RecognitionException {
        PythonProvenanceParser.assert_stmt_return retval = new PythonProvenanceParser.assert_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal139=null;
        Token COMMA141=null;
        PythonProvenanceParser.test_return test140 =null;

        PythonProvenanceParser.test_return test142 =null;


        Object string_literal139_tree=null;
        Object COMMA141_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:260:13: ( 'assert' test ( COMMA test )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:260:15: 'assert' test ( COMMA test )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal139=(Token)match(input,126,FOLLOW_126_in_assert_stmt2269); 
            string_literal139_tree = 
            (Object)adaptor.create(string_literal139)
            ;
            adaptor.addChild(root_0, string_literal139_tree);


            pushFollow(FOLLOW_test_in_assert_stmt2271);
            test140=test();

            state._fsp--;

            adaptor.addChild(root_0, test140.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:260:29: ( COMMA test )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==COMMA) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:260:30: COMMA test
                    {
                    COMMA141=(Token)match(input,COMMA,FOLLOW_COMMA_in_assert_stmt2274); 
                    COMMA141_tree = 
                    (Object)adaptor.create(COMMA141)
                    ;
                    adaptor.addChild(root_0, COMMA141_tree);


                    pushFollow(FOLLOW_test_in_assert_stmt2276);
                    test142=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test142.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assert_stmt"


    public static class compound_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compound_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:263:1: compound_stmt : ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef );
    public final PythonProvenanceParser.compound_stmt_return compound_stmt() throws RecognitionException {
        PythonProvenanceParser.compound_stmt_return retval = new PythonProvenanceParser.compound_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.if_stmt_return if_stmt143 =null;

        PythonProvenanceParser.while_stmt_return while_stmt144 =null;

        PythonProvenanceParser.for_stmt_return for_stmt145 =null;

        PythonProvenanceParser.try_stmt_return try_stmt146 =null;

        PythonProvenanceParser.with_stmt_return with_stmt147 =null;

        PythonProvenanceParser.funcdef_return funcdef148 =null;

        PythonProvenanceParser.classdef_return classdef149 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:263:15: ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef )
            int alt48=7;
            switch ( input.LA(1) ) {
            case IF:
                {
                alt48=1;
                }
                break;
            case 145:
                {
                alt48=2;
                }
                break;
            case 137:
                {
                alt48=3;
                }
                break;
            case 144:
                {
                alt48=4;
                }
                break;
            case 146:
                {
                alt48=5;
                }
                break;
            case AT:
            case 130:
                {
                alt48=6;
                }
                break;
            case 128:
                {
                alt48=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }

            switch (alt48) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:263:17: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_compound_stmt2299);
                    if_stmt143=if_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt143.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:264:17: while_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_in_compound_stmt2317);
                    while_stmt144=while_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt144.getTree());

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:265:17: for_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_in_compound_stmt2335);
                    for_stmt145=for_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt145.getTree());

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:266:17: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_compound_stmt2353);
                    try_stmt146=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt146.getTree());

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:267:17: with_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_with_stmt_in_compound_stmt2371);
                    with_stmt147=with_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, with_stmt147.getTree());

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:268:17: funcdef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_funcdef_in_compound_stmt2389);
                    funcdef148=funcdef();

                    state._fsp--;

                    adaptor.addChild(root_0, funcdef148.getTree());

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:269:17: classdef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classdef_in_compound_stmt2407);
                    classdef149=classdef();

                    state._fsp--;

                    adaptor.addChild(root_0, classdef149.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compound_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:1: if_stmt : if_clause ( elif_clauses )? ( else_clause )? -> ^( IFBLOCK if_clause ( elif_clauses )? ( else_clause )? ) ;
    public final PythonProvenanceParser.if_stmt_return if_stmt() throws RecognitionException {
        PythonProvenanceParser.if_stmt_return retval = new PythonProvenanceParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.if_clause_return if_clause150 =null;

        PythonProvenanceParser.elif_clauses_return elif_clauses151 =null;

        PythonProvenanceParser.else_clause_return else_clause152 =null;


        RewriteRuleSubtreeStream stream_else_clause=new RewriteRuleSubtreeStream(adaptor,"rule else_clause");
        RewriteRuleSubtreeStream stream_elif_clauses=new RewriteRuleSubtreeStream(adaptor,"rule elif_clauses");
        RewriteRuleSubtreeStream stream_if_clause=new RewriteRuleSubtreeStream(adaptor,"rule if_clause");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:9: ( if_clause ( elif_clauses )? ( else_clause )? -> ^( IFBLOCK if_clause ( elif_clauses )? ( else_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:11: if_clause ( elif_clauses )? ( else_clause )?
            {
            pushFollow(FOLLOW_if_clause_in_if_stmt2430);
            if_clause150=if_clause();

            state._fsp--;

            stream_if_clause.add(if_clause150.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:21: ( elif_clauses )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==132) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:22: elif_clauses
                    {
                    pushFollow(FOLLOW_elif_clauses_in_if_stmt2433);
                    elif_clauses151=elif_clauses();

                    state._fsp--;

                    stream_elif_clauses.add(elif_clauses151.getTree());

                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:37: ( else_clause )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==133) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:38: else_clause
                    {
                    pushFollow(FOLLOW_else_clause_in_if_stmt2438);
                    else_clause152=else_clause();

                    state._fsp--;

                    stream_else_clause.add(else_clause152.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: elif_clauses, if_clause, else_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 272:52: -> ^( IFBLOCK if_clause ( elif_clauses )? ( else_clause )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:55: ^( IFBLOCK if_clause ( elif_clauses )? ( else_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IFBLOCK, "IFBLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_clause.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:75: ( elif_clauses )?
                if ( stream_elif_clauses.hasNext() ) {
                    adaptor.addChild(root_1, stream_elif_clauses.nextTree());

                }
                stream_elif_clauses.reset();

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:272:89: ( else_clause )?
                if ( stream_else_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_else_clause.nextTree());

                }
                stream_else_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:276:1: if_clause : ref= IF test COLON suite -> ^( IF_CMD[$ref] test suite ) ;
    public final PythonProvenanceParser.if_clause_return if_clause() throws RecognitionException {
        PythonProvenanceParser.if_clause_return retval = new PythonProvenanceParser.if_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON154=null;
        PythonProvenanceParser.test_return test153 =null;

        PythonProvenanceParser.suite_return suite155 =null;


        Object ref_tree=null;
        Object COLON154_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:276:10: (ref= IF test COLON suite -> ^( IF_CMD[$ref] test suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:276:12: ref= IF test COLON suite
            {
            ref=(Token)match(input,IF,FOLLOW_IF_in_if_clause2468);  
            stream_IF.add(ref);


            pushFollow(FOLLOW_test_in_if_clause2470);
            test153=test();

            state._fsp--;

            stream_test.add(test153.getTree());

            COLON154=(Token)match(input,COLON,FOLLOW_COLON_in_if_clause2472);  
            stream_COLON.add(COLON154);


            pushFollow(FOLLOW_suite_in_if_clause2474);
            suite155=suite();

            state._fsp--;

            stream_suite.add(suite155.getTree());

            // AST REWRITE
            // elements: test, suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:36: -> ^( IF_CMD[$ref] test suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:276:39: ^( IF_CMD[$ref] test suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_test.nextTree());

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_clause"


    public static class elif_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "elif_clauses"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:279:1: elif_clauses : ( elif_clause )+ -> ^( ELIF_CLAUSES ( elif_clause )+ ) ;
    public final PythonProvenanceParser.elif_clauses_return elif_clauses() throws RecognitionException {
        PythonProvenanceParser.elif_clauses_return retval = new PythonProvenanceParser.elif_clauses_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.elif_clause_return elif_clause156 =null;


        RewriteRuleSubtreeStream stream_elif_clause=new RewriteRuleSubtreeStream(adaptor,"rule elif_clause");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:280:2: ( ( elif_clause )+ -> ^( ELIF_CLAUSES ( elif_clause )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:280:4: ( elif_clause )+
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:280:4: ( elif_clause )+
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==132) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:280:5: elif_clause
            	    {
            	    pushFollow(FOLLOW_elif_clause_in_elif_clauses2498);
            	    elif_clause156=elif_clause();

            	    state._fsp--;

            	    stream_elif_clause.add(elif_clause156.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt51 >= 1 ) break loop51;
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);


            // AST REWRITE
            // elements: elif_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 280:19: -> ^( ELIF_CLAUSES ( elif_clause )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:280:22: ^( ELIF_CLAUSES ( elif_clause )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELIF_CLAUSES, "ELIF_CLAUSES")
                , root_1);

                if ( !(stream_elif_clause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_elif_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_elif_clause.nextTree());

                }
                stream_elif_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "elif_clauses"


    public static class elif_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "elif_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:283:1: elif_clause : ref= 'elif' test COLON suite -> ^( ELIF_CMD[$ref] test suite ) ;
    public final PythonProvenanceParser.elif_clause_return elif_clause() throws RecognitionException {
        PythonProvenanceParser.elif_clause_return retval = new PythonProvenanceParser.elif_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON158=null;
        PythonProvenanceParser.test_return test157 =null;

        PythonProvenanceParser.suite_return suite159 =null;


        Object ref_tree=null;
        Object COLON158_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:284:2: (ref= 'elif' test COLON suite -> ^( ELIF_CMD[$ref] test suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:284:4: ref= 'elif' test COLON suite
            {
            ref=(Token)match(input,132,FOLLOW_132_in_elif_clause2523);  
            stream_132.add(ref);


            pushFollow(FOLLOW_test_in_elif_clause2525);
            test157=test();

            state._fsp--;

            stream_test.add(test157.getTree());

            COLON158=(Token)match(input,COLON,FOLLOW_COLON_in_elif_clause2527);  
            stream_COLON.add(COLON158);


            pushFollow(FOLLOW_suite_in_elif_clause2529);
            suite159=suite();

            state._fsp--;

            stream_suite.add(suite159.getTree());

            // AST REWRITE
            // elements: suite, test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 284:32: -> ^( ELIF_CMD[$ref] test suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:284:35: ^( ELIF_CMD[$ref] test suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELIF_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_test.nextTree());

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "elif_clause"


    public static class else_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:287:1: else_clause : ref= 'else' COLON suite -> ^( ELSE_CMD[$ref] suite ) ;
    public final PythonProvenanceParser.else_clause_return else_clause() throws RecognitionException {
        PythonProvenanceParser.else_clause_return retval = new PythonProvenanceParser.else_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON160=null;
        PythonProvenanceParser.suite_return suite161 =null;


        Object ref_tree=null;
        Object COLON160_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:288:2: (ref= 'else' COLON suite -> ^( ELSE_CMD[$ref] suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:288:4: ref= 'else' COLON suite
            {
            ref=(Token)match(input,133,FOLLOW_133_in_else_clause2554);  
            stream_133.add(ref);


            COLON160=(Token)match(input,COLON,FOLLOW_COLON_in_else_clause2556);  
            stream_COLON.add(COLON160);


            pushFollow(FOLLOW_suite_in_else_clause2558);
            suite161=suite();

            state._fsp--;

            stream_suite.add(suite161.getTree());

            // AST REWRITE
            // elements: suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:27: -> ^( ELSE_CMD[$ref] suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:288:30: ^( ELSE_CMD[$ref] suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_clause"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:291:1: while_stmt : while_clause ( else_clause )? -> ^( WHILEBLOCK while_clause ( else_clause )? ) ;
    public final PythonProvenanceParser.while_stmt_return while_stmt() throws RecognitionException {
        PythonProvenanceParser.while_stmt_return retval = new PythonProvenanceParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.while_clause_return while_clause162 =null;

        PythonProvenanceParser.else_clause_return else_clause163 =null;


        RewriteRuleSubtreeStream stream_else_clause=new RewriteRuleSubtreeStream(adaptor,"rule else_clause");
        RewriteRuleSubtreeStream stream_while_clause=new RewriteRuleSubtreeStream(adaptor,"rule while_clause");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:291:12: ( while_clause ( else_clause )? -> ^( WHILEBLOCK while_clause ( else_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:291:14: while_clause ( else_clause )?
            {
            pushFollow(FOLLOW_while_clause_in_while_stmt2577);
            while_clause162=while_clause();

            state._fsp--;

            stream_while_clause.add(while_clause162.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:291:27: ( else_clause )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==133) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:291:28: else_clause
                    {
                    pushFollow(FOLLOW_else_clause_in_while_stmt2580);
                    else_clause163=else_clause();

                    state._fsp--;

                    stream_else_clause.add(else_clause163.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: else_clause, while_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 291:42: -> ^( WHILEBLOCK while_clause ( else_clause )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:291:45: ^( WHILEBLOCK while_clause ( else_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILEBLOCK, "WHILEBLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_while_clause.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:291:71: ( else_clause )?
                if ( stream_else_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_else_clause.nextTree());

                }
                stream_else_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:294:1: while_clause : ref= 'while' test COLON suite -> ^( WHILE_CMD[$ref] test suite ) ;
    public final PythonProvenanceParser.while_clause_return while_clause() throws RecognitionException {
        PythonProvenanceParser.while_clause_return retval = new PythonProvenanceParser.while_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON165=null;
        PythonProvenanceParser.test_return test164 =null;

        PythonProvenanceParser.suite_return suite166 =null;


        Object ref_tree=null;
        Object COLON165_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:294:13: (ref= 'while' test COLON suite -> ^( WHILE_CMD[$ref] test suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:294:15: ref= 'while' test COLON suite
            {
            ref=(Token)match(input,145,FOLLOW_145_in_while_clause2614);  
            stream_145.add(ref);


            pushFollow(FOLLOW_test_in_while_clause2616);
            test164=test();

            state._fsp--;

            stream_test.add(test164.getTree());

            COLON165=(Token)match(input,COLON,FOLLOW_COLON_in_while_clause2618);  
            stream_COLON.add(COLON165);


            pushFollow(FOLLOW_suite_in_while_clause2620);
            suite166=suite();

            state._fsp--;

            stream_suite.add(suite166.getTree());

            // AST REWRITE
            // elements: test, suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:44: -> ^( WHILE_CMD[$ref] test suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:294:47: ^( WHILE_CMD[$ref] test suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_test.nextTree());

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_clause"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:297:1: for_stmt : ref= 'for' exprlist 'in' testlist COLON suite -> ^( FORLOOP_CMD[$ref] exprlist testlist suite ) ;
    public final PythonProvenanceParser.for_stmt_return for_stmt() throws RecognitionException {
        PythonProvenanceParser.for_stmt_return retval = new PythonProvenanceParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token string_literal168=null;
        Token COLON170=null;
        PythonProvenanceParser.exprlist_return exprlist167 =null;

        PythonProvenanceParser.testlist_return testlist169 =null;

        PythonProvenanceParser.suite_return suite171 =null;


        Object ref_tree=null;
        Object string_literal168_tree=null;
        Object COLON170_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:297:10: (ref= 'for' exprlist 'in' testlist COLON suite -> ^( FORLOOP_CMD[$ref] exprlist testlist suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:297:12: ref= 'for' exprlist 'in' testlist COLON suite
            {
            ref=(Token)match(input,137,FOLLOW_137_in_for_stmt2666);  
            stream_137.add(ref);


            pushFollow(FOLLOW_exprlist_in_for_stmt2668);
            exprlist167=exprlist();

            state._fsp--;

            stream_exprlist.add(exprlist167.getTree());

            string_literal168=(Token)match(input,IN,FOLLOW_IN_in_for_stmt2670);  
            stream_IN.add(string_literal168);


            pushFollow(FOLLOW_testlist_in_for_stmt2672);
            testlist169=testlist();

            state._fsp--;

            stream_testlist.add(testlist169.getTree());

            COLON170=(Token)match(input,COLON,FOLLOW_COLON_in_for_stmt2674);  
            stream_COLON.add(COLON170);


            pushFollow(FOLLOW_suite_in_for_stmt2676);
            suite171=suite();

            state._fsp--;

            stream_suite.add(suite171.getTree());

            // AST REWRITE
            // elements: exprlist, suite, testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:58: -> ^( FORLOOP_CMD[$ref] exprlist testlist suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:297:61: ^( FORLOOP_CMD[$ref] exprlist testlist suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FORLOOP_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_exprlist.nextTree());

                adaptor.addChild(root_1, stream_testlist.nextTree());

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:300:1: try_stmt : try_clause except_clause ( finally_clause )? -> ^( TRYBLOCK try_clause except_clause ( finally_clause )? ) ;
    public final PythonProvenanceParser.try_stmt_return try_stmt() throws RecognitionException {
        PythonProvenanceParser.try_stmt_return retval = new PythonProvenanceParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.try_clause_return try_clause172 =null;

        PythonProvenanceParser.except_clause_return except_clause173 =null;

        PythonProvenanceParser.finally_clause_return finally_clause174 =null;


        RewriteRuleSubtreeStream stream_except_clause=new RewriteRuleSubtreeStream(adaptor,"rule except_clause");
        RewriteRuleSubtreeStream stream_try_clause=new RewriteRuleSubtreeStream(adaptor,"rule try_clause");
        RewriteRuleSubtreeStream stream_finally_clause=new RewriteRuleSubtreeStream(adaptor,"rule finally_clause");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:300:9: ( try_clause except_clause ( finally_clause )? -> ^( TRYBLOCK try_clause except_clause ( finally_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:300:11: try_clause except_clause ( finally_clause )?
            {
            pushFollow(FOLLOW_try_clause_in_try_stmt2707);
            try_clause172=try_clause();

            state._fsp--;

            stream_try_clause.add(try_clause172.getTree());

            pushFollow(FOLLOW_except_clause_in_try_stmt2709);
            except_clause173=except_clause();

            state._fsp--;

            stream_except_clause.add(except_clause173.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:300:36: ( finally_clause )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==136) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:300:37: finally_clause
                    {
                    pushFollow(FOLLOW_finally_clause_in_try_stmt2712);
                    finally_clause174=finally_clause();

                    state._fsp--;

                    stream_finally_clause.add(finally_clause174.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: try_clause, except_clause, finally_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 300:54: -> ^( TRYBLOCK try_clause except_clause ( finally_clause )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:300:57: ^( TRYBLOCK try_clause except_clause ( finally_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRYBLOCK, "TRYBLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_try_clause.nextTree());

                adaptor.addChild(root_1, stream_except_clause.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:300:93: ( finally_clause )?
                if ( stream_finally_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_clause.nextTree());

                }
                stream_finally_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class try_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:303:1: try_clause : ref= 'try' COLON suite -> ^( TRY_CMD[$ref] suite ) ;
    public final PythonProvenanceParser.try_clause_return try_clause() throws RecognitionException {
        PythonProvenanceParser.try_clause_return retval = new PythonProvenanceParser.try_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON175=null;
        PythonProvenanceParser.suite_return suite176 =null;


        Object ref_tree=null;
        Object COLON175_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:304:2: (ref= 'try' COLON suite -> ^( TRY_CMD[$ref] suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:304:4: ref= 'try' COLON suite
            {
            ref=(Token)match(input,144,FOLLOW_144_in_try_clause2741);  
            stream_144.add(ref);


            COLON175=(Token)match(input,COLON,FOLLOW_COLON_in_try_clause2743);  
            stream_COLON.add(COLON175);


            pushFollow(FOLLOW_suite_in_try_clause2745);
            suite176=suite();

            state._fsp--;

            stream_suite.add(suite176.getTree());

            // AST REWRITE
            // elements: suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 304:26: -> ^( TRY_CMD[$ref] suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:304:29: ^( TRY_CMD[$ref] suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_clause"


    public static class except_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "except_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:307:1: except_clause : ref= 'except' ( trailer )? COLON suite -> ^( EXCEPT_CMD[$ref] ( trailer )? suite ) ;
    public final PythonProvenanceParser.except_clause_return except_clause() throws RecognitionException {
        PythonProvenanceParser.except_clause_return retval = new PythonProvenanceParser.except_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON178=null;
        PythonProvenanceParser.trailer_return trailer177 =null;

        PythonProvenanceParser.suite_return suite179 =null;


        Object ref_tree=null;
        Object COLON178_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_trailer=new RewriteRuleSubtreeStream(adaptor,"rule trailer");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:308:2: (ref= 'except' ( trailer )? COLON suite -> ^( EXCEPT_CMD[$ref] ( trailer )? suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:308:4: ref= 'except' ( trailer )? COLON suite
            {
            ref=(Token)match(input,134,FOLLOW_134_in_except_clause2768);  
            stream_134.add(ref);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:308:17: ( trailer )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==LBRACK||LA54_0==LPAREN) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:308:17: trailer
                    {
                    pushFollow(FOLLOW_trailer_in_except_clause2770);
                    trailer177=trailer();

                    state._fsp--;

                    stream_trailer.add(trailer177.getTree());

                    }
                    break;

            }


            COLON178=(Token)match(input,COLON,FOLLOW_COLON_in_except_clause2773);  
            stream_COLON.add(COLON178);


            pushFollow(FOLLOW_suite_in_except_clause2775);
            suite179=suite();

            state._fsp--;

            stream_suite.add(suite179.getTree());

            // AST REWRITE
            // elements: trailer, suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:38: -> ^( EXCEPT_CMD[$ref] ( trailer )? suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:308:41: ^( EXCEPT_CMD[$ref] ( trailer )? suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXCEPT_CMD, ref)
                , root_1);

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:308:60: ( trailer )?
                if ( stream_trailer.hasNext() ) {
                    adaptor.addChild(root_1, stream_trailer.nextTree());

                }
                stream_trailer.reset();

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "except_clause"


    public static class finally_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:311:1: finally_clause : ref= 'finally' COLON suite -> ^( FINALLY_CMD[$ref] suite ) ;
    public final PythonProvenanceParser.finally_clause_return finally_clause() throws RecognitionException {
        PythonProvenanceParser.finally_clause_return retval = new PythonProvenanceParser.finally_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON180=null;
        PythonProvenanceParser.suite_return suite181 =null;


        Object ref_tree=null;
        Object COLON180_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:312:2: (ref= 'finally' COLON suite -> ^( FINALLY_CMD[$ref] suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:312:4: ref= 'finally' COLON suite
            {
            ref=(Token)match(input,136,FOLLOW_136_in_finally_clause2801);  
            stream_136.add(ref);


            COLON180=(Token)match(input,COLON,FOLLOW_COLON_in_finally_clause2803);  
            stream_COLON.add(COLON180);


            pushFollow(FOLLOW_suite_in_finally_clause2805);
            suite181=suite();

            state._fsp--;

            stream_suite.add(suite181.getTree());

            // AST REWRITE
            // elements: suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:30: -> ^( FINALLY_CMD[$ref] suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:312:33: ^( FINALLY_CMD[$ref] suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_clause"


    public static class with_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "with_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:315:1: with_stmt : ref= 'with' id1= with_clause COLON id2= suite -> ^( WITH_CMD[$ref] $id1 $id2) ;
    public final PythonProvenanceParser.with_stmt_return with_stmt() throws RecognitionException {
        PythonProvenanceParser.with_stmt_return retval = new PythonProvenanceParser.with_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON182=null;
        PythonProvenanceParser.with_clause_return id1 =null;

        PythonProvenanceParser.suite_return id2 =null;


        Object ref_tree=null;
        Object COLON182_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleSubtreeStream stream_with_clause=new RewriteRuleSubtreeStream(adaptor,"rule with_clause");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:315:10: (ref= 'with' id1= with_clause COLON id2= suite -> ^( WITH_CMD[$ref] $id1 $id2) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:315:12: ref= 'with' id1= with_clause COLON id2= suite
            {
            ref=(Token)match(input,146,FOLLOW_146_in_with_stmt2826);  
            stream_146.add(ref);


            pushFollow(FOLLOW_with_clause_in_with_stmt2831);
            id1=with_clause();

            state._fsp--;

            stream_with_clause.add(id1.getTree());

            COLON182=(Token)match(input,COLON,FOLLOW_COLON_in_with_stmt2833);  
            stream_COLON.add(COLON182);


            pushFollow(FOLLOW_suite_in_with_stmt2837);
            id2=suite();

            state._fsp--;

            stream_suite.add(id2.getTree());

            // AST REWRITE
            // elements: id1, id2
            // token labels: 
            // rule labels: retval, id2, id1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_id2=new RewriteRuleSubtreeStream(adaptor,"rule id2",id2!=null?id2.tree:null);
            RewriteRuleSubtreeStream stream_id1=new RewriteRuleSubtreeStream(adaptor,"rule id1",id1!=null?id1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:56: -> ^( WITH_CMD[$ref] $id1 $id2)
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:315:59: ^( WITH_CMD[$ref] $id1 $id2)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WITH_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_id1.nextTree());

                adaptor.addChild(root_1, stream_id2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "with_stmt"


    public static class with_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "with_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:318:1: with_clause : with_item ( COMMA with_item )* -> ^( WITH_ARGS ( with_item )+ ) ;
    public final PythonProvenanceParser.with_clause_return with_clause() throws RecognitionException {
        PythonProvenanceParser.with_clause_return retval = new PythonProvenanceParser.with_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA184=null;
        PythonProvenanceParser.with_item_return with_item183 =null;

        PythonProvenanceParser.with_item_return with_item185 =null;


        Object COMMA184_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_with_item=new RewriteRuleSubtreeStream(adaptor,"rule with_item");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:319:2: ( with_item ( COMMA with_item )* -> ^( WITH_ARGS ( with_item )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:319:4: with_item ( COMMA with_item )*
            {
            pushFollow(FOLLOW_with_item_in_with_clause2878);
            with_item183=with_item();

            state._fsp--;

            stream_with_item.add(with_item183.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:319:14: ( COMMA with_item )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:319:15: COMMA with_item
            	    {
            	    COMMA184=(Token)match(input,COMMA,FOLLOW_COMMA_in_with_clause2881);  
            	    stream_COMMA.add(COMMA184);


            	    pushFollow(FOLLOW_with_item_in_with_clause2883);
            	    with_item185=with_item();

            	    state._fsp--;

            	    stream_with_item.add(with_item185.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            // AST REWRITE
            // elements: with_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:33: -> ^( WITH_ARGS ( with_item )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:319:36: ^( WITH_ARGS ( with_item )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WITH_ARGS, "WITH_ARGS")
                , root_1);

                if ( !(stream_with_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_with_item.hasNext() ) {
                    adaptor.addChild(root_1, stream_with_item.nextTree());

                }
                stream_with_item.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "with_clause"


    public static class with_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "with_item"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:322:1: with_item : id1= test ref= 'as' id2= test -> ^( WITH_EQUIV[$ref] $id1 $id2) ;
    public final PythonProvenanceParser.with_item_return with_item() throws RecognitionException {
        PythonProvenanceParser.with_item_return retval = new PythonProvenanceParser.with_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        PythonProvenanceParser.test_return id1 =null;

        PythonProvenanceParser.test_return id2 =null;


        Object ref_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:323:2: (id1= test ref= 'as' id2= test -> ^( WITH_EQUIV[$ref] $id1 $id2) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:323:4: id1= test ref= 'as' id2= test
            {
            pushFollow(FOLLOW_test_in_with_item2908);
            id1=test();

            state._fsp--;

            stream_test.add(id1.getTree());

            ref=(Token)match(input,AS,FOLLOW_AS_in_with_item2912);  
            stream_AS.add(ref);


            pushFollow(FOLLOW_test_in_with_item2916);
            id2=test();

            state._fsp--;

            stream_test.add(id2.getTree());

            // AST REWRITE
            // elements: id2, id1
            // token labels: 
            // rule labels: retval, id2, id1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_id2=new RewriteRuleSubtreeStream(adaptor,"rule id2",id2!=null?id2.tree:null);
            RewriteRuleSubtreeStream stream_id1=new RewriteRuleSubtreeStream(adaptor,"rule id1",id1!=null?id1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:31: -> ^( WITH_EQUIV[$ref] $id1 $id2)
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:323:34: ^( WITH_EQUIV[$ref] $id1 $id2)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WITH_EQUIV, ref)
                , root_1);

                adaptor.addChild(root_1, stream_id1.nextTree());

                adaptor.addChild(root_1, stream_id2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "with_item"


    public static class suite_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "suite"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:326:1: suite : ( NEWLINE INDENT ( stmt_inside_block )+ DEDENT -> ^( INDENT ( stmt_inside_block )+ ) | INDENT ( stmt_inside_block )+ DEDENT -> ^( INDENT ( stmt_inside_block )+ ) );
    public final PythonProvenanceParser.suite_return suite() throws RecognitionException {
        PythonProvenanceParser.suite_return retval = new PythonProvenanceParser.suite_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE186=null;
        Token INDENT187=null;
        Token DEDENT189=null;
        Token INDENT190=null;
        Token DEDENT192=null;
        PythonProvenanceParser.stmt_inside_block_return stmt_inside_block188 =null;

        PythonProvenanceParser.stmt_inside_block_return stmt_inside_block191 =null;


        Object NEWLINE186_tree=null;
        Object INDENT187_tree=null;
        Object DEDENT189_tree=null;
        Object INDENT190_tree=null;
        Object DEDENT192_tree=null;
        RewriteRuleTokenStream stream_DEDENT=new RewriteRuleTokenStream(adaptor,"token DEDENT");
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleTokenStream stream_INDENT=new RewriteRuleTokenStream(adaptor,"token INDENT");
        RewriteRuleSubtreeStream stream_stmt_inside_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_inside_block");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:326:7: ( NEWLINE INDENT ( stmt_inside_block )+ DEDENT -> ^( INDENT ( stmt_inside_block )+ ) | INDENT ( stmt_inside_block )+ DEDENT -> ^( INDENT ( stmt_inside_block )+ ) )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==NEWLINE) ) {
                alt58=1;
            }
            else if ( (LA58_0==INDENT) ) {
                alt58=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:326:9: NEWLINE INDENT ( stmt_inside_block )+ DEDENT
                    {
                    NEWLINE186=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_suite2941);  
                    stream_NEWLINE.add(NEWLINE186);


                    INDENT187=(Token)match(input,INDENT,FOLLOW_INDENT_in_suite2943);  
                    stream_INDENT.add(INDENT187);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:326:24: ( stmt_inside_block )+
                    int cnt56=0;
                    loop56:
                    do {
                        int alt56=2;
                        int LA56_0 = input.LA(1);

                        if ( ((LA56_0 >= AT && LA56_0 <= BACKQUOTE)||LA56_0==DOTTED_NAME||LA56_0==FLOAT||LA56_0==IF||LA56_0==INT||(LA56_0 >= LBRACK && LA56_0 <= LCURLY)||LA56_0==LONGINT||(LA56_0 >= LPAREN && LA56_0 <= MINUS)||LA56_0==NAME||LA56_0==NOT||LA56_0==PLUS||LA56_0==PRINT||LA56_0==STRING||LA56_0==TILDE||(LA56_0 >= 126 && LA56_0 <= 131)||LA56_0==135||(LA56_0 >= 137 && LA56_0 <= 146)) ) {
                            alt56=1;
                        }


                        switch (alt56) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:326:25: stmt_inside_block
                    	    {
                    	    pushFollow(FOLLOW_stmt_inside_block_in_suite2946);
                    	    stmt_inside_block188=stmt_inside_block();

                    	    state._fsp--;

                    	    stream_stmt_inside_block.add(stmt_inside_block188.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt56 >= 1 ) break loop56;
                                EarlyExitException eee =
                                    new EarlyExitException(56, input);
                                throw eee;
                        }
                        cnt56++;
                    } while (true);


                    DEDENT189=(Token)match(input,DEDENT,FOLLOW_DEDENT_in_suite2950);  
                    stream_DEDENT.add(DEDENT189);


                    // AST REWRITE
                    // elements: INDENT, stmt_inside_block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 326:52: -> ^( INDENT ( stmt_inside_block )+ )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:326:55: ^( INDENT ( stmt_inside_block )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_INDENT.nextNode()
                        , root_1);

                        if ( !(stream_stmt_inside_block.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt_inside_block.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt_inside_block.nextTree());

                        }
                        stream_stmt_inside_block.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:327:9: INDENT ( stmt_inside_block )+ DEDENT
                    {
                    INDENT190=(Token)match(input,INDENT,FOLLOW_INDENT_in_suite2969);  
                    stream_INDENT.add(INDENT190);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:327:16: ( stmt_inside_block )+
                    int cnt57=0;
                    loop57:
                    do {
                        int alt57=2;
                        int LA57_0 = input.LA(1);

                        if ( ((LA57_0 >= AT && LA57_0 <= BACKQUOTE)||LA57_0==DOTTED_NAME||LA57_0==FLOAT||LA57_0==IF||LA57_0==INT||(LA57_0 >= LBRACK && LA57_0 <= LCURLY)||LA57_0==LONGINT||(LA57_0 >= LPAREN && LA57_0 <= MINUS)||LA57_0==NAME||LA57_0==NOT||LA57_0==PLUS||LA57_0==PRINT||LA57_0==STRING||LA57_0==TILDE||(LA57_0 >= 126 && LA57_0 <= 131)||LA57_0==135||(LA57_0 >= 137 && LA57_0 <= 146)) ) {
                            alt57=1;
                        }


                        switch (alt57) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:327:17: stmt_inside_block
                    	    {
                    	    pushFollow(FOLLOW_stmt_inside_block_in_suite2972);
                    	    stmt_inside_block191=stmt_inside_block();

                    	    state._fsp--;

                    	    stream_stmt_inside_block.add(stmt_inside_block191.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt57 >= 1 ) break loop57;
                                EarlyExitException eee =
                                    new EarlyExitException(57, input);
                                throw eee;
                        }
                        cnt57++;
                    } while (true);


                    DEDENT192=(Token)match(input,DEDENT,FOLLOW_DEDENT_in_suite2976);  
                    stream_DEDENT.add(DEDENT192);


                    // AST REWRITE
                    // elements: stmt_inside_block, INDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 327:44: -> ^( INDENT ( stmt_inside_block )+ )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:327:47: ^( INDENT ( stmt_inside_block )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_INDENT.nextNode()
                        , root_1);

                        if ( !(stream_stmt_inside_block.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt_inside_block.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt_inside_block.nextTree());

                        }
                        stream_stmt_inside_block.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "suite"


    public static class test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:330:1: test : or_test ;
    public final PythonProvenanceParser.test_return test() throws RecognitionException {
        PythonProvenanceParser.test_return retval = new PythonProvenanceParser.test_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.or_test_return or_test193 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:330:5: ( or_test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:330:7: or_test
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_or_test_in_test2999);
            or_test193=or_test();

            state._fsp--;

            adaptor.addChild(root_0, or_test193.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "test"


    public static class or_test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "or_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:333:1: or_test : and_test ( OR ^ and_test )* ;
    public final PythonProvenanceParser.or_test_return or_test() throws RecognitionException {
        PythonProvenanceParser.or_test_return retval = new PythonProvenanceParser.or_test_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OR195=null;
        PythonProvenanceParser.and_test_return and_test194 =null;

        PythonProvenanceParser.and_test_return and_test196 =null;


        Object OR195_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:333:9: ( and_test ( OR ^ and_test )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:333:11: and_test ( OR ^ and_test )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_test_in_or_test3012);
            and_test194=and_test();

            state._fsp--;

            adaptor.addChild(root_0, and_test194.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:333:20: ( OR ^ and_test )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==OR) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:333:21: OR ^ and_test
            	    {
            	    OR195=(Token)match(input,OR,FOLLOW_OR_in_or_test3015); 
            	    OR195_tree = 
            	    (Object)adaptor.create(OR195)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(OR195_tree, root_0);


            	    pushFollow(FOLLOW_and_test_in_or_test3018);
            	    and_test196=and_test();

            	    state._fsp--;

            	    adaptor.addChild(root_0, and_test196.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "or_test"


    public static class and_test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:336:1: and_test : not_test ( AND ^ not_test )* ;
    public final PythonProvenanceParser.and_test_return and_test() throws RecognitionException {
        PythonProvenanceParser.and_test_return retval = new PythonProvenanceParser.and_test_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AND198=null;
        PythonProvenanceParser.not_test_return not_test197 =null;

        PythonProvenanceParser.not_test_return not_test199 =null;


        Object AND198_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:336:10: ( not_test ( AND ^ not_test )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:336:12: not_test ( AND ^ not_test )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_not_test_in_and_test3037);
            not_test197=not_test();

            state._fsp--;

            adaptor.addChild(root_0, not_test197.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:336:21: ( AND ^ not_test )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==AND) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:336:22: AND ^ not_test
            	    {
            	    AND198=(Token)match(input,AND,FOLLOW_AND_in_and_test3040); 
            	    AND198_tree = 
            	    (Object)adaptor.create(AND198)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AND198_tree, root_0);


            	    pushFollow(FOLLOW_not_test_in_and_test3043);
            	    not_test199=not_test();

            	    state._fsp--;

            	    adaptor.addChild(root_0, not_test199.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_test"


    public static class not_test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:339:1: not_test : ( NOT ^ not_test | comparison );
    public final PythonProvenanceParser.not_test_return not_test() throws RecognitionException {
        PythonProvenanceParser.not_test_return retval = new PythonProvenanceParser.not_test_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NOT200=null;
        PythonProvenanceParser.not_test_return not_test201 =null;

        PythonProvenanceParser.comparison_return comparison202 =null;


        Object NOT200_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:339:10: ( NOT ^ not_test | comparison )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==NOT) ) {
                alt61=1;
            }
            else if ( (LA61_0==BACKQUOTE||LA61_0==DOTTED_NAME||LA61_0==FLOAT||LA61_0==INT||(LA61_0 >= LBRACK && LA61_0 <= LCURLY)||LA61_0==LONGINT||(LA61_0 >= LPAREN && LA61_0 <= MINUS)||LA61_0==NAME||LA61_0==PLUS||LA61_0==STRING||LA61_0==TILDE) ) {
                alt61=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:339:12: NOT ^ not_test
                    {
                    root_0 = (Object)adaptor.nil();


                    NOT200=(Token)match(input,NOT,FOLLOW_NOT_in_not_test3063); 
                    NOT200_tree = 
                    (Object)adaptor.create(NOT200)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(NOT200_tree, root_0);


                    pushFollow(FOLLOW_not_test_in_not_test3066);
                    not_test201=not_test();

                    state._fsp--;

                    adaptor.addChild(root_0, not_test201.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:340:12: comparison
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comparison_in_not_test3079);
                    comparison202=comparison();

                    state._fsp--;

                    adaptor.addChild(root_0, comparison202.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_test"


    public static class comparison_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comparison"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:1: comparison : expr ( ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr )* ;
    public final PythonProvenanceParser.comparison_return comparison() throws RecognitionException {
        PythonProvenanceParser.comparison_return retval = new PythonProvenanceParser.comparison_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LESS204=null;
        Token GREATER205=null;
        Token EQUAL206=null;
        Token GREATEREQUAL207=null;
        Token LESSEQUAL208=null;
        Token ALT_NOTEQUAL209=null;
        Token NOTEQUAL210=null;
        Token IN211=null;
        Token NOTIN212=null;
        Token IS213=null;
        Token ISNOT214=null;
        PythonProvenanceParser.expr_return expr203 =null;

        PythonProvenanceParser.expr_return expr215 =null;


        Object LESS204_tree=null;
        Object GREATER205_tree=null;
        Object EQUAL206_tree=null;
        Object GREATEREQUAL207_tree=null;
        Object LESSEQUAL208_tree=null;
        Object ALT_NOTEQUAL209_tree=null;
        Object NOTEQUAL210_tree=null;
        Object IN211_tree=null;
        Object NOTIN212_tree=null;
        Object IS213_tree=null;
        Object ISNOT214_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:11: ( expr ( ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:13: expr ( ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_comparison3096);
            expr203=expr();

            state._fsp--;

            adaptor.addChild(root_0, expr203.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:18: ( ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr )*
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case IN:
                    {
                    alt63=1;
                    }
                    break;
                case LESS:
                    {
                    alt63=1;
                    }
                    break;
                case GREATER:
                    {
                    alt63=1;
                    }
                    break;
                case EQUAL:
                    {
                    alt63=1;
                    }
                    break;
                case GREATEREQUAL:
                    {
                    alt63=1;
                    }
                    break;
                case LESSEQUAL:
                    {
                    alt63=1;
                    }
                    break;
                case ALT_NOTEQUAL:
                    {
                    alt63=1;
                    }
                    break;
                case NOTEQUAL:
                    {
                    alt63=1;
                    }
                    break;
                case NOTIN:
                    {
                    alt63=1;
                    }
                    break;
                case IS:
                    {
                    alt63=1;
                    }
                    break;
                case ISNOT:
                    {
                    alt63=1;
                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:20: ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:20: ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^)
            	    int alt62=11;
            	    switch ( input.LA(1) ) {
            	    case LESS:
            	        {
            	        alt62=1;
            	        }
            	        break;
            	    case GREATER:
            	        {
            	        alt62=2;
            	        }
            	        break;
            	    case EQUAL:
            	        {
            	        alt62=3;
            	        }
            	        break;
            	    case GREATEREQUAL:
            	        {
            	        alt62=4;
            	        }
            	        break;
            	    case LESSEQUAL:
            	        {
            	        alt62=5;
            	        }
            	        break;
            	    case ALT_NOTEQUAL:
            	        {
            	        alt62=6;
            	        }
            	        break;
            	    case NOTEQUAL:
            	        {
            	        alt62=7;
            	        }
            	        break;
            	    case IN:
            	        {
            	        alt62=8;
            	        }
            	        break;
            	    case NOTIN:
            	        {
            	        alt62=9;
            	        }
            	        break;
            	    case IS:
            	        {
            	        alt62=10;
            	        }
            	        break;
            	    case ISNOT:
            	        {
            	        alt62=11;
            	        }
            	        break;
            	    default:
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 62, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt62) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:21: LESS ^
            	            {
            	            LESS204=(Token)match(input,LESS,FOLLOW_LESS_in_comparison3101); 
            	            LESS204_tree = 
            	            (Object)adaptor.create(LESS204)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(LESS204_tree, root_0);


            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:27: GREATER ^
            	            {
            	            GREATER205=(Token)match(input,GREATER,FOLLOW_GREATER_in_comparison3104); 
            	            GREATER205_tree = 
            	            (Object)adaptor.create(GREATER205)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(GREATER205_tree, root_0);


            	            }
            	            break;
            	        case 3 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:36: EQUAL ^
            	            {
            	            EQUAL206=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_comparison3107); 
            	            EQUAL206_tree = 
            	            (Object)adaptor.create(EQUAL206)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(EQUAL206_tree, root_0);


            	            }
            	            break;
            	        case 4 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:43: GREATEREQUAL ^
            	            {
            	            GREATEREQUAL207=(Token)match(input,GREATEREQUAL,FOLLOW_GREATEREQUAL_in_comparison3110); 
            	            GREATEREQUAL207_tree = 
            	            (Object)adaptor.create(GREATEREQUAL207)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(GREATEREQUAL207_tree, root_0);


            	            }
            	            break;
            	        case 5 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:57: LESSEQUAL ^
            	            {
            	            LESSEQUAL208=(Token)match(input,LESSEQUAL,FOLLOW_LESSEQUAL_in_comparison3113); 
            	            LESSEQUAL208_tree = 
            	            (Object)adaptor.create(LESSEQUAL208)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(LESSEQUAL208_tree, root_0);


            	            }
            	            break;
            	        case 6 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:68: ALT_NOTEQUAL ^
            	            {
            	            ALT_NOTEQUAL209=(Token)match(input,ALT_NOTEQUAL,FOLLOW_ALT_NOTEQUAL_in_comparison3116); 
            	            ALT_NOTEQUAL209_tree = 
            	            (Object)adaptor.create(ALT_NOTEQUAL209)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(ALT_NOTEQUAL209_tree, root_0);


            	            }
            	            break;
            	        case 7 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:82: NOTEQUAL ^
            	            {
            	            NOTEQUAL210=(Token)match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_comparison3119); 
            	            NOTEQUAL210_tree = 
            	            (Object)adaptor.create(NOTEQUAL210)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(NOTEQUAL210_tree, root_0);


            	            }
            	            break;
            	        case 8 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:92: IN ^
            	            {
            	            IN211=(Token)match(input,IN,FOLLOW_IN_in_comparison3122); 
            	            IN211_tree = 
            	            (Object)adaptor.create(IN211)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(IN211_tree, root_0);


            	            }
            	            break;
            	        case 9 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:96: NOTIN ^
            	            {
            	            NOTIN212=(Token)match(input,NOTIN,FOLLOW_NOTIN_in_comparison3125); 
            	            NOTIN212_tree = 
            	            (Object)adaptor.create(NOTIN212)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(NOTIN212_tree, root_0);


            	            }
            	            break;
            	        case 10 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:103: IS ^
            	            {
            	            IS213=(Token)match(input,IS,FOLLOW_IS_in_comparison3128); 
            	            IS213_tree = 
            	            (Object)adaptor.create(IS213)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(IS213_tree, root_0);


            	            }
            	            break;
            	        case 11 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:343:107: ISNOT ^
            	            {
            	            ISNOT214=(Token)match(input,ISNOT,FOLLOW_ISNOT_in_comparison3131); 
            	            ISNOT214_tree = 
            	            (Object)adaptor.create(ISNOT214)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(ISNOT214_tree, root_0);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_expr_in_comparison3135);
            	    expr215=expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expr215.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comparison"


    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:346:1: expr : xor_expr ( VBAR ^ xor_expr )* ;
    public final PythonProvenanceParser.expr_return expr() throws RecognitionException {
        PythonProvenanceParser.expr_return retval = new PythonProvenanceParser.expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token VBAR217=null;
        PythonProvenanceParser.xor_expr_return xor_expr216 =null;

        PythonProvenanceParser.xor_expr_return xor_expr218 =null;


        Object VBAR217_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:346:6: ( xor_expr ( VBAR ^ xor_expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:346:8: xor_expr ( VBAR ^ xor_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_xor_expr_in_expr3156);
            xor_expr216=xor_expr();

            state._fsp--;

            adaptor.addChild(root_0, xor_expr216.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:346:17: ( VBAR ^ xor_expr )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==VBAR) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:346:18: VBAR ^ xor_expr
            	    {
            	    VBAR217=(Token)match(input,VBAR,FOLLOW_VBAR_in_expr3159); 
            	    VBAR217_tree = 
            	    (Object)adaptor.create(VBAR217)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(VBAR217_tree, root_0);


            	    pushFollow(FOLLOW_xor_expr_in_expr3162);
            	    xor_expr218=xor_expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, xor_expr218.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class xor_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xor_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:349:1: xor_expr : and_expr ( CIRCUMFLEX ^ and_expr )* ;
    public final PythonProvenanceParser.xor_expr_return xor_expr() throws RecognitionException {
        PythonProvenanceParser.xor_expr_return retval = new PythonProvenanceParser.xor_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CIRCUMFLEX220=null;
        PythonProvenanceParser.and_expr_return and_expr219 =null;

        PythonProvenanceParser.and_expr_return and_expr221 =null;


        Object CIRCUMFLEX220_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:349:10: ( and_expr ( CIRCUMFLEX ^ and_expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:349:12: and_expr ( CIRCUMFLEX ^ and_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_expr_in_xor_expr3178);
            and_expr219=and_expr();

            state._fsp--;

            adaptor.addChild(root_0, and_expr219.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:349:21: ( CIRCUMFLEX ^ and_expr )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==CIRCUMFLEX) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:349:22: CIRCUMFLEX ^ and_expr
            	    {
            	    CIRCUMFLEX220=(Token)match(input,CIRCUMFLEX,FOLLOW_CIRCUMFLEX_in_xor_expr3181); 
            	    CIRCUMFLEX220_tree = 
            	    (Object)adaptor.create(CIRCUMFLEX220)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(CIRCUMFLEX220_tree, root_0);


            	    pushFollow(FOLLOW_and_expr_in_xor_expr3184);
            	    and_expr221=and_expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, and_expr221.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xor_expr"


    public static class and_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:352:1: and_expr : shift_expr ( AMPER ^ shift_expr )* ;
    public final PythonProvenanceParser.and_expr_return and_expr() throws RecognitionException {
        PythonProvenanceParser.and_expr_return retval = new PythonProvenanceParser.and_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AMPER223=null;
        PythonProvenanceParser.shift_expr_return shift_expr222 =null;

        PythonProvenanceParser.shift_expr_return shift_expr224 =null;


        Object AMPER223_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:352:10: ( shift_expr ( AMPER ^ shift_expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:352:12: shift_expr ( AMPER ^ shift_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_shift_expr_in_and_expr3204);
            shift_expr222=shift_expr();

            state._fsp--;

            adaptor.addChild(root_0, shift_expr222.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:352:23: ( AMPER ^ shift_expr )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==AMPER) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:352:24: AMPER ^ shift_expr
            	    {
            	    AMPER223=(Token)match(input,AMPER,FOLLOW_AMPER_in_and_expr3207); 
            	    AMPER223_tree = 
            	    (Object)adaptor.create(AMPER223)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AMPER223_tree, root_0);


            	    pushFollow(FOLLOW_shift_expr_in_and_expr3210);
            	    shift_expr224=shift_expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, shift_expr224.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_expr"


    public static class shift_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shift_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:355:1: shift_expr : arith_expr ( ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr )* ;
    public final PythonProvenanceParser.shift_expr_return shift_expr() throws RecognitionException {
        PythonProvenanceParser.shift_expr_return retval = new PythonProvenanceParser.shift_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFTSHIFT226=null;
        Token RIGHTSHIFT227=null;
        PythonProvenanceParser.arith_expr_return arith_expr225 =null;

        PythonProvenanceParser.arith_expr_return arith_expr228 =null;


        Object LEFTSHIFT226_tree=null;
        Object RIGHTSHIFT227_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:355:12: ( arith_expr ( ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:355:14: arith_expr ( ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_arith_expr_in_shift_expr3230);
            arith_expr225=arith_expr();

            state._fsp--;

            adaptor.addChild(root_0, arith_expr225.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:355:25: ( ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==LEFTSHIFT) ) {
                    alt68=1;
                }
                else if ( (LA68_0==RIGHTSHIFT) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:355:26: ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:355:26: ( LEFTSHIFT ^| RIGHTSHIFT ^)
            	    int alt67=2;
            	    int LA67_0 = input.LA(1);

            	    if ( (LA67_0==LEFTSHIFT) ) {
            	        alt67=1;
            	    }
            	    else if ( (LA67_0==RIGHTSHIFT) ) {
            	        alt67=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 67, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt67) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:355:27: LEFTSHIFT ^
            	            {
            	            LEFTSHIFT226=(Token)match(input,LEFTSHIFT,FOLLOW_LEFTSHIFT_in_shift_expr3234); 
            	            LEFTSHIFT226_tree = 
            	            (Object)adaptor.create(LEFTSHIFT226)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(LEFTSHIFT226_tree, root_0);


            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:355:38: RIGHTSHIFT ^
            	            {
            	            RIGHTSHIFT227=(Token)match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_shift_expr3237); 
            	            RIGHTSHIFT227_tree = 
            	            (Object)adaptor.create(RIGHTSHIFT227)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(RIGHTSHIFT227_tree, root_0);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_arith_expr_in_shift_expr3241);
            	    arith_expr228=arith_expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, arith_expr228.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shift_expr"


    public static class arith_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arith_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:358:1: arith_expr : term ( ( PLUS ^| MINUS ^) term )* ;
    public final PythonProvenanceParser.arith_expr_return arith_expr() throws RecognitionException {
        PythonProvenanceParser.arith_expr_return retval = new PythonProvenanceParser.arith_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLUS230=null;
        Token MINUS231=null;
        PythonProvenanceParser.term_return term229 =null;

        PythonProvenanceParser.term_return term232 =null;


        Object PLUS230_tree=null;
        Object MINUS231_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:358:11: ( term ( ( PLUS ^| MINUS ^) term )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:358:13: term ( ( PLUS ^| MINUS ^) term )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_term_in_arith_expr3262);
            term229=term();

            state._fsp--;

            adaptor.addChild(root_0, term229.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:358:18: ( ( PLUS ^| MINUS ^) term )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==PLUS) ) {
                    alt70=1;
                }
                else if ( (LA70_0==MINUS) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:358:19: ( PLUS ^| MINUS ^) term
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:358:19: ( PLUS ^| MINUS ^)
            	    int alt69=2;
            	    int LA69_0 = input.LA(1);

            	    if ( (LA69_0==PLUS) ) {
            	        alt69=1;
            	    }
            	    else if ( (LA69_0==MINUS) ) {
            	        alt69=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 69, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt69) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:358:20: PLUS ^
            	            {
            	            PLUS230=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_expr3266); 
            	            PLUS230_tree = 
            	            (Object)adaptor.create(PLUS230)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(PLUS230_tree, root_0);


            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:358:26: MINUS ^
            	            {
            	            MINUS231=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_expr3269); 
            	            MINUS231_tree = 
            	            (Object)adaptor.create(MINUS231)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(MINUS231_tree, root_0);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_term_in_arith_expr3273);
            	    term232=term();

            	    state._fsp--;

            	    adaptor.addChild(root_0, term232.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arith_expr"


    public static class term_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "term"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:1: term : factor ( ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor )* ;
    public final PythonProvenanceParser.term_return term() throws RecognitionException {
        PythonProvenanceParser.term_return retval = new PythonProvenanceParser.term_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR234=null;
        Token SLASH235=null;
        Token DOUBLESLASH236=null;
        Token DOUBLESTAR237=null;
        PythonProvenanceParser.factor_return factor233 =null;

        PythonProvenanceParser.factor_return factor238 =null;


        Object STAR234_tree=null;
        Object SLASH235_tree=null;
        Object DOUBLESLASH236_tree=null;
        Object DOUBLESTAR237_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:6: ( factor ( ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:8: factor ( ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_factor_in_term3294);
            factor233=factor();

            state._fsp--;

            adaptor.addChild(root_0, factor233.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:15: ( ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor )*
            loop72:
            do {
                int alt72=2;
                switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt72=1;
                    }
                    break;
                case SLASH:
                    {
                    alt72=1;
                    }
                    break;
                case DOUBLESLASH:
                    {
                    alt72=1;
                    }
                    break;
                case DOUBLESTAR:
                    {
                    alt72=1;
                    }
                    break;

                }

                switch (alt72) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:16: ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:16: ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^)
            	    int alt71=4;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt71=1;
            	        }
            	        break;
            	    case SLASH:
            	        {
            	        alt71=2;
            	        }
            	        break;
            	    case DOUBLESLASH:
            	        {
            	        alt71=3;
            	        }
            	        break;
            	    case DOUBLESTAR:
            	        {
            	        alt71=4;
            	        }
            	        break;
            	    default:
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 71, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt71) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:17: STAR ^
            	            {
            	            STAR234=(Token)match(input,STAR,FOLLOW_STAR_in_term3298); 
            	            STAR234_tree = 
            	            (Object)adaptor.create(STAR234)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(STAR234_tree, root_0);


            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:25: SLASH ^
            	            {
            	            SLASH235=(Token)match(input,SLASH,FOLLOW_SLASH_in_term3303); 
            	            SLASH235_tree = 
            	            (Object)adaptor.create(SLASH235)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(SLASH235_tree, root_0);


            	            }
            	            break;
            	        case 3 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:34: DOUBLESLASH ^
            	            {
            	            DOUBLESLASH236=(Token)match(input,DOUBLESLASH,FOLLOW_DOUBLESLASH_in_term3308); 
            	            DOUBLESLASH236_tree = 
            	            (Object)adaptor.create(DOUBLESLASH236)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(DOUBLESLASH236_tree, root_0);


            	            }
            	            break;
            	        case 4 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:361:49: DOUBLESTAR ^
            	            {
            	            DOUBLESTAR237=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_term3313); 
            	            DOUBLESTAR237_tree = 
            	            (Object)adaptor.create(DOUBLESTAR237)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(DOUBLESTAR237_tree, root_0);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_factor_in_term3318);
            	    factor238=factor();

            	    state._fsp--;

            	    adaptor.addChild(root_0, factor238.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "term"


    public static class factor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "factor"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:365:1: factor : (op= PLUS power -> ^( UNARY_EXPRESSION $op power ) |op= MINUS power -> ^( UNARY_EXPRESSION $op power ) |op= TILDE power -> ^( UNARY_EXPRESSION $op power ) | power );
    public final PythonProvenanceParser.factor_return factor() throws RecognitionException {
        PythonProvenanceParser.factor_return retval = new PythonProvenanceParser.factor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token op=null;
        PythonProvenanceParser.power_return power239 =null;

        PythonProvenanceParser.power_return power240 =null;

        PythonProvenanceParser.power_return power241 =null;

        PythonProvenanceParser.power_return power242 =null;


        Object op_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_TILDE=new RewriteRuleTokenStream(adaptor,"token TILDE");
        RewriteRuleSubtreeStream stream_power=new RewriteRuleSubtreeStream(adaptor,"rule power");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:365:8: (op= PLUS power -> ^( UNARY_EXPRESSION $op power ) |op= MINUS power -> ^( UNARY_EXPRESSION $op power ) |op= TILDE power -> ^( UNARY_EXPRESSION $op power ) | power )
            int alt73=4;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt73=1;
                }
                break;
            case MINUS:
                {
                alt73=2;
                }
                break;
            case TILDE:
                {
                alt73=3;
                }
                break;
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case NAME:
            case STRING:
                {
                alt73=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }

            switch (alt73) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:365:10: op= PLUS power
                    {
                    op=(Token)match(input,PLUS,FOLLOW_PLUS_in_factor3337);  
                    stream_PLUS.add(op);


                    pushFollow(FOLLOW_power_in_factor3339);
                    power239=power();

                    state._fsp--;

                    stream_power.add(power239.getTree());

                    // AST REWRITE
                    // elements: power, op
                    // token labels: op
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_op=new RewriteRuleTokenStream(adaptor,"token op",op);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 365:24: -> ^( UNARY_EXPRESSION $op power )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:365:27: ^( UNARY_EXPRESSION $op power )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNARY_EXPRESSION, "UNARY_EXPRESSION")
                        , root_1);

                        adaptor.addChild(root_1, stream_op.nextNode());

                        adaptor.addChild(root_1, stream_power.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:366:4: op= MINUS power
                    {
                    op=(Token)match(input,MINUS,FOLLOW_MINUS_in_factor3360);  
                    stream_MINUS.add(op);


                    pushFollow(FOLLOW_power_in_factor3362);
                    power240=power();

                    state._fsp--;

                    stream_power.add(power240.getTree());

                    // AST REWRITE
                    // elements: power, op
                    // token labels: op
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_op=new RewriteRuleTokenStream(adaptor,"token op",op);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 366:21: -> ^( UNARY_EXPRESSION $op power )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:366:24: ^( UNARY_EXPRESSION $op power )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNARY_EXPRESSION, "UNARY_EXPRESSION")
                        , root_1);

                        adaptor.addChild(root_1, stream_op.nextNode());

                        adaptor.addChild(root_1, stream_power.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:367:4: op= TILDE power
                    {
                    op=(Token)match(input,TILDE,FOLLOW_TILDE_in_factor3382);  
                    stream_TILDE.add(op);


                    pushFollow(FOLLOW_power_in_factor3384);
                    power241=power();

                    state._fsp--;

                    stream_power.add(power241.getTree());

                    // AST REWRITE
                    // elements: power, op
                    // token labels: op
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_op=new RewriteRuleTokenStream(adaptor,"token op",op);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 367:21: -> ^( UNARY_EXPRESSION $op power )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:367:24: ^( UNARY_EXPRESSION $op power )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNARY_EXPRESSION, "UNARY_EXPRESSION")
                        , root_1);

                        adaptor.addChild(root_1, stream_op.nextNode());

                        adaptor.addChild(root_1, stream_power.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:368:4: power
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_power_in_factor3400);
                    power242=power();

                    state._fsp--;

                    adaptor.addChild(root_0, power242.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "factor"


    public static class power_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "power"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:371:1: power : atom ( trailer )? -> ^( EXPRESSION atom ( trailer )? ) ;
    public final PythonProvenanceParser.power_return power() throws RecognitionException {
        PythonProvenanceParser.power_return retval = new PythonProvenanceParser.power_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.atom_return atom243 =null;

        PythonProvenanceParser.trailer_return trailer244 =null;


        RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
        RewriteRuleSubtreeStream stream_trailer=new RewriteRuleSubtreeStream(adaptor,"rule trailer");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:371:7: ( atom ( trailer )? -> ^( EXPRESSION atom ( trailer )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:371:9: atom ( trailer )?
            {
            pushFollow(FOLLOW_atom_in_power3416);
            atom243=atom();

            state._fsp--;

            stream_atom.add(atom243.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:371:14: ( trailer )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LPAREN) ) {
                alt74=1;
            }
            else if ( (LA74_0==LBRACK) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:371:15: trailer
                    {
                    pushFollow(FOLLOW_trailer_in_power3419);
                    trailer244=trailer();

                    state._fsp--;

                    stream_trailer.add(trailer244.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: trailer, atom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:25: -> ^( EXPRESSION atom ( trailer )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:371:28: ^( EXPRESSION atom ( trailer )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPRESSION, "EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_atom.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:371:46: ( trailer )?
                if ( stream_trailer.hasNext() ) {
                    adaptor.addChild(root_1, stream_trailer.nextTree());

                }
                stream_trailer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "power"


    public static class atom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "atom"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:374:1: atom : (ref= LPAREN ( testlist_gexp )? RPAREN -> ^( INNER_BRANCH[$ref] testlist_gexp ) |ref= LBRACK ( listmaker ) -> ^( LISTMAKER_CMD[$ref] ( listmaker )? ) |ref= LCURLY ( dictmaker ) -> ^( DICTMAKER_CMD[$ref] ( dictmaker )? ) | BACKQUOTE ! testlist BACKQUOTE !|id1= NAME ( PERCENT test )? -> ^( VARIABLE_CMD[$id1] $id1 ( test )? ) |id1= DOTTED_NAME ( PERCENT test )? -> ^( CLASSVARIABLE_CMD[$id1] $id1 ( test )? ) |id1= INT ( PERCENT test )? -> ^( VALUETYPE[$id1] INT_TYPE $id1 ( test )? ) |id1= LONGINT ( PERCENT test )? -> ^( VALUETYPE[$id1] LONG_TYPE $id1 ( test )? ) |id1= FLOAT ( PERCENT test )? -> ^( VALUETYPE[$id1] DOUBLE_TYPE $id1 ( test )? ) |id1= STRING ( PERCENT string_argument )? -> ^( VALUETYPE[$id1] STRING_TYPE $id1 ( string_argument )? ) );
    public final PythonProvenanceParser.atom_return atom() throws RecognitionException {
        PythonProvenanceParser.atom_return retval = new PythonProvenanceParser.atom_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token id1=null;
        Token RPAREN246=null;
        Token BACKQUOTE249=null;
        Token BACKQUOTE251=null;
        Token PERCENT252=null;
        Token PERCENT254=null;
        Token PERCENT256=null;
        Token PERCENT258=null;
        Token PERCENT260=null;
        Token PERCENT262=null;
        PythonProvenanceParser.testlist_gexp_return testlist_gexp245 =null;

        PythonProvenanceParser.listmaker_return listmaker247 =null;

        PythonProvenanceParser.dictmaker_return dictmaker248 =null;

        PythonProvenanceParser.testlist_return testlist250 =null;

        PythonProvenanceParser.test_return test253 =null;

        PythonProvenanceParser.test_return test255 =null;

        PythonProvenanceParser.test_return test257 =null;

        PythonProvenanceParser.test_return test259 =null;

        PythonProvenanceParser.test_return test261 =null;

        PythonProvenanceParser.string_argument_return string_argument263 =null;


        Object ref_tree=null;
        Object id1_tree=null;
        Object RPAREN246_tree=null;
        Object BACKQUOTE249_tree=null;
        Object BACKQUOTE251_tree=null;
        Object PERCENT252_tree=null;
        Object PERCENT254_tree=null;
        Object PERCENT256_tree=null;
        Object PERCENT258_tree=null;
        Object PERCENT260_tree=null;
        Object PERCENT262_tree=null;
        RewriteRuleTokenStream stream_LONGINT=new RewriteRuleTokenStream(adaptor,"token LONGINT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_FLOAT=new RewriteRuleTokenStream(adaptor,"token FLOAT");
        RewriteRuleTokenStream stream_INT=new RewriteRuleTokenStream(adaptor,"token INT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_DOTTED_NAME=new RewriteRuleTokenStream(adaptor,"token DOTTED_NAME");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleSubtreeStream stream_string_argument=new RewriteRuleSubtreeStream(adaptor,"rule string_argument");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_testlist_gexp=new RewriteRuleSubtreeStream(adaptor,"rule testlist_gexp");
        RewriteRuleSubtreeStream stream_dictmaker=new RewriteRuleSubtreeStream(adaptor,"rule dictmaker");
        RewriteRuleSubtreeStream stream_listmaker=new RewriteRuleSubtreeStream(adaptor,"rule listmaker");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:374:6: (ref= LPAREN ( testlist_gexp )? RPAREN -> ^( INNER_BRANCH[$ref] testlist_gexp ) |ref= LBRACK ( listmaker ) -> ^( LISTMAKER_CMD[$ref] ( listmaker )? ) |ref= LCURLY ( dictmaker ) -> ^( DICTMAKER_CMD[$ref] ( dictmaker )? ) | BACKQUOTE ! testlist BACKQUOTE !|id1= NAME ( PERCENT test )? -> ^( VARIABLE_CMD[$id1] $id1 ( test )? ) |id1= DOTTED_NAME ( PERCENT test )? -> ^( CLASSVARIABLE_CMD[$id1] $id1 ( test )? ) |id1= INT ( PERCENT test )? -> ^( VALUETYPE[$id1] INT_TYPE $id1 ( test )? ) |id1= LONGINT ( PERCENT test )? -> ^( VALUETYPE[$id1] LONG_TYPE $id1 ( test )? ) |id1= FLOAT ( PERCENT test )? -> ^( VALUETYPE[$id1] DOUBLE_TYPE $id1 ( test )? ) |id1= STRING ( PERCENT string_argument )? -> ^( VALUETYPE[$id1] STRING_TYPE $id1 ( string_argument )? ) )
            int alt82=10;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt82=1;
                }
                break;
            case LBRACK:
                {
                alt82=2;
                }
                break;
            case LCURLY:
                {
                alt82=3;
                }
                break;
            case BACKQUOTE:
                {
                alt82=4;
                }
                break;
            case NAME:
                {
                alt82=5;
                }
                break;
            case DOTTED_NAME:
                {
                alt82=6;
                }
                break;
            case INT:
                {
                alt82=7;
                }
                break;
            case LONGINT:
                {
                alt82=8;
                }
                break;
            case FLOAT:
                {
                alt82=9;
                }
                break;
            case STRING:
                {
                alt82=10;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }

            switch (alt82) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:374:8: ref= LPAREN ( testlist_gexp )? RPAREN
                    {
                    ref=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atom3445);  
                    stream_LPAREN.add(ref);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:375:8: ( testlist_gexp )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==BACKQUOTE||LA75_0==DOTTED_NAME||LA75_0==FLOAT||LA75_0==INT||(LA75_0 >= LBRACK && LA75_0 <= LCURLY)||LA75_0==LONGINT||(LA75_0 >= LPAREN && LA75_0 <= MINUS)||LA75_0==NAME||LA75_0==NOT||LA75_0==PLUS||LA75_0==STRING||LA75_0==TILDE) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:376:8: testlist_gexp
                            {
                            pushFollow(FOLLOW_testlist_gexp_in_atom3464);
                            testlist_gexp245=testlist_gexp();

                            state._fsp--;

                            stream_testlist_gexp.add(testlist_gexp245.getTree());

                            }
                            break;

                    }


                    RPAREN246=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atom3486);  
                    stream_RPAREN.add(RPAREN246);


                    // AST REWRITE
                    // elements: testlist_gexp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 378:15: -> ^( INNER_BRANCH[$ref] testlist_gexp )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:378:18: ^( INNER_BRANCH[$ref] testlist_gexp )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(INNER_BRANCH, ref)
                        , root_1);

                        adaptor.addChild(root_1, stream_testlist_gexp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:379:8: ref= LBRACK ( listmaker )
                    {
                    ref=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_atom3506);  
                    stream_LBRACK.add(ref);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:379:19: ( listmaker )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:379:20: listmaker
                    {
                    pushFollow(FOLLOW_listmaker_in_atom3509);
                    listmaker247=listmaker();

                    state._fsp--;

                    stream_listmaker.add(listmaker247.getTree());

                    }


                    // AST REWRITE
                    // elements: listmaker
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 379:32: -> ^( LISTMAKER_CMD[$ref] ( listmaker )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:379:35: ^( LISTMAKER_CMD[$ref] ( listmaker )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(LISTMAKER_CMD, ref)
                        , root_1);

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:379:57: ( listmaker )?
                        if ( stream_listmaker.hasNext() ) {
                            adaptor.addChild(root_1, stream_listmaker.nextTree());

                        }
                        stream_listmaker.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:380:8: ref= LCURLY ( dictmaker )
                    {
                    ref=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_atom3532);  
                    stream_LCURLY.add(ref);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:380:19: ( dictmaker )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:380:20: dictmaker
                    {
                    pushFollow(FOLLOW_dictmaker_in_atom3535);
                    dictmaker248=dictmaker();

                    state._fsp--;

                    stream_dictmaker.add(dictmaker248.getTree());

                    }


                    // AST REWRITE
                    // elements: dictmaker
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 380:31: -> ^( DICTMAKER_CMD[$ref] ( dictmaker )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:380:34: ^( DICTMAKER_CMD[$ref] ( dictmaker )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DICTMAKER_CMD, ref)
                        , root_1);

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:380:56: ( dictmaker )?
                        if ( stream_dictmaker.hasNext() ) {
                            adaptor.addChild(root_1, stream_dictmaker.nextTree());

                        }
                        stream_dictmaker.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:381:8: BACKQUOTE ! testlist BACKQUOTE !
                    {
                    root_0 = (Object)adaptor.nil();


                    BACKQUOTE249=(Token)match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom3555); 

                    pushFollow(FOLLOW_testlist_in_atom3558);
                    testlist250=testlist();

                    state._fsp--;

                    adaptor.addChild(root_0, testlist250.getTree());

                    BACKQUOTE251=(Token)match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom3560); 

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:382:8: id1= NAME ( PERCENT test )?
                    {
                    id1=(Token)match(input,NAME,FOLLOW_NAME_in_atom3572);  
                    stream_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:382:17: ( PERCENT test )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==PERCENT) ) {
                        int LA76_1 = input.LA(2);

                        if ( (LA76_1==BACKQUOTE||LA76_1==DOTTED_NAME||LA76_1==FLOAT||LA76_1==INT||(LA76_1 >= LBRACK && LA76_1 <= LCURLY)||LA76_1==LONGINT||(LA76_1 >= LPAREN && LA76_1 <= MINUS)||LA76_1==NAME||LA76_1==NOT||LA76_1==PLUS||LA76_1==STRING||LA76_1==TILDE) ) {
                            alt76=1;
                        }
                    }
                    switch (alt76) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:382:18: PERCENT test
                            {
                            PERCENT252=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_atom3575);  
                            stream_PERCENT.add(PERCENT252);


                            pushFollow(FOLLOW_test_in_atom3577);
                            test253=test();

                            state._fsp--;

                            stream_test.add(test253.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: test, id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 382:33: -> ^( VARIABLE_CMD[$id1] $id1 ( test )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:382:36: ^( VARIABLE_CMD[$id1] $id1 ( test )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VARIABLE_CMD, id1)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:382:62: ( test )?
                        if ( stream_test.hasNext() ) {
                            adaptor.addChild(root_1, stream_test.nextTree());

                        }
                        stream_test.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:383:8: id1= DOTTED_NAME ( PERCENT test )?
                    {
                    id1=(Token)match(input,DOTTED_NAME,FOLLOW_DOTTED_NAME_in_atom3603);  
                    stream_DOTTED_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:383:24: ( PERCENT test )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==PERCENT) ) {
                        int LA77_1 = input.LA(2);

                        if ( (LA77_1==BACKQUOTE||LA77_1==DOTTED_NAME||LA77_1==FLOAT||LA77_1==INT||(LA77_1 >= LBRACK && LA77_1 <= LCURLY)||LA77_1==LONGINT||(LA77_1 >= LPAREN && LA77_1 <= MINUS)||LA77_1==NAME||LA77_1==NOT||LA77_1==PLUS||LA77_1==STRING||LA77_1==TILDE) ) {
                            alt77=1;
                        }
                    }
                    switch (alt77) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:383:25: PERCENT test
                            {
                            PERCENT254=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_atom3606);  
                            stream_PERCENT.add(PERCENT254);


                            pushFollow(FOLLOW_test_in_atom3608);
                            test255=test();

                            state._fsp--;

                            stream_test.add(test255.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: test, id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 383:40: -> ^( CLASSVARIABLE_CMD[$id1] $id1 ( test )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:383:43: ^( CLASSVARIABLE_CMD[$id1] $id1 ( test )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CLASSVARIABLE_CMD, id1)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:383:74: ( test )?
                        if ( stream_test.hasNext() ) {
                            adaptor.addChild(root_1, stream_test.nextTree());

                        }
                        stream_test.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:384:8: id1= INT ( PERCENT test )?
                    {
                    id1=(Token)match(input,INT,FOLLOW_INT_in_atom3634);  
                    stream_INT.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:384:16: ( PERCENT test )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==PERCENT) ) {
                        int LA78_1 = input.LA(2);

                        if ( (LA78_1==BACKQUOTE||LA78_1==DOTTED_NAME||LA78_1==FLOAT||LA78_1==INT||(LA78_1 >= LBRACK && LA78_1 <= LCURLY)||LA78_1==LONGINT||(LA78_1 >= LPAREN && LA78_1 <= MINUS)||LA78_1==NAME||LA78_1==NOT||LA78_1==PLUS||LA78_1==STRING||LA78_1==TILDE) ) {
                            alt78=1;
                        }
                    }
                    switch (alt78) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:384:17: PERCENT test
                            {
                            PERCENT256=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_atom3637);  
                            stream_PERCENT.add(PERCENT256);


                            pushFollow(FOLLOW_test_in_atom3639);
                            test257=test();

                            state._fsp--;

                            stream_test.add(test257.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id1, test
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 384:32: -> ^( VALUETYPE[$id1] INT_TYPE $id1 ( test )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:384:35: ^( VALUETYPE[$id1] INT_TYPE $id1 ( test )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUETYPE, id1)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(INT_TYPE, "INT_TYPE")
                        );

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:384:67: ( test )?
                        if ( stream_test.hasNext() ) {
                            adaptor.addChild(root_1, stream_test.nextTree());

                        }
                        stream_test.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 8 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:385:8: id1= LONGINT ( PERCENT test )?
                    {
                    id1=(Token)match(input,LONGINT,FOLLOW_LONGINT_in_atom3667);  
                    stream_LONGINT.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:385:20: ( PERCENT test )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==PERCENT) ) {
                        int LA79_1 = input.LA(2);

                        if ( (LA79_1==BACKQUOTE||LA79_1==DOTTED_NAME||LA79_1==FLOAT||LA79_1==INT||(LA79_1 >= LBRACK && LA79_1 <= LCURLY)||LA79_1==LONGINT||(LA79_1 >= LPAREN && LA79_1 <= MINUS)||LA79_1==NAME||LA79_1==NOT||LA79_1==PLUS||LA79_1==STRING||LA79_1==TILDE) ) {
                            alt79=1;
                        }
                    }
                    switch (alt79) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:385:21: PERCENT test
                            {
                            PERCENT258=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_atom3670);  
                            stream_PERCENT.add(PERCENT258);


                            pushFollow(FOLLOW_test_in_atom3672);
                            test259=test();

                            state._fsp--;

                            stream_test.add(test259.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: test, id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 385:36: -> ^( VALUETYPE[$id1] LONG_TYPE $id1 ( test )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:385:39: ^( VALUETYPE[$id1] LONG_TYPE $id1 ( test )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUETYPE, id1)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(LONG_TYPE, "LONG_TYPE")
                        );

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:385:72: ( test )?
                        if ( stream_test.hasNext() ) {
                            adaptor.addChild(root_1, stream_test.nextTree());

                        }
                        stream_test.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 9 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:386:8: id1= FLOAT ( PERCENT test )?
                    {
                    id1=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_atom3700);  
                    stream_FLOAT.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:386:18: ( PERCENT test )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==PERCENT) ) {
                        int LA80_1 = input.LA(2);

                        if ( (LA80_1==BACKQUOTE||LA80_1==DOTTED_NAME||LA80_1==FLOAT||LA80_1==INT||(LA80_1 >= LBRACK && LA80_1 <= LCURLY)||LA80_1==LONGINT||(LA80_1 >= LPAREN && LA80_1 <= MINUS)||LA80_1==NAME||LA80_1==NOT||LA80_1==PLUS||LA80_1==STRING||LA80_1==TILDE) ) {
                            alt80=1;
                        }
                    }
                    switch (alt80) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:386:19: PERCENT test
                            {
                            PERCENT260=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_atom3703);  
                            stream_PERCENT.add(PERCENT260);


                            pushFollow(FOLLOW_test_in_atom3705);
                            test261=test();

                            state._fsp--;

                            stream_test.add(test261.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id1, test
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 386:34: -> ^( VALUETYPE[$id1] DOUBLE_TYPE $id1 ( test )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:386:37: ^( VALUETYPE[$id1] DOUBLE_TYPE $id1 ( test )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUETYPE, id1)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(DOUBLE_TYPE, "DOUBLE_TYPE")
                        );

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:386:72: ( test )?
                        if ( stream_test.hasNext() ) {
                            adaptor.addChild(root_1, stream_test.nextTree());

                        }
                        stream_test.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 10 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:388:8: id1= STRING ( PERCENT string_argument )?
                    {
                    id1=(Token)match(input,STRING,FOLLOW_STRING_in_atom3739);  
                    stream_STRING.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:388:19: ( PERCENT string_argument )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==PERCENT) ) {
                        int LA81_1 = input.LA(2);

                        if ( (LA81_1==LPAREN) ) {
                            alt81=1;
                        }
                    }
                    switch (alt81) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:388:20: PERCENT string_argument
                            {
                            PERCENT262=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_atom3742);  
                            stream_PERCENT.add(PERCENT262);


                            pushFollow(FOLLOW_string_argument_in_atom3744);
                            string_argument263=string_argument();

                            state._fsp--;

                            stream_string_argument.add(string_argument263.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: string_argument, id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 388:47: -> ^( VALUETYPE[$id1] STRING_TYPE $id1 ( string_argument )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:388:50: ^( VALUETYPE[$id1] STRING_TYPE $id1 ( string_argument )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUETYPE, id1)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(STRING_TYPE, "STRING_TYPE")
                        );

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:388:85: ( string_argument )?
                        if ( stream_string_argument.hasNext() ) {
                            adaptor.addChild(root_1, stream_string_argument.nextTree());

                        }
                        stream_string_argument.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "atom"


    public static class string_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:391:1: string_argument : ( LPAREN !) ( arglist ) ( RPAREN !) ;
    public final PythonProvenanceParser.string_argument_return string_argument() throws RecognitionException {
        PythonProvenanceParser.string_argument_return retval = new PythonProvenanceParser.string_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LPAREN264=null;
        Token RPAREN266=null;
        PythonProvenanceParser.arglist_return arglist265 =null;


        Object LPAREN264_tree=null;
        Object RPAREN266_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:392:3: ( ( LPAREN !) ( arglist ) ( RPAREN !) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:392:5: ( LPAREN !) ( arglist ) ( RPAREN !)
            {
            root_0 = (Object)adaptor.nil();


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:392:5: ( LPAREN !)
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:392:6: LPAREN !
            {
            LPAREN264=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_string_argument3779); 

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:392:15: ( arglist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:392:16: arglist
            {
            pushFollow(FOLLOW_arglist_in_string_argument3784);
            arglist265=arglist();

            state._fsp--;

            adaptor.addChild(root_0, arglist265.getTree());

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:392:25: ( RPAREN !)
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:392:26: RPAREN !
            {
            RPAREN266=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_string_argument3788); 

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_argument"


    public static class listmaker_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "listmaker"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:395:1: listmaker : ( list_arguments ( list_for )? RBRACK -> ^( LISTCOMPREHENSION_CMD list_arguments ( list_for )? ) | RBRACK !);
    public final PythonProvenanceParser.listmaker_return listmaker() throws RecognitionException {
        PythonProvenanceParser.listmaker_return retval = new PythonProvenanceParser.listmaker_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RBRACK269=null;
        Token RBRACK270=null;
        PythonProvenanceParser.list_arguments_return list_arguments267 =null;

        PythonProvenanceParser.list_for_return list_for268 =null;


        Object RBRACK269_tree=null;
        Object RBRACK270_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleSubtreeStream stream_list_for=new RewriteRuleSubtreeStream(adaptor,"rule list_for");
        RewriteRuleSubtreeStream stream_list_arguments=new RewriteRuleSubtreeStream(adaptor,"rule list_arguments");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:395:11: ( list_arguments ( list_for )? RBRACK -> ^( LISTCOMPREHENSION_CMD list_arguments ( list_for )? ) | RBRACK !)
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==BACKQUOTE||LA84_0==DOTTED_NAME||LA84_0==FLOAT||LA84_0==INT||(LA84_0 >= LBRACK && LA84_0 <= LCURLY)||LA84_0==LONGINT||(LA84_0 >= LPAREN && LA84_0 <= MINUS)||LA84_0==NAME||LA84_0==NOT||LA84_0==PLUS||LA84_0==STRING||LA84_0==TILDE) ) {
                alt84=1;
            }
            else if ( (LA84_0==RBRACK) ) {
                alt84=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }
            switch (alt84) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:395:14: list_arguments ( list_for )? RBRACK
                    {
                    pushFollow(FOLLOW_list_arguments_in_listmaker3804);
                    list_arguments267=list_arguments();

                    state._fsp--;

                    stream_list_arguments.add(list_arguments267.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:395:29: ( list_for )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==137) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:395:29: list_for
                            {
                            pushFollow(FOLLOW_list_for_in_listmaker3806);
                            list_for268=list_for();

                            state._fsp--;

                            stream_list_for.add(list_for268.getTree());

                            }
                            break;

                    }


                    RBRACK269=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_listmaker3809);  
                    stream_RBRACK.add(RBRACK269);


                    // AST REWRITE
                    // elements: list_for, list_arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 395:46: -> ^( LISTCOMPREHENSION_CMD list_arguments ( list_for )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:395:49: ^( LISTCOMPREHENSION_CMD list_arguments ( list_for )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(LISTCOMPREHENSION_CMD, "LISTCOMPREHENSION_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_list_arguments.nextTree());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:395:88: ( list_for )?
                        if ( stream_list_for.hasNext() ) {
                            adaptor.addChild(root_1, stream_list_for.nextTree());

                        }
                        stream_list_for.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:396:6: RBRACK !
                    {
                    root_0 = (Object)adaptor.nil();


                    RBRACK270=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_listmaker3827); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "listmaker"


    public static class list_arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_arguments"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:399:1: list_arguments : list_argument ( COMMA list_argument )* -> ^( LIST_ARGS ( list_argument )+ ) ;
    public final PythonProvenanceParser.list_arguments_return list_arguments() throws RecognitionException {
        PythonProvenanceParser.list_arguments_return retval = new PythonProvenanceParser.list_arguments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA272=null;
        PythonProvenanceParser.list_argument_return list_argument271 =null;

        PythonProvenanceParser.list_argument_return list_argument273 =null;


        Object COMMA272_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_list_argument=new RewriteRuleSubtreeStream(adaptor,"rule list_argument");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:399:15: ( list_argument ( COMMA list_argument )* -> ^( LIST_ARGS ( list_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:399:17: list_argument ( COMMA list_argument )*
            {
            pushFollow(FOLLOW_list_argument_in_list_arguments3844);
            list_argument271=list_argument();

            state._fsp--;

            stream_list_argument.add(list_argument271.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:399:31: ( COMMA list_argument )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:399:32: COMMA list_argument
            	    {
            	    COMMA272=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_arguments3847);  
            	    stream_COMMA.add(COMMA272);


            	    pushFollow(FOLLOW_list_argument_in_list_arguments3849);
            	    list_argument273=list_argument();

            	    state._fsp--;

            	    stream_list_argument.add(list_argument273.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            // AST REWRITE
            // elements: list_argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:54: -> ^( LIST_ARGS ( list_argument )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:399:57: ^( LIST_ARGS ( list_argument )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LIST_ARGS, "LIST_ARGS")
                , root_1);

                if ( !(stream_list_argument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_list_argument.hasNext() ) {
                    adaptor.addChild(root_1, stream_list_argument.nextTree());

                }
                stream_list_argument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_arguments"


    public static class list_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:402:1: list_argument : testlist ;
    public final PythonProvenanceParser.list_argument_return list_argument() throws RecognitionException {
        PythonProvenanceParser.list_argument_return retval = new PythonProvenanceParser.list_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist274 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:403:2: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:403:4: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_list_argument3874);
            testlist274=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist274.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_argument"


    public static class dictmaker_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dictmaker"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:406:1: dictmaker : ( dict_arguments RCURLY -> ^( DICTIONARY_CMD dict_arguments ) | RCURLY !);
    public final PythonProvenanceParser.dictmaker_return dictmaker() throws RecognitionException {
        PythonProvenanceParser.dictmaker_return retval = new PythonProvenanceParser.dictmaker_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RCURLY276=null;
        Token RCURLY277=null;
        PythonProvenanceParser.dict_arguments_return dict_arguments275 =null;


        Object RCURLY276_tree=null;
        Object RCURLY277_tree=null;
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_dict_arguments=new RewriteRuleSubtreeStream(adaptor,"rule dict_arguments");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:406:11: ( dict_arguments RCURLY -> ^( DICTIONARY_CMD dict_arguments ) | RCURLY !)
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==BACKQUOTE||LA86_0==DOTTED_NAME||LA86_0==FLOAT||LA86_0==INT||(LA86_0 >= LBRACK && LA86_0 <= LCURLY)||LA86_0==LONGINT||(LA86_0 >= LPAREN && LA86_0 <= MINUS)||LA86_0==NAME||LA86_0==NOT||LA86_0==PLUS||LA86_0==STRING||LA86_0==TILDE) ) {
                alt86=1;
            }
            else if ( (LA86_0==RCURLY) ) {
                alt86=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }
            switch (alt86) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:406:13: dict_arguments RCURLY
                    {
                    pushFollow(FOLLOW_dict_arguments_in_dictmaker3885);
                    dict_arguments275=dict_arguments();

                    state._fsp--;

                    stream_dict_arguments.add(dict_arguments275.getTree());

                    RCURLY276=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_dictmaker3888);  
                    stream_RCURLY.add(RCURLY276);


                    // AST REWRITE
                    // elements: dict_arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 406:36: -> ^( DICTIONARY_CMD dict_arguments )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:406:39: ^( DICTIONARY_CMD dict_arguments )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DICTIONARY_CMD, "DICTIONARY_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_dict_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:407:5: RCURLY !
                    {
                    root_0 = (Object)adaptor.nil();


                    RCURLY277=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_dictmaker3902); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dictmaker"


    public static class dict_arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dict_arguments"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:410:1: dict_arguments : dict_argument COLON dict_argument ( options {k=2; } : COMMA dict_argument COLON dict_argument )* ( COMMA )? -> ^( DICT_ARGS ( dict_argument )+ ) ;
    public final PythonProvenanceParser.dict_arguments_return dict_arguments() throws RecognitionException {
        PythonProvenanceParser.dict_arguments_return retval = new PythonProvenanceParser.dict_arguments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON279=null;
        Token COMMA281=null;
        Token COLON283=null;
        Token COMMA285=null;
        PythonProvenanceParser.dict_argument_return dict_argument278 =null;

        PythonProvenanceParser.dict_argument_return dict_argument280 =null;

        PythonProvenanceParser.dict_argument_return dict_argument282 =null;

        PythonProvenanceParser.dict_argument_return dict_argument284 =null;


        Object COLON279_tree=null;
        Object COMMA281_tree=null;
        Object COLON283_tree=null;
        Object COMMA285_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_dict_argument=new RewriteRuleSubtreeStream(adaptor,"rule dict_argument");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:410:15: ( dict_argument COLON dict_argument ( options {k=2; } : COMMA dict_argument COLON dict_argument )* ( COMMA )? -> ^( DICT_ARGS ( dict_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:410:17: dict_argument COLON dict_argument ( options {k=2; } : COMMA dict_argument COLON dict_argument )* ( COMMA )?
            {
            pushFollow(FOLLOW_dict_argument_in_dict_arguments3931);
            dict_argument278=dict_argument();

            state._fsp--;

            stream_dict_argument.add(dict_argument278.getTree());

            COLON279=(Token)match(input,COLON,FOLLOW_COLON_in_dict_arguments3933);  
            stream_COLON.add(COLON279);


            pushFollow(FOLLOW_dict_argument_in_dict_arguments3935);
            dict_argument280=dict_argument();

            state._fsp--;

            stream_dict_argument.add(dict_argument280.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:410:51: ( options {k=2; } : COMMA dict_argument COLON dict_argument )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==COMMA) ) {
                    int LA87_1 = input.LA(2);

                    if ( (LA87_1==BACKQUOTE||LA87_1==DOTTED_NAME||LA87_1==FLOAT||LA87_1==INT||(LA87_1 >= LBRACK && LA87_1 <= LCURLY)||LA87_1==LONGINT||(LA87_1 >= LPAREN && LA87_1 <= MINUS)||LA87_1==NAME||LA87_1==NOT||LA87_1==PLUS||LA87_1==STRING||LA87_1==TILDE) ) {
                        alt87=1;
                    }


                }


                switch (alt87) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:410:67: COMMA dict_argument COLON dict_argument
            	    {
            	    COMMA281=(Token)match(input,COMMA,FOLLOW_COMMA_in_dict_arguments3945);  
            	    stream_COMMA.add(COMMA281);


            	    pushFollow(FOLLOW_dict_argument_in_dict_arguments3947);
            	    dict_argument282=dict_argument();

            	    state._fsp--;

            	    stream_dict_argument.add(dict_argument282.getTree());

            	    COLON283=(Token)match(input,COLON,FOLLOW_COLON_in_dict_arguments3949);  
            	    stream_COLON.add(COLON283);


            	    pushFollow(FOLLOW_dict_argument_in_dict_arguments3951);
            	    dict_argument284=dict_argument();

            	    state._fsp--;

            	    stream_dict_argument.add(dict_argument284.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:410:109: ( COMMA )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==COMMA) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:410:110: COMMA
                    {
                    COMMA285=(Token)match(input,COMMA,FOLLOW_COMMA_in_dict_arguments3956);  
                    stream_COMMA.add(COMMA285);


                    }
                    break;

            }


            // AST REWRITE
            // elements: dict_argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:118: -> ^( DICT_ARGS ( dict_argument )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:410:121: ^( DICT_ARGS ( dict_argument )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DICT_ARGS, "DICT_ARGS")
                , root_1);

                if ( !(stream_dict_argument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dict_argument.hasNext() ) {
                    adaptor.addChild(root_1, stream_dict_argument.nextTree());

                }
                stream_dict_argument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dict_arguments"


    public static class dict_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dict_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:413:1: dict_argument : testlist ;
    public final PythonProvenanceParser.dict_argument_return dict_argument() throws RecognitionException {
        PythonProvenanceParser.dict_argument_return retval = new PythonProvenanceParser.dict_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist286 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:414:2: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:414:4: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_dict_argument3997);
            testlist286=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist286.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dict_argument"


    public static class testlist_gexp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "testlist_gexp"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:417:1: testlist_gexp : test ( PERCENT )? ( ( options {k=2; } : COMMA ! test )* ( COMMA !)? | gen_for ) ;
    public final PythonProvenanceParser.testlist_gexp_return testlist_gexp() throws RecognitionException {
        PythonProvenanceParser.testlist_gexp_return retval = new PythonProvenanceParser.testlist_gexp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERCENT288=null;
        Token COMMA289=null;
        Token COMMA291=null;
        PythonProvenanceParser.test_return test287 =null;

        PythonProvenanceParser.test_return test290 =null;

        PythonProvenanceParser.gen_for_return gen_for292 =null;


        Object PERCENT288_tree=null;
        Object COMMA289_tree=null;
        Object COMMA291_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:5: ( test ( PERCENT )? ( ( options {k=2; } : COMMA ! test )* ( COMMA !)? | gen_for ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:7: test ( PERCENT )? ( ( options {k=2; } : COMMA ! test )* ( COMMA !)? | gen_for )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_test_in_testlist_gexp4011);
            test287=test();

            state._fsp--;

            adaptor.addChild(root_0, test287.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:12: ( PERCENT )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==PERCENT) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:13: PERCENT
                    {
                    PERCENT288=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_testlist_gexp4014); 
                    PERCENT288_tree = 
                    (Object)adaptor.create(PERCENT288)
                    ;
                    adaptor.addChild(root_0, PERCENT288_tree);


                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:23: ( ( options {k=2; } : COMMA ! test )* ( COMMA !)? | gen_for )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==COMMA||LA92_0==RPAREN) ) {
                alt92=1;
            }
            else if ( (LA92_0==137) ) {
                alt92=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:25: ( options {k=2; } : COMMA ! test )* ( COMMA !)?
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:25: ( options {k=2; } : COMMA ! test )*
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==COMMA) ) {
                            int LA90_1 = input.LA(2);

                            if ( (LA90_1==BACKQUOTE||LA90_1==DOTTED_NAME||LA90_1==FLOAT||LA90_1==INT||(LA90_1 >= LBRACK && LA90_1 <= LCURLY)||LA90_1==LONGINT||(LA90_1 >= LPAREN && LA90_1 <= MINUS)||LA90_1==NAME||LA90_1==NOT||LA90_1==PLUS||LA90_1==STRING||LA90_1==TILDE) ) {
                                alt90=1;
                            }


                        }


                        switch (alt90) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:42: COMMA ! test
                    	    {
                    	    COMMA289=(Token)match(input,COMMA,FOLLOW_COMMA_in_testlist_gexp4029); 

                    	    pushFollow(FOLLOW_test_in_testlist_gexp4032);
                    	    test290=test();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, test290.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop90;
                        }
                    } while (true);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:56: ( COMMA !)?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==COMMA) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:418:57: COMMA !
                            {
                            COMMA291=(Token)match(input,COMMA,FOLLOW_COMMA_in_testlist_gexp4037); 

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:419:14: gen_for
                    {
                    pushFollow(FOLLOW_gen_for_in_testlist_gexp4056);
                    gen_for292=gen_for();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_for292.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "testlist_gexp"


    public static class trailer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trailer"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:435:1: trailer : ( LPAREN ! inner_trailer | LBRACK ! subscriptlist RBRACK !);
    public final PythonProvenanceParser.trailer_return trailer() throws RecognitionException {
        PythonProvenanceParser.trailer_return retval = new PythonProvenanceParser.trailer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LPAREN293=null;
        Token LBRACK295=null;
        Token RBRACK297=null;
        PythonProvenanceParser.inner_trailer_return inner_trailer294 =null;

        PythonProvenanceParser.subscriptlist_return subscriptlist296 =null;


        Object LPAREN293_tree=null;
        Object LBRACK295_tree=null;
        Object RBRACK297_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:435:9: ( LPAREN ! inner_trailer | LBRACK ! subscriptlist RBRACK !)
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==LPAREN) ) {
                alt93=1;
            }
            else if ( (LA93_0==LBRACK) ) {
                alt93=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:435:11: LPAREN ! inner_trailer
                    {
                    root_0 = (Object)adaptor.nil();


                    LPAREN293=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_trailer4096); 

                    pushFollow(FOLLOW_inner_trailer_in_trailer4099);
                    inner_trailer294=inner_trailer();

                    state._fsp--;

                    adaptor.addChild(root_0, inner_trailer294.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:436:4: LBRACK ! subscriptlist RBRACK !
                    {
                    root_0 = (Object)adaptor.nil();


                    LBRACK295=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_trailer4104); 

                    pushFollow(FOLLOW_subscriptlist_in_trailer4107);
                    subscriptlist296=subscriptlist();

                    state._fsp--;

                    adaptor.addChild(root_0, subscriptlist296.getTree());

                    RBRACK297=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_trailer4109); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trailer"


    public static class inner_trailer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inner_trailer"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:440:1: inner_trailer : ( arglist RPAREN -> ^( TRAILER arglist ) | RPAREN -> ^( TRAILER NO_ARGS ) );
    public final PythonProvenanceParser.inner_trailer_return inner_trailer() throws RecognitionException {
        PythonProvenanceParser.inner_trailer_return retval = new PythonProvenanceParser.inner_trailer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RPAREN299=null;
        Token RPAREN300=null;
        PythonProvenanceParser.arglist_return arglist298 =null;


        Object RPAREN299_tree=null;
        Object RPAREN300_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_arglist=new RewriteRuleSubtreeStream(adaptor,"rule arglist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:441:2: ( arglist RPAREN -> ^( TRAILER arglist ) | RPAREN -> ^( TRAILER NO_ARGS ) )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==BACKQUOTE||LA94_0==DOTTED_NAME||LA94_0==DOUBLESTAR||LA94_0==FLOAT||LA94_0==INT||(LA94_0 >= LBRACK && LA94_0 <= LCURLY)||LA94_0==LONGINT||(LA94_0 >= LPAREN && LA94_0 <= MINUS)||LA94_0==NAME||LA94_0==NOT||LA94_0==PLUS||LA94_0==STAR||LA94_0==STRING||LA94_0==TILDE) ) {
                alt94=1;
            }
            else if ( (LA94_0==RPAREN) ) {
                alt94=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:441:4: arglist RPAREN
                    {
                    pushFollow(FOLLOW_arglist_in_inner_trailer4124);
                    arglist298=arglist();

                    state._fsp--;

                    stream_arglist.add(arglist298.getTree());

                    RPAREN299=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_inner_trailer4126);  
                    stream_RPAREN.add(RPAREN299);


                    // AST REWRITE
                    // elements: arglist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 441:19: -> ^( TRAILER arglist )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:441:22: ^( TRAILER arglist )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TRAILER, "TRAILER")
                        , root_1);

                        adaptor.addChild(root_1, stream_arglist.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:442:4: RPAREN
                    {
                    RPAREN300=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_inner_trailer4140);  
                    stream_RPAREN.add(RPAREN300);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 442:11: -> ^( TRAILER NO_ARGS )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:442:14: ^( TRAILER NO_ARGS )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TRAILER, "TRAILER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(NO_ARGS, "NO_ARGS")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inner_trailer"


    public static class subscriptlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subscriptlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:451:1: subscriptlist : subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )? -> ^( SUBSCRIPTS ( subscript )+ ) ;
    public final PythonProvenanceParser.subscriptlist_return subscriptlist() throws RecognitionException {
        PythonProvenanceParser.subscriptlist_return retval = new PythonProvenanceParser.subscriptlist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA302=null;
        Token COMMA304=null;
        PythonProvenanceParser.subscript_return subscript301 =null;

        PythonProvenanceParser.subscript_return subscript303 =null;


        Object COMMA302_tree=null;
        Object COMMA304_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_subscript=new RewriteRuleSubtreeStream(adaptor,"rule subscript");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:451:15: ( subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )? -> ^( SUBSCRIPTS ( subscript )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:451:17: subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )?
            {
            pushFollow(FOLLOW_subscript_in_subscriptlist4169);
            subscript301=subscript();

            state._fsp--;

            stream_subscript.add(subscript301.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:451:27: ( options {greedy=true; } : COMMA subscript )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==COMMA) ) {
                    int LA95_1 = input.LA(2);

                    if ( (LA95_1==BACKQUOTE||LA95_1==DOTTED_NAME||LA95_1==FLOAT||LA95_1==INT||(LA95_1 >= LBRACK && LA95_1 <= LCURLY)||LA95_1==LONGINT||(LA95_1 >= LPAREN && LA95_1 <= MINUS)||LA95_1==NAME||LA95_1==NOT||LA95_1==PLUS||LA95_1==STRING||LA95_1==TILDE) ) {
                        alt95=1;
                    }


                }


                switch (alt95) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:451:51: COMMA subscript
            	    {
            	    COMMA302=(Token)match(input,COMMA,FOLLOW_COMMA_in_subscriptlist4179);  
            	    stream_COMMA.add(COMMA302);


            	    pushFollow(FOLLOW_subscript_in_subscriptlist4181);
            	    subscript303=subscript();

            	    state._fsp--;

            	    stream_subscript.add(subscript303.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:451:69: ( COMMA )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==COMMA) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:451:70: COMMA
                    {
                    COMMA304=(Token)match(input,COMMA,FOLLOW_COMMA_in_subscriptlist4186);  
                    stream_COMMA.add(COMMA304);


                    }
                    break;

            }


            // AST REWRITE
            // elements: subscript
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:78: -> ^( SUBSCRIPTS ( subscript )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:451:81: ^( SUBSCRIPTS ( subscript )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUBSCRIPTS, "SUBSCRIPTS")
                , root_1);

                if ( !(stream_subscript.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_subscript.hasNext() ) {
                    adaptor.addChild(root_1, stream_subscript.nextTree());

                }
                stream_subscript.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subscriptlist"


    public static class subscript_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subscript"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:454:1: subscript : test ;
    public final PythonProvenanceParser.subscript_return subscript() throws RecognitionException {
        PythonProvenanceParser.subscript_return retval = new PythonProvenanceParser.subscript_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.test_return test305 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:454:11: ( test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:455:11: test
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_test_in_subscript4231);
            test305=test();

            state._fsp--;

            adaptor.addChild(root_0, test305.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subscript"


    public static class exprlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:458:1: exprlist : expr ( options {k=2; } : COMMA ! expr )* ( COMMA !)? ;
    public final PythonProvenanceParser.exprlist_return exprlist() throws RecognitionException {
        PythonProvenanceParser.exprlist_return retval = new PythonProvenanceParser.exprlist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA307=null;
        Token COMMA309=null;
        PythonProvenanceParser.expr_return expr306 =null;

        PythonProvenanceParser.expr_return expr308 =null;


        Object COMMA307_tree=null;
        Object COMMA309_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:458:10: ( expr ( options {k=2; } : COMMA ! expr )* ( COMMA !)? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:458:12: expr ( options {k=2; } : COMMA ! expr )* ( COMMA !)?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_exprlist4250);
            expr306=expr();

            state._fsp--;

            adaptor.addChild(root_0, expr306.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:458:17: ( options {k=2; } : COMMA ! expr )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    int LA97_1 = input.LA(2);

                    if ( (LA97_1==BACKQUOTE||LA97_1==DOTTED_NAME||LA97_1==FLOAT||LA97_1==INT||(LA97_1 >= LBRACK && LA97_1 <= LCURLY)||LA97_1==LONGINT||(LA97_1 >= LPAREN && LA97_1 <= MINUS)||LA97_1==NAME||LA97_1==PLUS||LA97_1==STRING||LA97_1==TILDE) ) {
                        alt97=1;
                    }


                }


                switch (alt97) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:458:34: COMMA ! expr
            	    {
            	    COMMA307=(Token)match(input,COMMA,FOLLOW_COMMA_in_exprlist4261); 

            	    pushFollow(FOLLOW_expr_in_exprlist4264);
            	    expr308=expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expr308.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:458:48: ( COMMA !)?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==COMMA) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:458:49: COMMA !
                    {
                    COMMA309=(Token)match(input,COMMA,FOLLOW_COMMA_in_exprlist4269); 

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprlist"


    public static class testlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "testlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:461:1: testlist : test ;
    public final PythonProvenanceParser.testlist_return testlist() throws RecognitionException {
        PythonProvenanceParser.testlist_return retval = new PythonProvenanceParser.testlist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.test_return test310 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:462:5: ( test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:462:7: test
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_test_in_testlist4294);
            test310=test();

            state._fsp--;

            adaptor.addChild(root_0, test310.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "testlist"


    public static class classdef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classdef"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:1: classdef : ref= 'class' id1= NAME ( LPAREN ( testlist )? RPAREN )? COLON suite -> ^( CLASS_CMD[$ref] $id1 suite ( testlist )? ) ;
    public final PythonProvenanceParser.classdef_return classdef() throws RecognitionException {
        PythonProvenanceParser.classdef_return retval = new PythonProvenanceParser.classdef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token id1=null;
        Token LPAREN311=null;
        Token RPAREN313=null;
        Token COLON314=null;
        PythonProvenanceParser.testlist_return testlist312 =null;

        PythonProvenanceParser.suite_return suite315 =null;


        Object ref_tree=null;
        Object id1_tree=null;
        Object LPAREN311_tree=null;
        Object RPAREN313_tree=null;
        Object COLON314_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:9: (ref= 'class' id1= NAME ( LPAREN ( testlist )? RPAREN )? COLON suite -> ^( CLASS_CMD[$ref] $id1 suite ( testlist )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:11: ref= 'class' id1= NAME ( LPAREN ( testlist )? RPAREN )? COLON suite
            {
            ref=(Token)match(input,128,FOLLOW_128_in_classdef4309);  
            stream_128.add(ref);


            id1=(Token)match(input,NAME,FOLLOW_NAME_in_classdef4313);  
            stream_NAME.add(id1);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:32: ( LPAREN ( testlist )? RPAREN )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==LPAREN) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:33: LPAREN ( testlist )? RPAREN
                    {
                    LPAREN311=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_classdef4316);  
                    stream_LPAREN.add(LPAREN311);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:40: ( testlist )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==BACKQUOTE||LA99_0==DOTTED_NAME||LA99_0==FLOAT||LA99_0==INT||(LA99_0 >= LBRACK && LA99_0 <= LCURLY)||LA99_0==LONGINT||(LA99_0 >= LPAREN && LA99_0 <= MINUS)||LA99_0==NAME||LA99_0==NOT||LA99_0==PLUS||LA99_0==STRING||LA99_0==TILDE) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:40: testlist
                            {
                            pushFollow(FOLLOW_testlist_in_classdef4318);
                            testlist312=testlist();

                            state._fsp--;

                            stream_testlist.add(testlist312.getTree());

                            }
                            break;

                    }


                    RPAREN313=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_classdef4321);  
                    stream_RPAREN.add(RPAREN313);


                    }
                    break;

            }


            COLON314=(Token)match(input,COLON,FOLLOW_COLON_in_classdef4325);  
            stream_COLON.add(COLON314);


            pushFollow(FOLLOW_suite_in_classdef4327);
            suite315=suite();

            state._fsp--;

            stream_suite.add(suite315.getTree());

            // AST REWRITE
            // elements: id1, testlist, suite
            // token labels: id1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:71: -> ^( CLASS_CMD[$ref] $id1 suite ( testlist )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:74: ^( CLASS_CMD[$ref] $id1 suite ( testlist )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());

                adaptor.addChild(root_1, stream_suite.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:465:103: ( testlist )?
                if ( stream_testlist.hasNext() ) {
                    adaptor.addChild(root_1, stream_testlist.nextTree());

                }
                stream_testlist.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classdef"


    public static class arglist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arglist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:1: arglist : ( argument ( ASSIGN sub_argument )? ( COMMA argument ( ASSIGN sub_argument )? )* -> ^( ARGUMENTS ( argument )+ ) | STAR test ( COMMA DOUBLESTAR test )? | DOUBLESTAR test );
    public final PythonProvenanceParser.arglist_return arglist() throws RecognitionException {
        PythonProvenanceParser.arglist_return retval = new PythonProvenanceParser.arglist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSIGN317=null;
        Token COMMA319=null;
        Token ASSIGN321=null;
        Token STAR323=null;
        Token COMMA325=null;
        Token DOUBLESTAR326=null;
        Token DOUBLESTAR328=null;
        PythonProvenanceParser.argument_return argument316 =null;

        PythonProvenanceParser.sub_argument_return sub_argument318 =null;

        PythonProvenanceParser.argument_return argument320 =null;

        PythonProvenanceParser.sub_argument_return sub_argument322 =null;

        PythonProvenanceParser.test_return test324 =null;

        PythonProvenanceParser.test_return test327 =null;

        PythonProvenanceParser.test_return test329 =null;


        Object ASSIGN317_tree=null;
        Object COMMA319_tree=null;
        Object ASSIGN321_tree=null;
        Object STAR323_tree=null;
        Object COMMA325_tree=null;
        Object DOUBLESTAR326_tree=null;
        Object DOUBLESTAR328_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_argument=new RewriteRuleSubtreeStream(adaptor,"rule argument");
        RewriteRuleSubtreeStream stream_sub_argument=new RewriteRuleSubtreeStream(adaptor,"rule sub_argument");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:9: ( argument ( ASSIGN sub_argument )? ( COMMA argument ( ASSIGN sub_argument )? )* -> ^( ARGUMENTS ( argument )+ ) | STAR test ( COMMA DOUBLESTAR test )? | DOUBLESTAR test )
            int alt105=3;
            switch ( input.LA(1) ) {
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case MINUS:
            case NAME:
            case NOT:
            case PLUS:
            case STRING:
            case TILDE:
                {
                alt105=1;
                }
                break;
            case STAR:
                {
                alt105=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt105=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }

            switch (alt105) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:11: argument ( ASSIGN sub_argument )? ( COMMA argument ( ASSIGN sub_argument )? )*
                    {
                    pushFollow(FOLLOW_argument_in_arglist4359);
                    argument316=argument();

                    state._fsp--;

                    stream_argument.add(argument316.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:20: ( ASSIGN sub_argument )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==ASSIGN) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:21: ASSIGN sub_argument
                            {
                            ASSIGN317=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arglist4362);  
                            stream_ASSIGN.add(ASSIGN317);


                            pushFollow(FOLLOW_sub_argument_in_arglist4364);
                            sub_argument318=sub_argument();

                            state._fsp--;

                            stream_sub_argument.add(sub_argument318.getTree());

                            }
                            break;

                    }


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:43: ( COMMA argument ( ASSIGN sub_argument )? )*
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);

                        if ( (LA103_0==COMMA) ) {
                            alt103=1;
                        }


                        switch (alt103) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:44: COMMA argument ( ASSIGN sub_argument )?
                    	    {
                    	    COMMA319=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist4369);  
                    	    stream_COMMA.add(COMMA319);


                    	    pushFollow(FOLLOW_argument_in_arglist4371);
                    	    argument320=argument();

                    	    state._fsp--;

                    	    stream_argument.add(argument320.getTree());

                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:59: ( ASSIGN sub_argument )?
                    	    int alt102=2;
                    	    int LA102_0 = input.LA(1);

                    	    if ( (LA102_0==ASSIGN) ) {
                    	        alt102=1;
                    	    }
                    	    switch (alt102) {
                    	        case 1 :
                    	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:60: ASSIGN sub_argument
                    	            {
                    	            ASSIGN321=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arglist4374);  
                    	            stream_ASSIGN.add(ASSIGN321);


                    	            pushFollow(FOLLOW_sub_argument_in_arglist4376);
                    	            sub_argument322=sub_argument();

                    	            state._fsp--;

                    	            stream_sub_argument.add(sub_argument322.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop103;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: argument
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 468:84: -> ^( ARGUMENTS ( argument )+ )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:468:87: ^( ARGUMENTS ( argument )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARGUMENTS, "ARGUMENTS")
                        , root_1);

                        if ( !(stream_argument.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_argument.hasNext() ) {
                            adaptor.addChild(root_1, stream_argument.nextTree());

                        }
                        stream_argument.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:469:13: STAR test ( COMMA DOUBLESTAR test )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR323=(Token)match(input,STAR,FOLLOW_STAR_in_arglist4403); 
                    STAR323_tree = 
                    (Object)adaptor.create(STAR323)
                    ;
                    adaptor.addChild(root_0, STAR323_tree);


                    pushFollow(FOLLOW_test_in_arglist4405);
                    test324=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test324.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:469:23: ( COMMA DOUBLESTAR test )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==COMMA) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:469:24: COMMA DOUBLESTAR test
                            {
                            COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist4408); 
                            COMMA325_tree = 
                            (Object)adaptor.create(COMMA325)
                            ;
                            adaptor.addChild(root_0, COMMA325_tree);


                            DOUBLESTAR326=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist4410); 
                            DOUBLESTAR326_tree = 
                            (Object)adaptor.create(DOUBLESTAR326)
                            ;
                            adaptor.addChild(root_0, DOUBLESTAR326_tree);


                            pushFollow(FOLLOW_test_in_arglist4412);
                            test327=test();

                            state._fsp--;

                            adaptor.addChild(root_0, test327.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:470:13: DOUBLESTAR test
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLESTAR328=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist4428); 
                    DOUBLESTAR328_tree = 
                    (Object)adaptor.create(DOUBLESTAR328)
                    ;
                    adaptor.addChild(root_0, DOUBLESTAR328_tree);


                    pushFollow(FOLLOW_test_in_arglist4430);
                    test329=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test329.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arglist"


    public static class print_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "print_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:473:1: print_argument : testlist ;
    public final PythonProvenanceParser.print_argument_return print_argument() throws RecognitionException {
        PythonProvenanceParser.print_argument_return retval = new PythonProvenanceParser.print_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist330 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:474:2: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:474:4: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_print_argument4448);
            testlist330=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist330.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "print_argument"


    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:477:1: argument : testlist ;
    public final PythonProvenanceParser.argument_return argument() throws RecognitionException {
        PythonProvenanceParser.argument_return retval = new PythonProvenanceParser.argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist331 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:477:10: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:477:12: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_argument4459);
            testlist331=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist331.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument"


    public static class sub_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sub_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:480:1: sub_argument : testlist ;
    public final PythonProvenanceParser.sub_argument_return sub_argument() throws RecognitionException {
        PythonProvenanceParser.sub_argument_return retval = new PythonProvenanceParser.sub_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist332 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:481:2: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:481:4: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_sub_argument4488);
            testlist332=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist332.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sub_argument"


    public static class list_iter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_iter"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:484:1: list_iter : ( list_for | list_if );
    public final PythonProvenanceParser.list_iter_return list_iter() throws RecognitionException {
        PythonProvenanceParser.list_iter_return retval = new PythonProvenanceParser.list_iter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.list_for_return list_for333 =null;

        PythonProvenanceParser.list_if_return list_if334 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:484:11: ( list_for | list_if )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==137) ) {
                alt106=1;
            }
            else if ( (LA106_0==IF) ) {
                alt106=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }
            switch (alt106) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:484:13: list_for
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_list_for_in_list_iter4498);
                    list_for333=list_for();

                    state._fsp--;

                    adaptor.addChild(root_0, list_for333.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:485:13: list_if
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_list_if_in_list_iter4512);
                    list_if334=list_if();

                    state._fsp--;

                    adaptor.addChild(root_0, list_if334.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_iter"


    public static class list_for_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_for"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:488:1: list_for : 'for' exprlist 'in' testlist ( list_iter )? -> ^( LISTLOOPCONTROL_CMD exprlist testlist ( list_iter )? ) ;
    public final PythonProvenanceParser.list_for_return list_for() throws RecognitionException {
        PythonProvenanceParser.list_for_return retval = new PythonProvenanceParser.list_for_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal335=null;
        Token string_literal337=null;
        PythonProvenanceParser.exprlist_return exprlist336 =null;

        PythonProvenanceParser.testlist_return testlist338 =null;

        PythonProvenanceParser.list_iter_return list_iter339 =null;


        Object string_literal335_tree=null;
        Object string_literal337_tree=null;
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_list_iter=new RewriteRuleSubtreeStream(adaptor,"rule list_iter");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:488:10: ( 'for' exprlist 'in' testlist ( list_iter )? -> ^( LISTLOOPCONTROL_CMD exprlist testlist ( list_iter )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:488:12: 'for' exprlist 'in' testlist ( list_iter )?
            {
            string_literal335=(Token)match(input,137,FOLLOW_137_in_list_for4531);  
            stream_137.add(string_literal335);


            pushFollow(FOLLOW_exprlist_in_list_for4533);
            exprlist336=exprlist();

            state._fsp--;

            stream_exprlist.add(exprlist336.getTree());

            string_literal337=(Token)match(input,IN,FOLLOW_IN_in_list_for4535);  
            stream_IN.add(string_literal337);


            pushFollow(FOLLOW_testlist_in_list_for4537);
            testlist338=testlist();

            state._fsp--;

            stream_testlist.add(testlist338.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:488:41: ( list_iter )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==IF||LA107_0==137) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:488:42: list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_for4540);
                    list_iter339=list_iter();

                    state._fsp--;

                    stream_list_iter.add(list_iter339.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: testlist, exprlist, list_iter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 488:54: -> ^( LISTLOOPCONTROL_CMD exprlist testlist ( list_iter )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:488:57: ^( LISTLOOPCONTROL_CMD exprlist testlist ( list_iter )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LISTLOOPCONTROL_CMD, "LISTLOOPCONTROL_CMD")
                , root_1);

                adaptor.addChild(root_1, stream_exprlist.nextTree());

                adaptor.addChild(root_1, stream_testlist.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:488:97: ( list_iter )?
                if ( stream_list_iter.hasNext() ) {
                    adaptor.addChild(root_1, stream_list_iter.nextTree());

                }
                stream_list_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_for"


    public static class list_if_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_if"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:491:1: list_if : 'if' test ( list_iter )? -> ^( LISTCONDITION_CMD test ( list_iter )? ) ;
    public final PythonProvenanceParser.list_if_return list_if() throws RecognitionException {
        PythonProvenanceParser.list_if_return retval = new PythonProvenanceParser.list_if_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal340=null;
        PythonProvenanceParser.test_return test341 =null;

        PythonProvenanceParser.list_iter_return list_iter342 =null;


        Object string_literal340_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_list_iter=new RewriteRuleSubtreeStream(adaptor,"rule list_iter");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:491:9: ( 'if' test ( list_iter )? -> ^( LISTCONDITION_CMD test ( list_iter )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:491:11: 'if' test ( list_iter )?
            {
            string_literal340=(Token)match(input,IF,FOLLOW_IF_in_list_if4573);  
            stream_IF.add(string_literal340);


            pushFollow(FOLLOW_test_in_list_if4575);
            test341=test();

            state._fsp--;

            stream_test.add(test341.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:491:21: ( list_iter )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==IF||LA108_0==137) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:491:22: list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_if4578);
                    list_iter342=list_iter();

                    state._fsp--;

                    stream_list_iter.add(list_iter342.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: test, list_iter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:34: -> ^( LISTCONDITION_CMD test ( list_iter )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:491:37: ^( LISTCONDITION_CMD test ( list_iter )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LISTCONDITION_CMD, "LISTCONDITION_CMD")
                , root_1);

                adaptor.addChild(root_1, stream_test.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:491:62: ( list_iter )?
                if ( stream_list_iter.hasNext() ) {
                    adaptor.addChild(root_1, stream_list_iter.nextTree());

                }
                stream_list_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_if"


    public static class gen_iter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "gen_iter"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:494:1: gen_iter : ( gen_for | gen_if );
    public final PythonProvenanceParser.gen_iter_return gen_iter() throws RecognitionException {
        PythonProvenanceParser.gen_iter_return retval = new PythonProvenanceParser.gen_iter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.gen_for_return gen_for343 =null;

        PythonProvenanceParser.gen_if_return gen_if344 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:494:9: ( gen_for | gen_if )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==137) ) {
                alt109=1;
            }
            else if ( (LA109_0==IF) ) {
                alt109=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:494:11: gen_for
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_gen_for_in_gen_iter4607);
                    gen_for343=gen_for();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_for343.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:495:11: gen_if
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_gen_if_in_gen_iter4619);
                    gen_if344=gen_if();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_if344.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "gen_iter"


    public static class gen_for_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "gen_for"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:498:1: gen_for : 'for' exprlist 'in' or_test ( gen_iter )? ;
    public final PythonProvenanceParser.gen_for_return gen_for() throws RecognitionException {
        PythonProvenanceParser.gen_for_return retval = new PythonProvenanceParser.gen_for_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal345=null;
        Token string_literal347=null;
        PythonProvenanceParser.exprlist_return exprlist346 =null;

        PythonProvenanceParser.or_test_return or_test348 =null;

        PythonProvenanceParser.gen_iter_return gen_iter349 =null;


        Object string_literal345_tree=null;
        Object string_literal347_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:498:8: ( 'for' exprlist 'in' or_test ( gen_iter )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:498:10: 'for' exprlist 'in' or_test ( gen_iter )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal345=(Token)match(input,137,FOLLOW_137_in_gen_for4635); 
            string_literal345_tree = 
            (Object)adaptor.create(string_literal345)
            ;
            adaptor.addChild(root_0, string_literal345_tree);


            pushFollow(FOLLOW_exprlist_in_gen_for4637);
            exprlist346=exprlist();

            state._fsp--;

            adaptor.addChild(root_0, exprlist346.getTree());

            string_literal347=(Token)match(input,IN,FOLLOW_IN_in_gen_for4639); 
            string_literal347_tree = 
            (Object)adaptor.create(string_literal347)
            ;
            adaptor.addChild(root_0, string_literal347_tree);


            pushFollow(FOLLOW_or_test_in_gen_for4641);
            or_test348=or_test();

            state._fsp--;

            adaptor.addChild(root_0, or_test348.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:498:38: ( gen_iter )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==IF||LA110_0==137) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:498:38: gen_iter
                    {
                    pushFollow(FOLLOW_gen_iter_in_gen_for4643);
                    gen_iter349=gen_iter();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_iter349.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "gen_for"


    public static class gen_if_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "gen_if"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:501:1: gen_if : 'if' test ( gen_iter )? ;
    public final PythonProvenanceParser.gen_if_return gen_if() throws RecognitionException {
        PythonProvenanceParser.gen_if_return retval = new PythonProvenanceParser.gen_if_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal350=null;
        PythonProvenanceParser.test_return test351 =null;

        PythonProvenanceParser.gen_iter_return gen_iter352 =null;


        Object string_literal350_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:501:7: ( 'if' test ( gen_iter )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:501:9: 'if' test ( gen_iter )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal350=(Token)match(input,IF,FOLLOW_IF_in_gen_if4659); 
            string_literal350_tree = 
            (Object)adaptor.create(string_literal350)
            ;
            adaptor.addChild(root_0, string_literal350_tree);


            pushFollow(FOLLOW_test_in_gen_if4661);
            test351=test();

            state._fsp--;

            adaptor.addChild(root_0, test351.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:501:19: ( gen_iter )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==IF||LA111_0==137) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\PythonProvenance.g:501:19: gen_iter
                    {
                    pushFollow(FOLLOW_gen_iter_in_gen_if4663);
                    gen_iter352=gen_iter();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_iter352.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "gen_if"

    // Delegated rules


 

    public static final BitSet FOLLOW_NEWLINE_in_single_input411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_single_input429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_single_input446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_single_input448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_file_input472 = new BitSet(new long[]{0xC201100020003002L,0xC00024001403B400L,0x000000000007FE8FL});
    public static final BitSet FOLLOW_stmt_in_file_input477 = new BitSet(new long[]{0xC201100020003002L,0xC00024001403B400L,0x000000000007FE8FL});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input502 = new BitSet(new long[]{0xC200100020002000L,0x000024000403B400L});
    public static final BitSet FOLLOW_testlist_in_eval_input507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_decorator_in_decorators532 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AT_in_decorator551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dotted_attr_in_decorator553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000011000L});
    public static final BitSet FOLLOW_LPAREN_in_decorator556 = new BitSet(new long[]{0xC200100120002000L,0x000025100402B400L});
    public static final BitSet FOLLOW_arglist_in_decorator558 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_decorator561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_decorator565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr587 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_DOT_in_dotted_attr590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr592 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_decorators_in_funcdef608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_funcdef613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_funcdef617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_parameters_in_funcdef619 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_funcdef621 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_funcdef623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameters655 = new BitSet(new long[]{0xC200100120002000L,0x000025100402B400L});
    public static final BitSet FOLLOW_varargslist_in_parameters659 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameters663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defparameter_in_varargslist685 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist695 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_defparameter_in_varargslist697 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist716 = new BitSet(new long[]{0x0000000100000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_varargslist738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist740 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist743 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_varargslist836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist838 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist841 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_defparameter888 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ASSIGN_in_defparameter891 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_defparameter893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_stmt919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_stmt_inside_block951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt_inside_block962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_simple_stmt982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_stmt_in_small_stmt995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_print_stmt_in_small_stmt1010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_del_stmt_in_small_stmt1026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pass_stmt_in_small_stmt1044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flow_stmt_in_small_stmt1061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_stmt_in_small_stmt1077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_stmt_in_small_stmt1092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exec_stmt_in_small_stmt1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_stmt_in_small_stmt1126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1141 = new BitSet(new long[]{0x0000000280008442L,0x008002880A004004L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_stmt1152 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_PLUSEQUAL_in_expr_stmt1161 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_MINUSEQUAL_in_expr_stmt1170 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_STAREQUAL_in_expr_stmt1179 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_SLASHEQUAL_in_expr_stmt1188 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_PERCENTEQUAL_in_expr_stmt1197 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_AMPEREQUAL_in_expr_stmt1206 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_VBAREQUAL_in_expr_stmt1215 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_CIRCUMFLEXEQUAL_in_expr_stmt1224 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_LEFTSHIFTEQUAL_in_expr_stmt1233 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_RIGHTSHIFTEQUAL_in_expr_stmt1242 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_DOUBLESTAREQUAL_in_expr_stmt1251 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_DOUBLESLASHEQUAL_in_expr_stmt1260 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRINT_in_print_stmt1292 = new BitSet(new long[]{0xC200100020002002L,0x000024040402B400L});
    public static final BitSet FOLLOW_printlist_in_print_stmt1295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_print_stmt1299 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_printlist_in_print_stmt1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_print_argument_in_printlist1340 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_printlist1351 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_print_argument_in_printlist1353 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_printlist1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_del_stmt1383 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_exprlist_in_del_stmt1385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_pass_stmt1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_flow_stmt1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_flow_stmt1438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_flow_stmt1454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_stmt_in_flow_stmt1468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_break_stmt1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_continue_stmt1509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_return_stmt1534 = new BitSet(new long[]{0xC200100120002002L,0x000025000402B400L});
    public static final BitSet FOLLOW_arglist_in_return_stmt1537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_raise_stmt1569 = new BitSet(new long[]{0xC200100020002002L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_raise_stmt1572 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt1575 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_raise_stmt1577 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt1580 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_raise_stmt1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_name_in_import_stmt1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_from_in_import_stmt1623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_import_name1646 = new BitSet(new long[]{0x0000000020000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dotted_as_names_in_import_name1648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_from_name_in_import_from1680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_from_dotted_name_in_import_from1686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_import_from_name1697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_import_from_name1701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_import_from_name1703 = new BitSet(new long[]{0x0000000020000000L,0x0000010000009000L});
    public static final BitSet FOLLOW_STAR_in_import_from_name1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_names_in_import_from_name1750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_import_from_name1780 = new BitSet(new long[]{0x0000000020000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_import_as_names_in_import_from_name1782 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_import_from_name1784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_import_from_dotted_name1844 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_DOTTED_NAME_in_import_from_dotted_name1848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_import_from_dotted_name1850 = new BitSet(new long[]{0x0000000020000000L,0x0000010000009000L});
    public static final BitSet FOLLOW_STAR_in_import_from_dotted_name1867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_names_in_import_from_dotted_name1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_import_from_dotted_name1927 = new BitSet(new long[]{0x0000000020000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_import_as_names_in_import_from_dotted_name1929 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_import_from_dotted_name1931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names1979 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_import_as_names1982 = new BitSet(new long[]{0x0000000020000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names1984 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_import_as_names1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_import_as_name2028 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_AS_in_import_as_name2031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_import_as_name2035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTTED_NAME_in_import_as_name2059 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_AS_in_import_as_name2062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_import_as_name2066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name2096 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_AS_in_dotted_as_name2099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name2103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTTED_NAME_in_dotted_as_name2128 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_AS_in_dotted_as_name2131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name2135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names2163 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_dotted_as_names2166 = new BitSet(new long[]{0x0000000020000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names2168 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_139_in_global_stmt2204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_global_stmt2206 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_global_stmt2209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_global_stmt2211 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_135_in_exec_stmt2234 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_expr_in_exec_stmt2236 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_IN_in_exec_stmt2239 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_exec_stmt2241 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_exec_stmt2244 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_exec_stmt2246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_assert_stmt2269 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_assert_stmt2271 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_assert_stmt2274 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_assert_stmt2276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_compound_stmt2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_compound_stmt2317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_compound_stmt2335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_compound_stmt2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_stmt_in_compound_stmt2371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcdef_in_compound_stmt2389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classdef_in_compound_stmt2407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_clause_in_if_stmt2430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_elif_clauses_in_if_stmt2433 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_else_clause_in_if_stmt2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_clause2468 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_if_clause2470 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_if_clause2472 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_if_clause2474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elif_clause_in_elif_clauses2498 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_elif_clause2523 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_elif_clause2525 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_elif_clause2527 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_elif_clause2529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_else_clause2554 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_else_clause2556 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_else_clause2558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_clause_in_while_stmt2577 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_else_clause_in_while_stmt2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_while_clause2614 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_while_clause2616 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_while_clause2618 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_while_clause2620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_for_stmt2666 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_exprlist_in_for_stmt2668 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_IN_in_for_stmt2670 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_for_stmt2672 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_for_stmt2674 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_for_stmt2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_clause_in_try_stmt2707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_except_clause_in_try_stmt2709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_finally_clause_in_try_stmt2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_try_clause2741 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_try_clause2743 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_try_clause2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_except_clause2768 = new BitSet(new long[]{0x4000000000040000L,0x0000000000001000L});
    public static final BitSet FOLLOW_trailer_in_except_clause2770 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_except_clause2773 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_except_clause2775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_finally_clause2801 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_finally_clause2803 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_finally_clause2805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_with_stmt2826 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_with_clause_in_with_stmt2831 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_with_stmt2833 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_with_stmt2837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_item_in_with_clause2878 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_with_clause2881 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_with_item_in_with_clause2883 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_test_in_with_item2908 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_with_item2912 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_with_item2916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_suite2941 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INDENT_in_suite2943 = new BitSet(new long[]{0xC201100020003000L,0xC00024001402B400L,0x000000000007FE8FL});
    public static final BitSet FOLLOW_stmt_inside_block_in_suite2946 = new BitSet(new long[]{0xC201100020803000L,0xC00024001402B400L,0x000000000007FE8FL});
    public static final BitSet FOLLOW_DEDENT_in_suite2950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDENT_in_suite2969 = new BitSet(new long[]{0xC201100020003000L,0xC00024001402B400L,0x000000000007FE8FL});
    public static final BitSet FOLLOW_stmt_inside_block_in_suite2972 = new BitSet(new long[]{0xC201100020803000L,0xC00024001402B400L,0x000000000007FE8FL});
    public static final BitSet FOLLOW_DEDENT_in_suite2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_test_in_test2999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_test_in_or_test3012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_OR_in_or_test3015 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_and_test_in_or_test3018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_not_test_in_and_test3037 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_AND_in_and_test3040 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_not_test_in_and_test3043 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NOT_in_not_test3063 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_not_test_in_not_test3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comparison_in_not_test3079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_comparison3096 = new BitSet(new long[]{0x1840C04000000012L,0x00000000000C0018L});
    public static final BitSet FOLLOW_LESS_in_comparison3101 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_GREATER_in_comparison3104 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_EQUAL_in_comparison3107 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_GREATEREQUAL_in_comparison3110 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_LESSEQUAL_in_comparison3113 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_ALT_NOTEQUAL_in_comparison3116 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_NOTEQUAL_in_comparison3119 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_IN_in_comparison3122 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_NOTIN_in_comparison3125 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_IS_in_comparison3128 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_ISNOT_in_comparison3131 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_expr_in_comparison3135 = new BitSet(new long[]{0x1840C04000000012L,0x00000000000C0018L});
    public static final BitSet FOLLOW_xor_expr_in_expr3156 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_VBAR_in_expr3159 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_xor_expr_in_expr3162 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr3178 = new BitSet(new long[]{0x0000000000004002L});
    public static final BitSet FOLLOW_CIRCUMFLEX_in_xor_expr3181 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr3184 = new BitSet(new long[]{0x0000000000004002L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr3204 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AMPER_in_and_expr3207 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr3210 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr3230 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000002L});
    public static final BitSet FOLLOW_LEFTSHIFT_in_shift_expr3234 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_shift_expr3237 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr3241 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000002L});
    public static final BitSet FOLLOW_term_in_arith_expr3262 = new BitSet(new long[]{0x0000000000000002L,0x0000000004002000L});
    public static final BitSet FOLLOW_PLUS_in_arith_expr3266 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_MINUS_in_arith_expr3269 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_term_in_arith_expr3273 = new BitSet(new long[]{0x0000000000000002L,0x0000000004002000L});
    public static final BitSet FOLLOW_factor_in_term3294 = new BitSet(new long[]{0x0000000140000002L,0x0000014000000000L});
    public static final BitSet FOLLOW_STAR_in_term3298 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_SLASH_in_term3303 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_DOUBLESLASH_in_term3308 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_term3313 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_factor_in_term3318 = new BitSet(new long[]{0x0000000140000002L,0x0000014000000000L});
    public static final BitSet FOLLOW_PLUS_in_factor3337 = new BitSet(new long[]{0xC200100020002000L,0x0000040000009400L});
    public static final BitSet FOLLOW_power_in_factor3339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_factor3360 = new BitSet(new long[]{0xC200100020002000L,0x0000040000009400L});
    public static final BitSet FOLLOW_power_in_factor3362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_factor3382 = new BitSet(new long[]{0xC200100020002000L,0x0000040000009400L});
    public static final BitSet FOLLOW_power_in_factor3384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_power_in_factor3400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_power3416 = new BitSet(new long[]{0x4000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_trailer_in_power3419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atom3445 = new BitSet(new long[]{0xC200100020002000L,0x000024100402B400L});
    public static final BitSet FOLLOW_testlist_gexp_in_atom3464 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_atom3486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_atom3506 = new BitSet(new long[]{0xC200100020002000L,0x000024008402B400L});
    public static final BitSet FOLLOW_listmaker_in_atom3509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_atom3532 = new BitSet(new long[]{0xC200100020002000L,0x000024010402B400L});
    public static final BitSet FOLLOW_dictmaker_in_atom3535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom3555 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_atom3558 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom3560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_atom3572 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PERCENT_in_atom3575 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_atom3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTTED_NAME_in_atom3603 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PERCENT_in_atom3606 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_atom3608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_atom3634 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PERCENT_in_atom3637 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_atom3639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINT_in_atom3667 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PERCENT_in_atom3670 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_atom3672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_atom3700 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PERCENT_in_atom3703 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_atom3705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_atom3739 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PERCENT_in_atom3742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_string_argument_in_atom3744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_string_argument3779 = new BitSet(new long[]{0xC200100120002000L,0x000025000402B400L});
    public static final BitSet FOLLOW_arglist_in_string_argument3784 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_string_argument3788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_arguments_in_listmaker3804 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_list_for_in_listmaker3806 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RBRACK_in_listmaker3809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_listmaker3827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_argument_in_list_arguments3844 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_list_arguments3847 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_list_argument_in_list_arguments3849 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_testlist_in_list_argument3874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dict_arguments_in_dictmaker3885 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RCURLY_in_dictmaker3888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RCURLY_in_dictmaker3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments3931 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_dict_arguments3933 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments3935 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_dict_arguments3945 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments3947 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_dict_arguments3949 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments3951 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_dict_arguments3956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_dict_argument3997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist_gexp4011 = new BitSet(new long[]{0x0000000000080002L,0x0000000001000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_PERCENT_in_testlist_gexp4014 = new BitSet(new long[]{0x0000000000080002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_testlist_gexp4029 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_testlist_gexp4032 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_testlist_gexp4037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_testlist_gexp4056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_trailer4096 = new BitSet(new long[]{0xC200100120002000L,0x000025100402B400L});
    public static final BitSet FOLLOW_inner_trailer_in_trailer4099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_trailer4104 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_subscriptlist_in_trailer4107 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RBRACK_in_trailer4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arglist_in_inner_trailer4124 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_inner_trailer4126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_inner_trailer4140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist4169 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist4179 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist4181 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_subscript4231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist4250 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_exprlist4261 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_expr_in_exprlist4264 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_exprlist4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist4294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_classdef4309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_classdef4313 = new BitSet(new long[]{0x0000000000040000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_classdef4316 = new BitSet(new long[]{0xC200100020002000L,0x000024100402B400L});
    public static final BitSet FOLLOW_testlist_in_classdef4318 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_classdef4321 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_classdef4325 = new BitSet(new long[]{0x0080000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_classdef4327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arglist4359 = new BitSet(new long[]{0x0000000000080402L});
    public static final BitSet FOLLOW_ASSIGN_in_arglist4362 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_sub_argument_in_arglist4364 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_arglist4369 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_argument_in_arglist4371 = new BitSet(new long[]{0x0000000000080402L});
    public static final BitSet FOLLOW_ASSIGN_in_arglist4374 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_sub_argument_in_arglist4376 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_STAR_in_arglist4403 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_arglist4405 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_arglist4408 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist4410 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_arglist4412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist4428 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_arglist4430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_print_argument4448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_argument4459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_sub_argument4488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_for_in_list_iter4498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_if_in_list_iter4512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_list_for4531 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_exprlist_in_list_for4533 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_IN_in_list_for4535 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_list_for4537 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_list_iter_in_list_for4540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_list_if4573 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_list_if4575 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_list_iter_in_list_if4578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_gen_iter4607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_if_in_gen_iter4619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_gen_for4635 = new BitSet(new long[]{0xC200100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_exprlist_in_gen_for4637 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_IN_in_gen_for4639 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_or_test_in_gen_for4641 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_gen_iter_in_gen_for4643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_gen_if4659 = new BitSet(new long[]{0xC200100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_gen_if4661 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_gen_iter_in_gen_if4663 = new BitSet(new long[]{0x0000000000000002L});

}