package pythonProvenance;
// $ANTLR 3.4 D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g 2012-08-03 13:58:59

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked"})
public class PythonProvenanceLexer extends Lexer {
    public static final int EOF=-1;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int ALT_NOTEQUAL=4;
    public static final int AMPER=5;
    public static final int AMPEREQUAL=6;
    public static final int AND=7;
    public static final int ARGUMENTS=8;
    public static final int AS=9;
    public static final int ASSIGN=10;
    public static final int ASSIGN_CMD=11;
    public static final int AT=12;
    public static final int BACKQUOTE=13;
    public static final int CIRCUMFLEX=14;
    public static final int CIRCUMFLEXEQUAL=15;
    public static final int CLASSVARIABLE_CMD=16;
    public static final int CLASS_CMD=17;
    public static final int COLON=18;
    public static final int COMMA=19;
    public static final int COMMENT=20;
    public static final int COMPLEX=21;
    public static final int CONTINUED_LINE=22;
    public static final int DEDENT=23;
    public static final int DICTIONARY_CMD=24;
    public static final int DICTMAKER_CMD=25;
    public static final int DICT_ARGS=26;
    public static final int DIGITS=27;
    public static final int DOT=28;
    public static final int DOTTED_NAME=29;
    public static final int DOUBLESLASH=30;
    public static final int DOUBLESLASHEQUAL=31;
    public static final int DOUBLESTAR=32;
    public static final int DOUBLESTAREQUAL=33;
    public static final int DOUBLE_TYPE=34;
    public static final int ELIF_CLAUSES=35;
    public static final int ELIF_CMD=36;
    public static final int ELSE_CMD=37;
    public static final int EQUAL=38;
    public static final int ESC=39;
    public static final int EXCEPT_CMD=40;
    public static final int EXPRESSION=41;
    public static final int Exponent=42;
    public static final int FINALLY_CMD=43;
    public static final int FLOAT=44;
    public static final int FORLOOP_CMD=45;
    public static final int GREATER=46;
    public static final int GREATEREQUAL=47;
    public static final int IF=48;
    public static final int IFBLOCK=49;
    public static final int IF_CMD=50;
    public static final int IMPORT_ARGS=51;
    public static final int IMPORT_CMD=52;
    public static final int IMPORT_EQUIV=53;
    public static final int IMPORT_NAME=54;
    public static final int IN=55;
    public static final int INDENT=56;
    public static final int INNER_BRANCH=57;
    public static final int INT=58;
    public static final int INT_TYPE=59;
    public static final int IS=60;
    public static final int ISNOT=61;
    public static final int LBRACK=62;
    public static final int LCURLY=63;
    public static final int LEADING_WS=64;
    public static final int LEFTSHIFT=65;
    public static final int LEFTSHIFTEQUAL=66;
    public static final int LESS=67;
    public static final int LESSEQUAL=68;
    public static final int LISTCOMPREHENSION_CMD=69;
    public static final int LISTCONDITION_CMD=70;
    public static final int LISTLOOPCONTROL_CMD=71;
    public static final int LISTMAKER_CMD=72;
    public static final int LIST_ARGS=73;
    public static final int LONGINT=74;
    public static final int LONG_TYPE=75;
    public static final int LPAREN=76;
    public static final int MINUS=77;
    public static final int MINUSEQUAL=78;
    public static final int NAME=79;
    public static final int NEWLINE=80;
    public static final int NOT=81;
    public static final int NOTEQUAL=82;
    public static final int NOTIN=83;
    public static final int NO_ARGS=84;
    public static final int OR=85;
    public static final int OUTER_FUNCTION_ARGS=86;
    public static final int OUTER_FUNCTION_CMD=87;
    public static final int PERCENT=88;
    public static final int PERCENTEQUAL=89;
    public static final int PLUS=90;
    public static final int PLUSEQUAL=91;
    public static final int PRINT=92;
    public static final int PRINT_ARGS=93;
    public static final int PRINT_CMD=94;
    public static final int RBRACK=95;
    public static final int RCURLY=96;
    public static final int RETURN_CMD=97;
    public static final int RIGHTSHIFT=98;
    public static final int RIGHTSHIFTEQUAL=99;
    public static final int RPAREN=100;
    public static final int SEMI=101;
    public static final int SLASH=102;
    public static final int SLASHEQUAL=103;
    public static final int STAR=104;
    public static final int STAREQUAL=105;
    public static final int STRING=106;
    public static final int STRING_TYPE=107;
    public static final int SUBSCRIPTS=108;
    public static final int TILDE=109;
    public static final int TRAILER=110;
    public static final int TRIAPOS=111;
    public static final int TRIQUOTE=112;
    public static final int TRYBLOCK=113;
    public static final int TRY_CMD=114;
    public static final int VALUETYPE=115;
    public static final int VARIABLE_CMD=116;
    public static final int VBAR=117;
    public static final int VBAREQUAL=118;
    public static final int WHILEBLOCK=119;
    public static final int WHILE_CMD=120;
    public static final int WS=121;

    /** Handles context-sensitive lexing of implicit line joining such as
     *  the case where newline is ignored in cases like this:
     *  a = [3,
     *       4]
     */
    int implicitLineJoiningLevel = 0;
    int startPos=-1;
    int[] IndentStack = new int[100];
    int sp = 0;
    int count = 0;

    /**  Emitting multiple tokens ***/
    // Queue to hold additional tokens
    public java.util.Queue<Token> tokenQueue = new java.util.LinkedList<Token>();

    // Include queue in reset().
    public void reset() {
    	super.reset();
            tokenQueue.clear();
    	}

    // Queued tokens are returned before matching a new token.
    public Token nextToken() {
            if (tokenQueue.peek() != null)
                return tokenQueue.poll();
            return super.nextToken();
            }


    // delegates
    // delegators
    public Lexer[] getDelegates() {
        return new Lexer[] {};
    }

    public PythonProvenanceLexer() {} 
    public PythonProvenanceLexer(CharStream input) {
        this(input, new RecognizerSharedState());
    }
    public PythonProvenanceLexer(CharStream input, RecognizerSharedState state) {
        super(input,state);
    }
    public String getGrammarFileName() { return "D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g"; }

    // $ANTLR start "DEDENT"
    public final void mDEDENT() throws RecognitionException {
        try {
            int _type = DEDENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:32:8: ( '<<<' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:32:10: '<<<'
            {
            match("<<<"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "DEDENT"

    // $ANTLR start "INDENT"
    public final void mINDENT() throws RecognitionException {
        try {
            int _type = INDENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:33:8: ( '>>>' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:33:10: '>>>'
            {
            match(">>>"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "INDENT"

    // $ANTLR start "T__122"
    public final void mT__122() throws RecognitionException {
        try {
            int _type = T__122;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:34:8: ( 'assert' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:34:10: 'assert'
            {
            match("assert"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__122"

    // $ANTLR start "T__123"
    public final void mT__123() throws RecognitionException {
        try {
            int _type = T__123;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:35:8: ( 'break' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:35:10: 'break'
            {
            match("break"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__123"

    // $ANTLR start "T__124"
    public final void mT__124() throws RecognitionException {
        try {
            int _type = T__124;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:36:8: ( 'class' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:36:10: 'class'
            {
            match("class"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__124"

    // $ANTLR start "T__125"
    public final void mT__125() throws RecognitionException {
        try {
            int _type = T__125;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:37:8: ( 'continue' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:37:10: 'continue'
            {
            match("continue"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__125"

    // $ANTLR start "T__126"
    public final void mT__126() throws RecognitionException {
        try {
            int _type = T__126;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:38:8: ( 'def' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:38:10: 'def'
            {
            match("def"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__126"

    // $ANTLR start "T__127"
    public final void mT__127() throws RecognitionException {
        try {
            int _type = T__127;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:39:8: ( 'del' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:39:10: 'del'
            {
            match("del"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__127"

    // $ANTLR start "T__128"
    public final void mT__128() throws RecognitionException {
        try {
            int _type = T__128;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:40:8: ( 'elif' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:40:10: 'elif'
            {
            match("elif"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__128"

    // $ANTLR start "T__129"
    public final void mT__129() throws RecognitionException {
        try {
            int _type = T__129;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:41:8: ( 'else' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:41:10: 'else'
            {
            match("else"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__129"

    // $ANTLR start "T__130"
    public final void mT__130() throws RecognitionException {
        try {
            int _type = T__130;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:42:8: ( 'except' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:42:10: 'except'
            {
            match("except"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__130"

    // $ANTLR start "T__131"
    public final void mT__131() throws RecognitionException {
        try {
            int _type = T__131;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:43:8: ( 'exec' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:43:10: 'exec'
            {
            match("exec"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__131"

    // $ANTLR start "T__132"
    public final void mT__132() throws RecognitionException {
        try {
            int _type = T__132;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:44:8: ( 'finally' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:44:10: 'finally'
            {
            match("finally"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__132"

    // $ANTLR start "T__133"
    public final void mT__133() throws RecognitionException {
        try {
            int _type = T__133;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:45:8: ( 'for' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:45:10: 'for'
            {
            match("for"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__133"

    // $ANTLR start "T__134"
    public final void mT__134() throws RecognitionException {
        try {
            int _type = T__134;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:46:8: ( 'from' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:46:10: 'from'
            {
            match("from"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__134"

    // $ANTLR start "T__135"
    public final void mT__135() throws RecognitionException {
        try {
            int _type = T__135;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:47:8: ( 'global' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:47:10: 'global'
            {
            match("global"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__135"

    // $ANTLR start "T__136"
    public final void mT__136() throws RecognitionException {
        try {
            int _type = T__136;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:48:8: ( 'import' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:48:10: 'import'
            {
            match("import"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__136"

    // $ANTLR start "T__137"
    public final void mT__137() throws RecognitionException {
        try {
            int _type = T__137;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:49:8: ( 'pass' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:49:10: 'pass'
            {
            match("pass"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__137"

    // $ANTLR start "T__138"
    public final void mT__138() throws RecognitionException {
        try {
            int _type = T__138;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:50:8: ( 'raise' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:50:10: 'raise'
            {
            match("raise"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__138"

    // $ANTLR start "T__139"
    public final void mT__139() throws RecognitionException {
        try {
            int _type = T__139;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:51:8: ( 'return' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:51:10: 'return'
            {
            match("return"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__139"

    // $ANTLR start "T__140"
    public final void mT__140() throws RecognitionException {
        try {
            int _type = T__140;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:52:8: ( 'try' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:52:10: 'try'
            {
            match("try"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__140"

    // $ANTLR start "T__141"
    public final void mT__141() throws RecognitionException {
        try {
            int _type = T__141;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:53:8: ( 'while' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:53:10: 'while'
            {
            match("while"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__141"

    // $ANTLR start "T__142"
    public final void mT__142() throws RecognitionException {
        try {
            int _type = T__142;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:54:8: ( 'with' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:54:10: 'with'
            {
            match("with"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "T__142"

    // $ANTLR start "LPAREN"
    public final void mLPAREN() throws RecognitionException {
        try {
            int _type = LPAREN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:463:11: ( '(' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:463:13: '('
            {
            match('('); 

            implicitLineJoiningLevel++;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LPAREN"

    // $ANTLR start "RPAREN"
    public final void mRPAREN() throws RecognitionException {
        try {
            int _type = RPAREN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:465:11: ( ')' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:465:13: ')'
            {
            match(')'); 

            implicitLineJoiningLevel--;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "RPAREN"

    // $ANTLR start "LBRACK"
    public final void mLBRACK() throws RecognitionException {
        try {
            int _type = LBRACK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:467:11: ( '[' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:467:13: '['
            {
            match('['); 

            implicitLineJoiningLevel++;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LBRACK"

    // $ANTLR start "RBRACK"
    public final void mRBRACK() throws RecognitionException {
        try {
            int _type = RBRACK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:469:11: ( ']' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:469:13: ']'
            {
            match(']'); 

            implicitLineJoiningLevel--;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "RBRACK"

    // $ANTLR start "COLON"
    public final void mCOLON() throws RecognitionException {
        try {
            int _type = COLON;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:471:11: ( ':' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:471:13: ':'
            {
            match(':'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "COLON"

    // $ANTLR start "COMMA"
    public final void mCOMMA() throws RecognitionException {
        try {
            int _type = COMMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:473:10: ( ',' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:473:12: ','
            {
            match(','); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "COMMA"

    // $ANTLR start "SEMI"
    public final void mSEMI() throws RecognitionException {
        try {
            int _type = SEMI;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:475:9: ( ';' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:475:11: ';'
            {
            match(';'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "SEMI"

    // $ANTLR start "PLUS"
    public final void mPLUS() throws RecognitionException {
        try {
            int _type = PLUS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:477:9: ( '+' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:477:11: '+'
            {
            match('+'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "PLUS"

    // $ANTLR start "MINUS"
    public final void mMINUS() throws RecognitionException {
        try {
            int _type = MINUS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:479:10: ( '-' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:479:12: '-'
            {
            match('-'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "MINUS"

    // $ANTLR start "STAR"
    public final void mSTAR() throws RecognitionException {
        try {
            int _type = STAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:481:9: ( '*' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:481:11: '*'
            {
            match('*'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "STAR"

    // $ANTLR start "SLASH"
    public final void mSLASH() throws RecognitionException {
        try {
            int _type = SLASH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:483:10: ( '/' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:483:12: '/'
            {
            match('/'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "SLASH"

    // $ANTLR start "VBAR"
    public final void mVBAR() throws RecognitionException {
        try {
            int _type = VBAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:485:9: ( '|' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:485:11: '|'
            {
            match('|'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "VBAR"

    // $ANTLR start "AMPER"
    public final void mAMPER() throws RecognitionException {
        try {
            int _type = AMPER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:487:10: ( '&' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:487:12: '&'
            {
            match('&'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "AMPER"

    // $ANTLR start "LESS"
    public final void mLESS() throws RecognitionException {
        try {
            int _type = LESS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:489:9: ( '<' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:489:11: '<'
            {
            match('<'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LESS"

    // $ANTLR start "GREATER"
    public final void mGREATER() throws RecognitionException {
        try {
            int _type = GREATER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:491:12: ( '>' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:491:14: '>'
            {
            match('>'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "GREATER"

    // $ANTLR start "ASSIGN"
    public final void mASSIGN() throws RecognitionException {
        try {
            int _type = ASSIGN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:493:11: ( '=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:493:13: '='
            {
            match('='); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "ASSIGN"

    // $ANTLR start "PERCENT"
    public final void mPERCENT() throws RecognitionException {
        try {
            int _type = PERCENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:495:12: ( '%' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:495:14: '%'
            {
            match('%'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "PERCENT"

    // $ANTLR start "BACKQUOTE"
    public final void mBACKQUOTE() throws RecognitionException {
        try {
            int _type = BACKQUOTE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:497:14: ( '`' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:497:16: '`'
            {
            match('`'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "BACKQUOTE"

    // $ANTLR start "LCURLY"
    public final void mLCURLY() throws RecognitionException {
        try {
            int _type = LCURLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:499:11: ( '{' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:499:13: '{'
            {
            match('{'); 

            implicitLineJoiningLevel++;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LCURLY"

    // $ANTLR start "RCURLY"
    public final void mRCURLY() throws RecognitionException {
        try {
            int _type = RCURLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:501:11: ( '}' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:501:13: '}'
            {
            match('}'); 

            implicitLineJoiningLevel--;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "RCURLY"

    // $ANTLR start "CIRCUMFLEX"
    public final void mCIRCUMFLEX() throws RecognitionException {
        try {
            int _type = CIRCUMFLEX;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:503:15: ( '^' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:503:17: '^'
            {
            match('^'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "CIRCUMFLEX"

    // $ANTLR start "TILDE"
    public final void mTILDE() throws RecognitionException {
        try {
            int _type = TILDE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:505:10: ( '~' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:505:12: '~'
            {
            match('~'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "TILDE"

    // $ANTLR start "EQUAL"
    public final void mEQUAL() throws RecognitionException {
        try {
            int _type = EQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:507:10: ( '==' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:507:12: '=='
            {
            match("=="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "EQUAL"

    // $ANTLR start "NOTEQUAL"
    public final void mNOTEQUAL() throws RecognitionException {
        try {
            int _type = NOTEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:509:13: ( '!=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:509:15: '!='
            {
            match("!="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "NOTEQUAL"

    // $ANTLR start "ALT_NOTEQUAL"
    public final void mALT_NOTEQUAL() throws RecognitionException {
        try {
            int _type = ALT_NOTEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:511:13: ( '<>' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:511:15: '<>'
            {
            match("<>"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "ALT_NOTEQUAL"

    // $ANTLR start "LESSEQUAL"
    public final void mLESSEQUAL() throws RecognitionException {
        try {
            int _type = LESSEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:513:14: ( '<=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:513:16: '<='
            {
            match("<="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LESSEQUAL"

    // $ANTLR start "LEFTSHIFT"
    public final void mLEFTSHIFT() throws RecognitionException {
        try {
            int _type = LEFTSHIFT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:515:14: ( '<<' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:515:16: '<<'
            {
            match("<<"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LEFTSHIFT"

    // $ANTLR start "GREATEREQUAL"
    public final void mGREATEREQUAL() throws RecognitionException {
        try {
            int _type = GREATEREQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:517:17: ( '>=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:517:19: '>='
            {
            match(">="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "GREATEREQUAL"

    // $ANTLR start "RIGHTSHIFT"
    public final void mRIGHTSHIFT() throws RecognitionException {
        try {
            int _type = RIGHTSHIFT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:519:15: ( '>>' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:519:17: '>>'
            {
            match(">>"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "RIGHTSHIFT"

    // $ANTLR start "PLUSEQUAL"
    public final void mPLUSEQUAL() throws RecognitionException {
        try {
            int _type = PLUSEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:521:14: ( '+=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:521:16: '+='
            {
            match("+="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "PLUSEQUAL"

    // $ANTLR start "MINUSEQUAL"
    public final void mMINUSEQUAL() throws RecognitionException {
        try {
            int _type = MINUSEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:523:15: ( '-=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:523:17: '-='
            {
            match("-="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "MINUSEQUAL"

    // $ANTLR start "DOUBLESTAR"
    public final void mDOUBLESTAR() throws RecognitionException {
        try {
            int _type = DOUBLESTAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:525:15: ( '**' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:525:17: '**'
            {
            match("**"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "DOUBLESTAR"

    // $ANTLR start "STAREQUAL"
    public final void mSTAREQUAL() throws RecognitionException {
        try {
            int _type = STAREQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:527:14: ( '*=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:527:16: '*='
            {
            match("*="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "STAREQUAL"

    // $ANTLR start "DOUBLESLASH"
    public final void mDOUBLESLASH() throws RecognitionException {
        try {
            int _type = DOUBLESLASH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:529:16: ( '//' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:529:18: '//'
            {
            match("//"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "DOUBLESLASH"

    // $ANTLR start "SLASHEQUAL"
    public final void mSLASHEQUAL() throws RecognitionException {
        try {
            int _type = SLASHEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:531:15: ( '/=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:531:17: '/='
            {
            match("/="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "SLASHEQUAL"

    // $ANTLR start "VBAREQUAL"
    public final void mVBAREQUAL() throws RecognitionException {
        try {
            int _type = VBAREQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:533:14: ( '|=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:533:16: '|='
            {
            match("|="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "VBAREQUAL"

    // $ANTLR start "PERCENTEQUAL"
    public final void mPERCENTEQUAL() throws RecognitionException {
        try {
            int _type = PERCENTEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:535:17: ( '%=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:535:19: '%='
            {
            match("%="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "PERCENTEQUAL"

    // $ANTLR start "AMPEREQUAL"
    public final void mAMPEREQUAL() throws RecognitionException {
        try {
            int _type = AMPEREQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:537:15: ( '&=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:537:17: '&='
            {
            match("&="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "AMPEREQUAL"

    // $ANTLR start "CIRCUMFLEXEQUAL"
    public final void mCIRCUMFLEXEQUAL() throws RecognitionException {
        try {
            int _type = CIRCUMFLEXEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:539:20: ( '^=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:539:22: '^='
            {
            match("^="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "CIRCUMFLEXEQUAL"

    // $ANTLR start "LEFTSHIFTEQUAL"
    public final void mLEFTSHIFTEQUAL() throws RecognitionException {
        try {
            int _type = LEFTSHIFTEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:541:19: ( '<<=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:541:21: '<<='
            {
            match("<<="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LEFTSHIFTEQUAL"

    // $ANTLR start "RIGHTSHIFTEQUAL"
    public final void mRIGHTSHIFTEQUAL() throws RecognitionException {
        try {
            int _type = RIGHTSHIFTEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:543:20: ( '>>=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:543:22: '>>='
            {
            match(">>="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "RIGHTSHIFTEQUAL"

    // $ANTLR start "DOUBLESTAREQUAL"
    public final void mDOUBLESTAREQUAL() throws RecognitionException {
        try {
            int _type = DOUBLESTAREQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:545:20: ( '**=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:545:22: '**='
            {
            match("**="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "DOUBLESTAREQUAL"

    // $ANTLR start "DOUBLESLASHEQUAL"
    public final void mDOUBLESLASHEQUAL() throws RecognitionException {
        try {
            int _type = DOUBLESLASHEQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:547:21: ( '//=' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:547:23: '//='
            {
            match("//="); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "DOUBLESLASHEQUAL"

    // $ANTLR start "DOT"
    public final void mDOT() throws RecognitionException {
        try {
            int _type = DOT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:549:5: ( '.' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:549:7: '.'
            {
            match('.'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "DOT"

    // $ANTLR start "AT"
    public final void mAT() throws RecognitionException {
        try {
            int _type = AT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:551:4: ( '@' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:551:6: '@'
            {
            match('@'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "AT"

    // $ANTLR start "AND"
    public final void mAND() throws RecognitionException {
        try {
            int _type = AND;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:553:5: ( 'and' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:553:7: 'and'
            {
            match("and"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "AND"

    // $ANTLR start "OR"
    public final void mOR() throws RecognitionException {
        try {
            int _type = OR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:555:4: ( 'or' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:555:6: 'or'
            {
            match("or"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "OR"

    // $ANTLR start "NOT"
    public final void mNOT() throws RecognitionException {
        try {
            int _type = NOT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:557:5: ( 'not' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:557:7: 'not'
            {
            match("not"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "NOT"

    // $ANTLR start "IN"
    public final void mIN() throws RecognitionException {
        try {
            int _type = IN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:559:5: ( 'in' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:559:7: 'in'
            {
            match("in"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "IN"

    // $ANTLR start "NOTIN"
    public final void mNOTIN() throws RecognitionException {
        try {
            int _type = NOTIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:561:7: ( 'not in' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:561:9: 'not in'
            {
            match("not in"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "NOTIN"

    // $ANTLR start "IS"
    public final void mIS() throws RecognitionException {
        try {
            int _type = IS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:563:5: ( 'is' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:563:7: 'is'
            {
            match("is"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "IS"

    // $ANTLR start "ISNOT"
    public final void mISNOT() throws RecognitionException {
        try {
            int _type = ISNOT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:565:7: ( 'is not' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:565:9: 'is not'
            {
            match("is not"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "ISNOT"

    // $ANTLR start "PRINT"
    public final void mPRINT() throws RecognitionException {
        try {
            int _type = PRINT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:567:8: ( 'print' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:567:10: 'print'
            {
            match("print"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "PRINT"

    // $ANTLR start "AS"
    public final void mAS() throws RecognitionException {
        try {
            int _type = AS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:569:5: ( 'as' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:569:8: 'as'
            {
            match("as"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "AS"

    // $ANTLR start "IF"
    public final void mIF() throws RecognitionException {
        try {
            int _type = IF;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:571:4: ( 'if' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:571:6: 'if'
            {
            match("if"); 



            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "IF"

    // $ANTLR start "FLOAT"
    public final void mFLOAT() throws RecognitionException {
        try {
            int _type = FLOAT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:574:5: ( '.' DIGITS ( Exponent )? | DIGITS '.' Exponent | DIGITS ( '.' ( DIGITS ( Exponent )? )? | Exponent ) )
            int alt5=3;
            alt5 = dfa5.predict(input);
            switch (alt5) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:574:9: '.' DIGITS ( Exponent )?
                    {
                    match('.'); 

                    mDIGITS(); 


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:574:20: ( Exponent )?
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0=='E'||LA1_0=='e') ) {
                        alt1=1;
                    }
                    switch (alt1) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:574:21: Exponent
                            {
                            mExponent(); 


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:575:9: DIGITS '.' Exponent
                    {
                    mDIGITS(); 


                    match('.'); 

                    mExponent(); 


                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:576:9: DIGITS ( '.' ( DIGITS ( Exponent )? )? | Exponent )
                    {
                    mDIGITS(); 


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:576:16: ( '.' ( DIGITS ( Exponent )? )? | Exponent )
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0=='.') ) {
                        alt4=1;
                    }
                    else if ( (LA4_0=='E'||LA4_0=='e') ) {
                        alt4=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 4, 0, input);

                        throw nvae;

                    }
                    switch (alt4) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:576:17: '.' ( DIGITS ( Exponent )? )?
                            {
                            match('.'); 

                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:576:21: ( DIGITS ( Exponent )? )?
                            int alt3=2;
                            int LA3_0 = input.LA(1);

                            if ( ((LA3_0 >= '0' && LA3_0 <= '9')) ) {
                                alt3=1;
                            }
                            switch (alt3) {
                                case 1 :
                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:576:22: DIGITS ( Exponent )?
                                    {
                                    mDIGITS(); 


                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:576:29: ( Exponent )?
                                    int alt2=2;
                                    int LA2_0 = input.LA(1);

                                    if ( (LA2_0=='E'||LA2_0=='e') ) {
                                        alt2=1;
                                    }
                                    switch (alt2) {
                                        case 1 :
                                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:576:30: Exponent
                                            {
                                            mExponent(); 


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:576:45: Exponent
                            {
                            mExponent(); 


                            }
                            break;

                    }


                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "FLOAT"

    // $ANTLR start "LONGINT"
    public final void mLONGINT() throws RecognitionException {
        try {
            int _type = LONGINT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:580:5: ( INT ( 'l' | 'L' ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:580:9: INT ( 'l' | 'L' )
            {
            mINT(); 


            if ( input.LA(1)=='L'||input.LA(1)=='l' ) {
                input.consume();
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LONGINT"

    // $ANTLR start "Exponent"
    public final void mExponent() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:586:5: ( ( 'e' | 'E' ) ( '+' | '-' )? DIGITS )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:586:10: ( 'e' | 'E' ) ( '+' | '-' )? DIGITS
            {
            if ( input.LA(1)=='E'||input.LA(1)=='e' ) {
                input.consume();
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:586:22: ( '+' | '-' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0=='+'||LA6_0=='-') ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
                    {
                    if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                        input.consume();
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        recover(mse);
                        throw mse;
                    }


                    }
                    break;

            }


            mDIGITS(); 


            }


        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "Exponent"

    // $ANTLR start "INT"
    public final void mINT() throws RecognitionException {
        try {
            int _type = INT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:588:5: ( ( '-' )? '0' ( 'x' | 'X' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ | ( '-' )? '0' ( DIGITS )* | ( '-' )? '1' .. '9' ( DIGITS )* )
            int alt13=3;
            switch ( input.LA(1) ) {
            case '-':
                {
                int LA13_1 = input.LA(2);

                if ( (LA13_1=='0') ) {
                    int LA13_2 = input.LA(3);

                    if ( (LA13_2=='X'||LA13_2=='x') ) {
                        alt13=1;
                    }
                    else {
                        alt13=2;
                    }
                }
                else if ( ((LA13_1 >= '1' && LA13_1 <= '9')) ) {
                    alt13=3;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;

                }
                }
                break;
            case '0':
                {
                int LA13_2 = input.LA(2);

                if ( (LA13_2=='X'||LA13_2=='x') ) {
                    alt13=1;
                }
                else {
                    alt13=2;
                }
                }
                break;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                {
                alt13=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:589:9: ( '-' )? '0' ( 'x' | 'X' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:589:9: ( '-' )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0=='-') ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:589:10: '-'
                            {
                            match('-'); 

                            }
                            break;

                    }


                    match('0'); 

                    if ( input.LA(1)=='X'||input.LA(1)=='x' ) {
                        input.consume();
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        recover(mse);
                        throw mse;
                    }


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:589:32: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
                    int cnt8=0;
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( ((LA8_0 >= '0' && LA8_0 <= '9')||(LA8_0 >= 'A' && LA8_0 <= 'F')||(LA8_0 >= 'a' && LA8_0 <= 'f')) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
                    	    {
                    	    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {
                    	        input.consume();
                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;
                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt8 >= 1 ) break loop8;
                                EarlyExitException eee =
                                    new EarlyExitException(8, input);
                                throw eee;
                        }
                        cnt8++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:591:9: ( '-' )? '0' ( DIGITS )*
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:591:9: ( '-' )?
                    int alt9=2;
                    int LA9_0 = input.LA(1);

                    if ( (LA9_0=='-') ) {
                        alt9=1;
                    }
                    switch (alt9) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:591:10: '-'
                            {
                            match('-'); 

                            }
                            break;

                    }


                    match('0'); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:591:20: ( DIGITS )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( ((LA10_0 >= '0' && LA10_0 <= '9')) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:591:20: DIGITS
                    	    {
                    	    mDIGITS(); 


                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:592:9: ( '-' )? '1' .. '9' ( DIGITS )*
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:592:9: ( '-' )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0=='-') ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:592:10: '-'
                            {
                            match('-'); 

                            }
                            break;

                    }


                    matchRange('1','9'); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:592:25: ( DIGITS )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( ((LA12_0 >= '0' && LA12_0 <= '9')) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:592:25: DIGITS
                    	    {
                    	    mDIGITS(); 


                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "INT"

    // $ANTLR start "COMPLEX"
    public final void mCOMPLEX() throws RecognitionException {
        try {
            int _type = COMPLEX;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:596:5: ( INT ( 'j' | 'J' ) | FLOAT ( 'j' | 'J' ) )
            int alt14=2;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:596:9: INT ( 'j' | 'J' )
                    {
                    mINT(); 


                    if ( input.LA(1)=='J'||input.LA(1)=='j' ) {
                        input.consume();
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        recover(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:597:9: FLOAT ( 'j' | 'J' )
                    {
                    mFLOAT(); 


                    if ( input.LA(1)=='J'||input.LA(1)=='j' ) {
                        input.consume();
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        recover(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "COMPLEX"

    // $ANTLR start "DIGITS"
    public final void mDIGITS() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:602:8: ( ( '0' .. '9' )+ )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:602:10: ( '0' .. '9' )+
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:602:10: ( '0' .. '9' )+
            int cnt15=0;
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( ((LA15_0 >= '0' && LA15_0 <= '9')) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
            	    {
            	    if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
            	        input.consume();
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            }


        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "DIGITS"

    // $ANTLR start "DOTTED_NAME"
    public final void mDOTTED_NAME() throws RecognitionException {
        try {
            int _type = DOTTED_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:604:2: ( NAME DOT NAME )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:604:5: NAME DOT NAME
            {
            mNAME(); 


            mDOT(); 


            mNAME(); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "DOTTED_NAME"

    // $ANTLR start "NAME"
    public final void mNAME() throws RecognitionException {
        try {
            int _type = NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:608:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:608:10: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
            {
            if ( (input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
                input.consume();
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:609:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( ((LA16_0 >= '0' && LA16_0 <= '9')||(LA16_0 >= 'A' && LA16_0 <= 'Z')||LA16_0=='_'||(LA16_0 >= 'a' && LA16_0 <= 'z')) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
            	    {
            	    if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
            	        input.consume();
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "NAME"

    // $ANTLR start "IMPORT_NAME"
    public final void mIMPORT_NAME() throws RecognitionException {
        try {
            int _type = IMPORT_NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:613:12: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '.' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '.' )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:613:17: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '.' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '.' )*
            {
            if ( input.LA(1)=='.'||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
                input.consume();
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:614:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '.' )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0=='.'||(LA17_0 >= '0' && LA17_0 <= '9')||(LA17_0 >= 'A' && LA17_0 <= 'Z')||LA17_0=='_'||(LA17_0 >= 'a' && LA17_0 <= 'z')) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
            	    {
            	    if ( input.LA(1)=='.'||(input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'Z')||input.LA(1)=='_'||(input.LA(1) >= 'a' && input.LA(1) <= 'z') ) {
            	        input.consume();
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "IMPORT_NAME"

    // $ANTLR start "STRING"
    public final void mSTRING() throws RecognitionException {
        try {
            int _type = STRING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:624:5: ( ( 'r' | 'u' | 'ur' )? ( '\\'\\'\\'' ( options {greedy=false; } : TRIAPOS )* '\\'\\'\\'' | '\"\"\"' ( options {greedy=false; } : TRIQUOTE )* '\"\"\"' | '\"' ( ESC |~ ( '\\\\' | '\\n' | '\"' ) )* '\"' | '\\'' ( ESC |~ ( '\\\\' | '\\n' | '\\'' ) )* '\\'' ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:624:9: ( 'r' | 'u' | 'ur' )? ( '\\'\\'\\'' ( options {greedy=false; } : TRIAPOS )* '\\'\\'\\'' | '\"\"\"' ( options {greedy=false; } : TRIQUOTE )* '\"\"\"' | '\"' ( ESC |~ ( '\\\\' | '\\n' | '\"' ) )* '\"' | '\\'' ( ESC |~ ( '\\\\' | '\\n' | '\\'' ) )* '\\'' )
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:624:9: ( 'r' | 'u' | 'ur' )?
            int alt18=4;
            int LA18_0 = input.LA(1);

            if ( (LA18_0=='r') ) {
                alt18=1;
            }
            else if ( (LA18_0=='u') ) {
                int LA18_2 = input.LA(2);

                if ( (LA18_2=='r') ) {
                    alt18=3;
                }
                else if ( (LA18_2=='\"'||LA18_2=='\'') ) {
                    alt18=2;
                }
            }
            switch (alt18) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:624:10: 'r'
                    {
                    match('r'); 

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:624:14: 'u'
                    {
                    match('u'); 

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:624:18: 'ur'
                    {
                    match("ur"); 



                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:625:9: ( '\\'\\'\\'' ( options {greedy=false; } : TRIAPOS )* '\\'\\'\\'' | '\"\"\"' ( options {greedy=false; } : TRIQUOTE )* '\"\"\"' | '\"' ( ESC |~ ( '\\\\' | '\\n' | '\"' ) )* '\"' | '\\'' ( ESC |~ ( '\\\\' | '\\n' | '\\'' ) )* '\\'' )
            int alt23=4;
            int LA23_0 = input.LA(1);

            if ( (LA23_0=='\'') ) {
                int LA23_1 = input.LA(2);

                if ( (LA23_1=='\'') ) {
                    int LA23_3 = input.LA(3);

                    if ( (LA23_3=='\'') ) {
                        alt23=1;
                    }
                    else {
                        alt23=4;
                    }
                }
                else if ( ((LA23_1 >= '\u0000' && LA23_1 <= '\t')||(LA23_1 >= '\u000B' && LA23_1 <= '&')||(LA23_1 >= '(' && LA23_1 <= '\uFFFF')) ) {
                    alt23=4;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 23, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA23_0=='\"') ) {
                int LA23_2 = input.LA(2);

                if ( (LA23_2=='\"') ) {
                    int LA23_5 = input.LA(3);

                    if ( (LA23_5=='\"') ) {
                        alt23=2;
                    }
                    else {
                        alt23=3;
                    }
                }
                else if ( ((LA23_2 >= '\u0000' && LA23_2 <= '\t')||(LA23_2 >= '\u000B' && LA23_2 <= '!')||(LA23_2 >= '#' && LA23_2 <= '\uFFFF')) ) {
                    alt23=3;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 23, 2, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:625:13: '\\'\\'\\'' ( options {greedy=false; } : TRIAPOS )* '\\'\\'\\''
                    {
                    match("'''"); 



                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:625:22: ( options {greedy=false; } : TRIAPOS )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0=='\'') ) {
                            int LA19_1 = input.LA(2);

                            if ( (LA19_1=='\'') ) {
                                int LA19_3 = input.LA(3);

                                if ( (LA19_3=='\'') ) {
                                    alt19=2;
                                }
                                else if ( ((LA19_3 >= '\u0000' && LA19_3 <= '&')||(LA19_3 >= '(' && LA19_3 <= '\uFFFF')) ) {
                                    alt19=1;
                                }


                            }
                            else if ( ((LA19_1 >= '\u0000' && LA19_1 <= '&')||(LA19_1 >= '(' && LA19_1 <= '\uFFFF')) ) {
                                alt19=1;
                            }


                        }
                        else if ( ((LA19_0 >= '\u0000' && LA19_0 <= '&')||(LA19_0 >= '(' && LA19_0 <= '\uFFFF')) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:625:47: TRIAPOS
                    	    {
                    	    mTRIAPOS(); 


                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    match("'''"); 



                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:626:13: '\"\"\"' ( options {greedy=false; } : TRIQUOTE )* '\"\"\"'
                    {
                    match("\"\"\""); 



                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:626:19: ( options {greedy=false; } : TRIQUOTE )*
                    loop20:
                    do {
                        int alt20=2;
                        int LA20_0 = input.LA(1);

                        if ( (LA20_0=='\"') ) {
                            int LA20_1 = input.LA(2);

                            if ( (LA20_1=='\"') ) {
                                int LA20_3 = input.LA(3);

                                if ( (LA20_3=='\"') ) {
                                    alt20=2;
                                }
                                else if ( ((LA20_3 >= '\u0000' && LA20_3 <= '!')||(LA20_3 >= '#' && LA20_3 <= '\uFFFF')) ) {
                                    alt20=1;
                                }


                            }
                            else if ( ((LA20_1 >= '\u0000' && LA20_1 <= '!')||(LA20_1 >= '#' && LA20_1 <= '\uFFFF')) ) {
                                alt20=1;
                            }


                        }
                        else if ( ((LA20_0 >= '\u0000' && LA20_0 <= '!')||(LA20_0 >= '#' && LA20_0 <= '\uFFFF')) ) {
                            alt20=1;
                        }


                        switch (alt20) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:626:44: TRIQUOTE
                    	    {
                    	    mTRIQUOTE(); 


                    	    }
                    	    break;

                    	default :
                    	    break loop20;
                        }
                    } while (true);


                    match("\"\"\""); 



                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:627:13: '\"' ( ESC |~ ( '\\\\' | '\\n' | '\"' ) )* '\"'
                    {
                    match('\"'); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:627:17: ( ESC |~ ( '\\\\' | '\\n' | '\"' ) )*
                    loop21:
                    do {
                        int alt21=3;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0=='\\') ) {
                            alt21=1;
                        }
                        else if ( ((LA21_0 >= '\u0000' && LA21_0 <= '\t')||(LA21_0 >= '\u000B' && LA21_0 <= '!')||(LA21_0 >= '#' && LA21_0 <= '[')||(LA21_0 >= ']' && LA21_0 <= '\uFFFF')) ) {
                            alt21=2;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:627:18: ESC
                    	    {
                    	    mESC(); 


                    	    }
                    	    break;
                    	case 2 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:627:22: ~ ( '\\\\' | '\\n' | '\"' )
                    	    {
                    	    if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '\t')||(input.LA(1) >= '\u000B' && input.LA(1) <= '!')||(input.LA(1) >= '#' && input.LA(1) <= '[')||(input.LA(1) >= ']' && input.LA(1) <= '\uFFFF') ) {
                    	        input.consume();
                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;
                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);


                    match('\"'); 

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:628:13: '\\'' ( ESC |~ ( '\\\\' | '\\n' | '\\'' ) )* '\\''
                    {
                    match('\''); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:628:18: ( ESC |~ ( '\\\\' | '\\n' | '\\'' ) )*
                    loop22:
                    do {
                        int alt22=3;
                        int LA22_0 = input.LA(1);

                        if ( (LA22_0=='\\') ) {
                            alt22=1;
                        }
                        else if ( ((LA22_0 >= '\u0000' && LA22_0 <= '\t')||(LA22_0 >= '\u000B' && LA22_0 <= '&')||(LA22_0 >= '(' && LA22_0 <= '[')||(LA22_0 >= ']' && LA22_0 <= '\uFFFF')) ) {
                            alt22=2;
                        }


                        switch (alt22) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:628:19: ESC
                    	    {
                    	    mESC(); 


                    	    }
                    	    break;
                    	case 2 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:628:23: ~ ( '\\\\' | '\\n' | '\\'' )
                    	    {
                    	    if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '\t')||(input.LA(1) >= '\u000B' && input.LA(1) <= '&')||(input.LA(1) >= '(' && input.LA(1) <= '[')||(input.LA(1) >= ']' && input.LA(1) <= '\uFFFF') ) {
                    	        input.consume();
                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;
                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);


                    match('\''); 

                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "STRING"

    // $ANTLR start "TRIQUOTE"
    public final void mTRIQUOTE() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:5: ( ( '\"' )? ( '\"' )? ( ESC |~ ( '\\\\' | '\"' ) )+ )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:7: ( '\"' )? ( '\"' )? ( ESC |~ ( '\\\\' | '\"' ) )+
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:7: ( '\"' )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0=='\"') ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:7: '\"'
                    {
                    match('\"'); 

                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:12: ( '\"' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0=='\"') ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:12: '\"'
                    {
                    match('\"'); 

                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:17: ( ESC |~ ( '\\\\' | '\"' ) )+
            int cnt26=0;
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0=='\\') ) {
                    alt26=1;
                }
                else if ( ((LA26_0 >= '\u0000' && LA26_0 <= '!')||(LA26_0 >= '#' && LA26_0 <= '[')||(LA26_0 >= ']' && LA26_0 <= '\uFFFF')) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:18: ESC
            	    {
            	    mESC(); 


            	    }
            	    break;
            	case 2 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:634:22: ~ ( '\\\\' | '\"' )
            	    {
            	    if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '!')||(input.LA(1) >= '#' && input.LA(1) <= '[')||(input.LA(1) >= ']' && input.LA(1) <= '\uFFFF') ) {
            	        input.consume();
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        throw eee;
                }
                cnt26++;
            } while (true);


            }


        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "TRIQUOTE"

    // $ANTLR start "TRIAPOS"
    public final void mTRIAPOS() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:5: ( ( '\\'' )? ( '\\'' )? ( ESC |~ ( '\\\\' | '\\'' ) )+ )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:7: ( '\\'' )? ( '\\'' )? ( ESC |~ ( '\\\\' | '\\'' ) )+
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:7: ( '\\'' )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0=='\'') ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:7: '\\''
                    {
                    match('\''); 

                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:13: ( '\\'' )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0=='\'') ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:13: '\\''
                    {
                    match('\''); 

                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:19: ( ESC |~ ( '\\\\' | '\\'' ) )+
            int cnt29=0;
            loop29:
            do {
                int alt29=3;
                int LA29_0 = input.LA(1);

                if ( (LA29_0=='\\') ) {
                    alt29=1;
                }
                else if ( ((LA29_0 >= '\u0000' && LA29_0 <= '&')||(LA29_0 >= '(' && LA29_0 <= '[')||(LA29_0 >= ']' && LA29_0 <= '\uFFFF')) ) {
                    alt29=2;
                }


                switch (alt29) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:20: ESC
            	    {
            	    mESC(); 


            	    }
            	    break;
            	case 2 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:640:24: ~ ( '\\\\' | '\\'' )
            	    {
            	    if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '&')||(input.LA(1) >= '(' && input.LA(1) <= '[')||(input.LA(1) >= ']' && input.LA(1) <= '\uFFFF') ) {
            	        input.consume();
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);


            }


        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "TRIAPOS"

    // $ANTLR start "ESC"
    public final void mESC() throws RecognitionException {
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:644:5: ( '\\\\' . )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:644:10: '\\\\' .
            {
            match('\\'); 

            matchAny(); 

            }


        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "ESC"

    // $ANTLR start "CONTINUED_LINE"
    public final void mCONTINUED_LINE() throws RecognitionException {
        try {
            int _type = CONTINUED_LINE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            CommonToken nl=null;

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:655:5: ( '\\\\' ( '\\r' )? '\\n' ( ' ' | '\\t' )* (nl= NEWLINE |) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:655:10: '\\\\' ( '\\r' )? '\\n' ( ' ' | '\\t' )* (nl= NEWLINE |)
            {
            match('\\'); 

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:655:15: ( '\\r' )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0=='\r') ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:655:16: '\\r'
                    {
                    match('\r'); 

                    }
                    break;

            }


            match('\n'); 

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:655:28: ( ' ' | '\\t' )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0=='\t') ) {
                    alt31=1;
                }
                else if ( (LA31_0==' ') ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
            	    {
            	    if ( input.LA(1)=='\t'||input.LA(1)==' ' ) {
            	        input.consume();
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


             _channel=HIDDEN; 

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:656:10: (nl= NEWLINE |)
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( ((LA32_0 >= '\t' && LA32_0 <= '\n')||(LA32_0 >= '\f' && LA32_0 <= '\r')||LA32_0==' ') ) {
                alt32=1;
            }
            else {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:656:12: nl= NEWLINE
                    {
                    int nlStart1535 = getCharIndex();
                    int nlStartLine1535 = getLine();
                    int nlStartCharPos1535 = getCharPositionInLine();
                    mNEWLINE(); 
                    nl = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, nlStart1535, getCharIndex()-1);
                    nl.setLine(nlStartLine1535);
                    nl.setCharPositionInLine(nlStartCharPos1535);


                    emit(new ClassicToken(NEWLINE,nl.getText()));

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:658:10: 
                    {
                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "CONTINUED_LINE"

    // $ANTLR start "NEWLINE"
    public final void mNEWLINE() throws RecognitionException {
        try {
            int _type = NEWLINE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            int leading_space;


                int spaces = 0;
                count = 0;
                //int leading_space = 0;

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:5: ( ( ( ( '\\u000C' )? ( '\\r' )? '\\n' ) | '\\t' | ' ' )* ( ( '\\u000C' )? ( '\\r' )? '\\n' ) (leading_space= ( ' ' | '\\t' ) )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:9: ( ( ( '\\u000C' )? ( '\\r' )? '\\n' ) | '\\t' | ' ' )* ( ( '\\u000C' )? ( '\\r' )? '\\n' ) (leading_space= ( ' ' | '\\t' ) )*
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:9: ( ( ( '\\u000C' )? ( '\\r' )? '\\n' ) | '\\t' | ' ' )*
            loop35:
            do {
                int alt35=4;
                alt35 = dfa35.predict(input);
                switch (alt35) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:10: ( ( '\\u000C' )? ( '\\r' )? '\\n' )
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:10: ( ( '\\u000C' )? ( '\\r' )? '\\n' )
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:11: ( '\\u000C' )? ( '\\r' )? '\\n'
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:11: ( '\\u000C' )?
            	    int alt33=2;
            	    int LA33_0 = input.LA(1);

            	    if ( (LA33_0=='\f') ) {
            	        alt33=1;
            	    }
            	    switch (alt33) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:12: '\\u000C'
            	            {
            	            match('\f'); 

            	            }
            	            break;

            	    }


            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:22: ( '\\r' )?
            	    int alt34=2;
            	    int LA34_0 = input.LA(1);

            	    if ( (LA34_0=='\r') ) {
            	        alt34=1;
            	    }
            	    switch (alt34) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:23: '\\r'
            	            {
            	            match('\r'); 

            	            }
            	            break;

            	    }


            	    match('\n'); 

            	    }


            	    }
            	    break;
            	case 2 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:39: '\\t'
            	    {
            	    match('\t'); 

            	    }
            	    break;
            	case 3 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:46: ' '
            	    {
            	    match(' '); 

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:53: ( ( '\\u000C' )? ( '\\r' )? '\\n' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:54: ( '\\u000C' )? ( '\\r' )? '\\n'
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:54: ( '\\u000C' )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0=='\f') ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:55: '\\u000C'
                    {
                    match('\f'); 

                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:65: ( '\\r' )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0=='\r') ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:693:66: '\\r'
                    {
                    match('\r'); 

                    }
                    break;

            }


            match('\n'); 

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:694:19: (leading_space= ( ' ' | '\\t' ) )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0=='\t'||LA39_0==' ') ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:694:19: leading_space= ( ' ' | '\\t' )
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:694:21: ( ' ' | '\\t' )
            	    int alt38=2;
            	    int LA38_0 = input.LA(1);

            	    if ( (LA38_0==' ') ) {
            	        alt38=1;
            	    }
            	    else if ( (LA38_0=='\t') ) {
            	        alt38=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 38, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt38) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:694:22: ' '
            	            {
            	            match(' '); 

            	             spaces++; 

            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:694:43: '\\t'
            	            {
            	            match('\t'); 

            	             spaces += 8; spaces -= (spaces % 8); 

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);



                  if ( startPos==0 || implicitLineJoiningLevel>0 )
                    _channel=HIDDEN;
                    

                  else if (implicitLineJoiningLevel==0)
                  {
                    if ( spaces > IndentStack[sp] ) {
                      //System.out.println("Indent: " + spaces + " "+ sp);
                      sp = sp+1;
                      IndentStack[sp] = spaces;
                      //System.out.println("Indent Insert: " + spaces + " "+ sp);
                      emit(new ClassicToken(INDENT,">>>"));

                    }
                    else
                    {
                      while (spaces < IndentStack[sp]) {
                        count++;
                        //System.out.println("Dedent: " + spaces + " " + sp);
                        sp = sp - 1;
                        //System.out.println("Dedent Insert: " + spaces + " "+ sp);
                        tokenQueue.add(new ClassicToken(DEDENT,"<<<"));
                        //emit(new ClassicToken(DEDENT,"<<<"));
                      }
                      //System.out.println("Count: " + count);
                    }

                  }

                    

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "NEWLINE"

    // $ANTLR start "WS"
    public final void mWS() throws RecognitionException {
        try {
            int _type = WS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:713:5: ({...}? => ( ' ' | '\\t' | '\\u000C' )+ )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:713:10: {...}? => ( ' ' | '\\t' | '\\u000C' )+
            {
            if ( !((startPos>0)) ) {
                throw new FailedPredicateException(input, "WS", "startPos>0");
            }

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:713:26: ( ' ' | '\\t' | '\\u000C' )+
            int cnt40=0;
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0=='\t'||LA40_0=='\f'||LA40_0==' ') ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
            	    {
            	    if ( input.LA(1)=='\t'||input.LA(1)=='\f'||input.LA(1)==' ' ) {
            	        input.consume();
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);


            _channel=HIDDEN;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "WS"

    // $ANTLR start "LEADING_WS"
    public final void mLEADING_WS() throws RecognitionException {
        try {
            int _type = LEADING_WS;
            int _channel = DEFAULT_TOKEN_CHANNEL;

                int spaces = 0;

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:732:5: ({...}? => ({...}? ( ' ' | '\\t' )+ | ( ' ' | '\\t' )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:732:9: {...}? => ({...}? ( ' ' | '\\t' )+ | ( ' ' | '\\t' )+ )
            {
            if ( !((startPos==0)) ) {
                throw new FailedPredicateException(input, "LEADING_WS", "startPos==0");
            }

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:733:9: ({...}? ( ' ' | '\\t' )+ | ( ' ' | '\\t' )+ )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==' ') ) {
                int LA43_1 = input.LA(2);

                if ( ((implicitLineJoiningLevel>0)) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA43_0=='\t') ) {
                int LA43_2 = input.LA(2);

                if ( ((implicitLineJoiningLevel>0)) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 2, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:733:13: {...}? ( ' ' | '\\t' )+
                    {
                    if ( !((implicitLineJoiningLevel>0)) ) {
                        throw new FailedPredicateException(input, "LEADING_WS", "implicitLineJoiningLevel>0");
                    }

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:733:43: ( ' ' | '\\t' )+
                    int cnt41=0;
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0=='\t'||LA41_0==' ') ) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
                    	    {
                    	    if ( input.LA(1)=='\t'||input.LA(1)==' ' ) {
                    	        input.consume();
                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;
                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt41 >= 1 ) break loop41;
                                EarlyExitException eee =
                                    new EarlyExitException(41, input);
                                throw eee;
                        }
                        cnt41++;
                    } while (true);


                    _channel=HIDDEN;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:734:17: ( ' ' | '\\t' )+
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:734:17: ( ' ' | '\\t' )+
                    int cnt42=0;
                    loop42:
                    do {
                        int alt42=3;
                        int LA42_0 = input.LA(1);

                        if ( (LA42_0==' ') ) {
                            alt42=1;
                        }
                        else if ( (LA42_0=='\t') ) {
                            alt42=2;
                        }


                        switch (alt42) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:734:23: ' '
                    	    {
                    	    match(' '); 

                    	     spaces++; 

                    	    }
                    	    break;
                    	case 2 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:735:18: '\\t'
                    	    {
                    	    match('\t'); 

                    	     spaces += 8; spaces -= (spaces % 8); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt42 >= 1 ) break loop42;
                                EarlyExitException eee =
                                    new EarlyExitException(42, input);
                                throw eee;
                        }
                        cnt42++;
                    } while (true);



                                // make a string of n spaces where n is column number - 1
                                char[] indentation = new char[spaces];
                                for (int i=0; i<spaces; i++) {
                                    indentation[i] = ' ';
                                }
                                String s = new String(indentation);
                                emit(new ClassicToken(LEADING_WS,new String(indentation)));
                                

                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "LEADING_WS"

    // $ANTLR start "COMMENT"
    public final void mCOMMENT() throws RecognitionException {
        try {
            int _type = COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;

                _channel=HIDDEN;

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:784:5: ({...}? => ( ' ' | '\\t' )* '#' (~ '\\n' )* ( '\\n' )+ |{...}? => '#' (~ '\\n' )* )
            int alt48=2;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:784:10: {...}? => ( ' ' | '\\t' )* '#' (~ '\\n' )* ( '\\n' )+
                    {
                    if ( !((startPos==-1)) ) {
                        throw new FailedPredicateException(input, "COMMENT", "startPos==-1");
                    }

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:784:28: ( ' ' | '\\t' )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0=='\t'||LA44_0==' ') ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
                    	    {
                    	    if ( input.LA(1)=='\t'||input.LA(1)==' ' ) {
                    	        input.consume();
                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;
                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);


                    match('#'); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:784:44: (~ '\\n' )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( ((LA45_0 >= '\u0000' && LA45_0 <= '\t')||(LA45_0 >= '\u000B' && LA45_0 <= '\uFFFF')) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
                    	    {
                    	    if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '\t')||(input.LA(1) >= '\u000B' && input.LA(1) <= '\uFFFF') ) {
                    	        input.consume();
                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;
                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:784:53: ( '\\n' )+
                    int cnt46=0;
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( (LA46_0=='\n') ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:784:53: '\\n'
                    	    {
                    	    match('\n'); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt46 >= 1 ) break loop46;
                                EarlyExitException eee =
                                    new EarlyExitException(46, input);
                                throw eee;
                        }
                        cnt46++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:785:10: {...}? => '#' (~ '\\n' )*
                    {
                    if ( !((startPos>-1)) ) {
                        throw new FailedPredicateException(input, "COMMENT", "startPos>-1");
                    }

                    match('#'); 

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:785:31: (~ '\\n' )*
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( ((LA47_0 >= '\u0000' && LA47_0 <= '\t')||(LA47_0 >= '\u000B' && LA47_0 <= '\uFFFF')) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:
                    	    {
                    	    if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '\t')||(input.LA(1) >= '\u000B' && input.LA(1) <= '\uFFFF') ) {
                    	        input.consume();
                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;
                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop47;
                        }
                    } while (true);


                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        	// do for sure before leaving
        }
    }
    // $ANTLR end "COMMENT"

    public void mTokens() throws RecognitionException {
        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:8: ( DEDENT | INDENT | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | T__141 | T__142 | LPAREN | RPAREN | LBRACK | RBRACK | COLON | COMMA | SEMI | PLUS | MINUS | STAR | SLASH | VBAR | AMPER | LESS | GREATER | ASSIGN | PERCENT | BACKQUOTE | LCURLY | RCURLY | CIRCUMFLEX | TILDE | EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESSEQUAL | LEFTSHIFT | GREATEREQUAL | RIGHTSHIFT | PLUSEQUAL | MINUSEQUAL | DOUBLESTAR | STAREQUAL | DOUBLESLASH | SLASHEQUAL | VBAREQUAL | PERCENTEQUAL | AMPEREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL | DOT | AT | AND | OR | NOT | IN | NOTIN | IS | ISNOT | PRINT | AS | IF | FLOAT | LONGINT | INT | COMPLEX | DOTTED_NAME | NAME | IMPORT_NAME | STRING | CONTINUED_LINE | NEWLINE | WS | LEADING_WS | COMMENT )
        int alt49=91;
        alt49 = dfa49.predict(input);
        switch (alt49) {
            case 1 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:10: DEDENT
                {
                mDEDENT(); 


                }
                break;
            case 2 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:17: INDENT
                {
                mINDENT(); 


                }
                break;
            case 3 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:24: T__122
                {
                mT__122(); 


                }
                break;
            case 4 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:31: T__123
                {
                mT__123(); 


                }
                break;
            case 5 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:38: T__124
                {
                mT__124(); 


                }
                break;
            case 6 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:45: T__125
                {
                mT__125(); 


                }
                break;
            case 7 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:52: T__126
                {
                mT__126(); 


                }
                break;
            case 8 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:59: T__127
                {
                mT__127(); 


                }
                break;
            case 9 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:66: T__128
                {
                mT__128(); 


                }
                break;
            case 10 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:73: T__129
                {
                mT__129(); 


                }
                break;
            case 11 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:80: T__130
                {
                mT__130(); 


                }
                break;
            case 12 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:87: T__131
                {
                mT__131(); 


                }
                break;
            case 13 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:94: T__132
                {
                mT__132(); 


                }
                break;
            case 14 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:101: T__133
                {
                mT__133(); 


                }
                break;
            case 15 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:108: T__134
                {
                mT__134(); 


                }
                break;
            case 16 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:115: T__135
                {
                mT__135(); 


                }
                break;
            case 17 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:122: T__136
                {
                mT__136(); 


                }
                break;
            case 18 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:129: T__137
                {
                mT__137(); 


                }
                break;
            case 19 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:136: T__138
                {
                mT__138(); 


                }
                break;
            case 20 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:143: T__139
                {
                mT__139(); 


                }
                break;
            case 21 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:150: T__140
                {
                mT__140(); 


                }
                break;
            case 22 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:157: T__141
                {
                mT__141(); 


                }
                break;
            case 23 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:164: T__142
                {
                mT__142(); 


                }
                break;
            case 24 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:171: LPAREN
                {
                mLPAREN(); 


                }
                break;
            case 25 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:178: RPAREN
                {
                mRPAREN(); 


                }
                break;
            case 26 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:185: LBRACK
                {
                mLBRACK(); 


                }
                break;
            case 27 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:192: RBRACK
                {
                mRBRACK(); 


                }
                break;
            case 28 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:199: COLON
                {
                mCOLON(); 


                }
                break;
            case 29 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:205: COMMA
                {
                mCOMMA(); 


                }
                break;
            case 30 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:211: SEMI
                {
                mSEMI(); 


                }
                break;
            case 31 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:216: PLUS
                {
                mPLUS(); 


                }
                break;
            case 32 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:221: MINUS
                {
                mMINUS(); 


                }
                break;
            case 33 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:227: STAR
                {
                mSTAR(); 


                }
                break;
            case 34 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:232: SLASH
                {
                mSLASH(); 


                }
                break;
            case 35 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:238: VBAR
                {
                mVBAR(); 


                }
                break;
            case 36 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:243: AMPER
                {
                mAMPER(); 


                }
                break;
            case 37 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:249: LESS
                {
                mLESS(); 


                }
                break;
            case 38 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:254: GREATER
                {
                mGREATER(); 


                }
                break;
            case 39 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:262: ASSIGN
                {
                mASSIGN(); 


                }
                break;
            case 40 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:269: PERCENT
                {
                mPERCENT(); 


                }
                break;
            case 41 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:277: BACKQUOTE
                {
                mBACKQUOTE(); 


                }
                break;
            case 42 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:287: LCURLY
                {
                mLCURLY(); 


                }
                break;
            case 43 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:294: RCURLY
                {
                mRCURLY(); 


                }
                break;
            case 44 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:301: CIRCUMFLEX
                {
                mCIRCUMFLEX(); 


                }
                break;
            case 45 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:312: TILDE
                {
                mTILDE(); 


                }
                break;
            case 46 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:318: EQUAL
                {
                mEQUAL(); 


                }
                break;
            case 47 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:324: NOTEQUAL
                {
                mNOTEQUAL(); 


                }
                break;
            case 48 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:333: ALT_NOTEQUAL
                {
                mALT_NOTEQUAL(); 


                }
                break;
            case 49 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:346: LESSEQUAL
                {
                mLESSEQUAL(); 


                }
                break;
            case 50 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:356: LEFTSHIFT
                {
                mLEFTSHIFT(); 


                }
                break;
            case 51 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:366: GREATEREQUAL
                {
                mGREATEREQUAL(); 


                }
                break;
            case 52 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:379: RIGHTSHIFT
                {
                mRIGHTSHIFT(); 


                }
                break;
            case 53 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:390: PLUSEQUAL
                {
                mPLUSEQUAL(); 


                }
                break;
            case 54 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:400: MINUSEQUAL
                {
                mMINUSEQUAL(); 


                }
                break;
            case 55 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:411: DOUBLESTAR
                {
                mDOUBLESTAR(); 


                }
                break;
            case 56 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:422: STAREQUAL
                {
                mSTAREQUAL(); 


                }
                break;
            case 57 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:432: DOUBLESLASH
                {
                mDOUBLESLASH(); 


                }
                break;
            case 58 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:444: SLASHEQUAL
                {
                mSLASHEQUAL(); 


                }
                break;
            case 59 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:455: VBAREQUAL
                {
                mVBAREQUAL(); 


                }
                break;
            case 60 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:465: PERCENTEQUAL
                {
                mPERCENTEQUAL(); 


                }
                break;
            case 61 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:478: AMPEREQUAL
                {
                mAMPEREQUAL(); 


                }
                break;
            case 62 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:489: CIRCUMFLEXEQUAL
                {
                mCIRCUMFLEXEQUAL(); 


                }
                break;
            case 63 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:505: LEFTSHIFTEQUAL
                {
                mLEFTSHIFTEQUAL(); 


                }
                break;
            case 64 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:520: RIGHTSHIFTEQUAL
                {
                mRIGHTSHIFTEQUAL(); 


                }
                break;
            case 65 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:536: DOUBLESTAREQUAL
                {
                mDOUBLESTAREQUAL(); 


                }
                break;
            case 66 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:552: DOUBLESLASHEQUAL
                {
                mDOUBLESLASHEQUAL(); 


                }
                break;
            case 67 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:569: DOT
                {
                mDOT(); 


                }
                break;
            case 68 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:573: AT
                {
                mAT(); 


                }
                break;
            case 69 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:576: AND
                {
                mAND(); 


                }
                break;
            case 70 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:580: OR
                {
                mOR(); 


                }
                break;
            case 71 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:583: NOT
                {
                mNOT(); 


                }
                break;
            case 72 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:587: IN
                {
                mIN(); 


                }
                break;
            case 73 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:590: NOTIN
                {
                mNOTIN(); 


                }
                break;
            case 74 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:596: IS
                {
                mIS(); 


                }
                break;
            case 75 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:599: ISNOT
                {
                mISNOT(); 


                }
                break;
            case 76 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:605: PRINT
                {
                mPRINT(); 


                }
                break;
            case 77 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:611: AS
                {
                mAS(); 


                }
                break;
            case 78 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:614: IF
                {
                mIF(); 


                }
                break;
            case 79 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:617: FLOAT
                {
                mFLOAT(); 


                }
                break;
            case 80 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:623: LONGINT
                {
                mLONGINT(); 


                }
                break;
            case 81 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:631: INT
                {
                mINT(); 


                }
                break;
            case 82 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:635: COMPLEX
                {
                mCOMPLEX(); 


                }
                break;
            case 83 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:643: DOTTED_NAME
                {
                mDOTTED_NAME(); 


                }
                break;
            case 84 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:655: NAME
                {
                mNAME(); 


                }
                break;
            case 85 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:660: IMPORT_NAME
                {
                mIMPORT_NAME(); 


                }
                break;
            case 86 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:672: STRING
                {
                mSTRING(); 


                }
                break;
            case 87 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:679: CONTINUED_LINE
                {
                mCONTINUED_LINE(); 


                }
                break;
            case 88 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:694: NEWLINE
                {
                mNEWLINE(); 


                }
                break;
            case 89 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:702: WS
                {
                mWS(); 


                }
                break;
            case 90 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:705: LEADING_WS
                {
                mLEADING_WS(); 


                }
                break;
            case 91 :
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:1:716: COMMENT
                {
                mCOMMENT(); 


                }
                break;

        }

    }


    protected DFA5 dfa5 = new DFA5(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    static final String DFA5_eotS =
        "\3\uffff\1\4\2\uffff";
    static final String DFA5_eofS =
        "\6\uffff";
    static final String DFA5_minS =
        "\1\56\1\uffff\1\56\1\105\2\uffff";
    static final String DFA5_maxS =
        "\1\71\1\uffff\2\145\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\1\2\uffff\1\3\1\2";
    static final String DFA5_specialS =
        "\6\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\uffff\12\2",
            "",
            "\1\3\1\uffff\12\2\13\uffff\1\4\37\uffff\1\4",
            "\1\5\37\uffff\1\5",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "573:1: FLOAT : ( '.' DIGITS ( Exponent )? | DIGITS '.' Exponent | DIGITS ( '.' ( DIGITS ( Exponent )? )? | Exponent ) );";
        }
    }
    static final String DFA14_eotS =
        "\7\uffff";
    static final String DFA14_eofS =
        "\7\uffff";
    static final String DFA14_minS =
        "\1\55\1\uffff\2\56\1\uffff\2\56";
    static final String DFA14_maxS =
        "\1\71\1\uffff\1\170\1\152\1\uffff\2\152";
    static final String DFA14_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\2\uffff";
    static final String DFA14_specialS =
        "\7\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\1\1\4\1\uffff\1\2\11\3",
            "",
            "\1\4\1\uffff\12\5\13\uffff\1\4\4\uffff\1\1\15\uffff\1\1\14"+
            "\uffff\1\4\4\uffff\1\1\15\uffff\1\1",
            "\1\4\1\uffff\12\6\13\uffff\1\4\4\uffff\1\1\32\uffff\1\4\4\uffff"+
            "\1\1",
            "",
            "\1\4\1\uffff\12\5\13\uffff\1\4\4\uffff\1\1\32\uffff\1\4\4\uffff"+
            "\1\1",
            "\1\4\1\uffff\12\6\13\uffff\1\4\4\uffff\1\1\32\uffff\1\4\4\uffff"+
            "\1\1"
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "595:1: COMPLEX : ( INT ( 'j' | 'J' ) | FLOAT ( 'j' | 'J' ) );";
        }
    }
    static final String DFA35_eotS =
        "\3\uffff\1\10\2\uffff\2\10\2\uffff";
    static final String DFA35_eofS =
        "\12\uffff";
    static final String DFA35_minS =
        "\1\11\2\12\1\11\2\uffff\2\11\2\uffff";
    static final String DFA35_maxS =
        "\1\40\1\15\1\12\1\40\2\uffff\2\40\2\uffff";
    static final String DFA35_acceptS =
        "\4\uffff\1\2\1\3\2\uffff\1\4\1\1";
    static final String DFA35_specialS =
        "\12\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\4\1\3\1\uffff\1\1\1\2\22\uffff\1\5",
            "\1\3\2\uffff\1\2",
            "\1\3",
            "\1\7\1\11\1\uffff\2\11\22\uffff\1\6",
            "",
            "",
            "\1\7\1\11\1\uffff\2\11\22\uffff\1\6",
            "\1\7\1\11\1\uffff\2\11\22\uffff\1\6",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "()* loopback of 693:9: ( ( ( '\\u000C' )? ( '\\r' )? '\\n' ) | '\\t' | ' ' )*";
        }
    }
    static final String DFA48_eotS =
        "\2\uffff\2\4\1\uffff";
    static final String DFA48_eofS =
        "\5\uffff";
    static final String DFA48_minS =
        "\1\11\1\uffff\2\0\1\uffff";
    static final String DFA48_maxS =
        "\1\43\1\uffff\2\uffff\1\uffff";
    static final String DFA48_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA48_specialS =
        "\1\2\1\uffff\1\1\1\0\1\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\1\26\uffff\1\1\2\uffff\1\2",
            "",
            "\12\3\1\1\ufff5\3",
            "\12\3\1\1\ufff5\3",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "780:1: COMMENT : ({...}? => ( ' ' | '\\t' )* '#' (~ '\\n' )* ( '\\n' )+ |{...}? => '#' (~ '\\n' )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            IntStream input = _input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_3 = input.LA(1);

                         
                        int index48_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_3=='\n') && ((startPos==-1))) {s = 1;}

                        else if ( ((LA48_3 >= '\u0000' && LA48_3 <= '\t')||(LA48_3 >= '\u000B' && LA48_3 <= '\uFFFF')) && (((startPos==-1)||(startPos>-1)))) {s = 3;}

                        else s = 4;

                         
                        input.seek(index48_3);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA48_2 >= '\u0000' && LA48_2 <= '\t')||(LA48_2 >= '\u000B' && LA48_2 <= '\uFFFF')) && (((startPos==-1)||(startPos>-1)))) {s = 3;}

                        else if ( (LA48_2=='\n') && ((startPos==-1))) {s = 1;}

                        else s = 4;

                         
                        input.seek(index48_2);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA48_0 = input.LA(1);

                         
                        int index48_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA48_0=='\t'||LA48_0==' ') && ((startPos==-1))) {s = 1;}

                        else if ( (LA48_0=='#') && (((startPos==-1)||(startPos>-1)))) {s = 2;}

                         
                        input.seek(index48_0);

                        if ( s>=0 ) return s;
                        break;
            }
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA49_eotS =
        "\1\uffff\1\66\1\71\14\75\7\uffff\1\125\1\127\1\134\1\137\1\141\1"+
        "\143\1\145\1\147\3\uffff\1\151\2\uffff\1\152\1\uffff\2\75\2\160"+
        "\2\75\2\uffff\1\170\1\uffff\2\171\1\uffff\1\175\3\uffff\1\u0080"+
        "\2\uffff\1\u0082\2\75\1\uffff\1\154\13\75\1\u0093\1\u0095\1\u0096"+
        "\7\75\4\uffff\2\160\1\u00a1\2\uffff\1\u00a3\15\uffff\1\u00a4\1\uffff"+
        "\1\u00a7\1\75\2\uffff\1\u00a4\1\160\3\uffff\1\160\1\75\11\uffff"+
        "\1\75\1\uffff\1\u00b0\1\u00b2\3\75\1\u00b6\1\u00b7\5\75\1\u00bd"+
        "\3\75\4\uffff\4\75\1\u00c5\2\75\2\160\5\uffff\1\154\1\165\1\uffff"+
        "\1\u00cb\1\160\1\uffff\1\u00a4\1\uffff\1\u00a4\1\uffff\1\75\1\uffff"+
        "\1\u00b2\1\uffff\3\75\2\uffff\1\u00d3\1\u00d4\1\75\1\u00d6\1\75"+
        "\1\uffff\1\u00d8\2\75\1\u00db\3\75\1\uffff\1\75\1\u00e0\1\uffff"+
        "\1\u00a4\3\uffff\1\u00a4\1\uffff\1\75\1\u00e5\1\u00e6\1\75\2\uffff"+
        "\1\75\1\uffff\1\75\1\uffff\2\75\1\uffff\1\u00ec\1\u00ed\1\75\1\u00ef"+
        "\1\uffff\1\u00a4\1\uffff\1\u00a4\1\u00f0\2\uffff\1\75\1\u00f2\1"+
        "\75\1\u00f4\1\u00f5\2\uffff\1\u00f6\2\uffff\1\75\1\uffff\1\u00f8"+
        "\3\uffff\1\u00f9\2\uffff";
    static final String DFA49_eofS =
        "\u00fa\uffff";
    static final String DFA49_minS =
        "\1\11\1\74\1\75\11\56\1\42\2\56\7\uffff\1\75\1\60\1\52\1\57\4\75"+
        "\3\uffff\1\75\2\uffff\1\56\1\uffff\4\56\1\42\1\56\2\uffff\1\12\1"+
        "\uffff\2\11\1\uffff\1\74\3\uffff\1\75\2\uffff\3\56\1\uffff\1\101"+
        "\14\56\1\40\10\56\4\uffff\2\60\1\75\2\uffff\1\75\15\uffff\1\56\1"+
        "\uffff\2\56\1\60\1\uffff\1\60\1\56\1\53\2\uffff\1\56\1\42\1\uffff"+
        "\1\0\7\uffff\1\56\1\uffff\20\56\4\uffff\7\56\2\60\5\uffff\1\53\1"+
        "\56\1\uffff\1\40\1\60\1\53\3\60\1\uffff\1\56\1\uffff\1\56\1\uffff"+
        "\3\56\2\uffff\5\56\1\uffff\7\56\1\uffff\2\56\1\60\1\56\2\uffff\2"+
        "\60\1\53\4\56\2\uffff\1\56\1\uffff\1\56\1\uffff\2\56\1\uffff\4\56"+
        "\1\uffff\3\60\1\56\2\uffff\5\56\2\uffff\1\56\2\uffff\1\56\1\uffff"+
        "\1\56\3\uffff\1\56\2\uffff";
    static final String DFA49_maxS =
        "\1\176\2\76\14\172\7\uffff\10\75\3\uffff\1\75\2\uffff\1\172\1\uffff"+
        "\2\172\1\170\1\154\2\172\2\uffff\1\15\1\uffff\2\43\1\uffff\1\75"+
        "\3\uffff\1\76\2\uffff\3\172\1\uffff\26\172\4\uffff\1\170\1\154\1"+
        "\75\2\uffff\1\75\15\uffff\1\172\1\uffff\2\172\1\146\1\uffff\1\152"+
        "\1\154\1\71\2\uffff\1\154\1\172\1\uffff\1\0\7\uffff\1\172\1\uffff"+
        "\20\172\4\uffff\7\172\2\154\5\uffff\1\71\1\172\1\uffff\1\172\1\154"+
        "\1\71\1\152\1\71\1\152\1\uffff\1\172\1\uffff\1\172\1\uffff\3\172"+
        "\2\uffff\5\172\1\uffff\7\172\1\uffff\2\172\1\71\1\172\2\uffff\1"+
        "\71\1\152\1\71\4\172\2\uffff\1\172\1\uffff\1\172\1\uffff\2\172\1"+
        "\uffff\4\172\1\uffff\1\152\1\71\1\152\1\172\2\uffff\5\172\2\uffff"+
        "\1\172\2\uffff\1\172\1\uffff\1\172\3\uffff\1\172\2\uffff";
    static final String DFA49_acceptS =
        "\17\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\36\10\uffff\1\51\1\52"+
        "\1\53\1\uffff\1\55\1\57\1\uffff\1\104\6\uffff\1\126\1\127\1\uffff"+
        "\1\130\2\uffff\1\133\1\uffff\1\60\1\61\1\45\1\uffff\1\63\1\46\3"+
        "\uffff\1\124\26\uffff\1\65\1\37\1\66\1\40\3\uffff\1\70\1\41\1\uffff"+
        "\1\72\1\42\1\73\1\43\1\75\1\44\1\56\1\47\1\74\1\50\1\76\1\54\1\103"+
        "\1\uffff\1\125\3\uffff\1\121\3\uffff\1\120\1\122\2\uffff\1\131\1"+
        "\uffff\1\133\1\1\1\77\1\62\1\2\1\100\1\64\1\uffff\1\115\20\uffff"+
        "\1\110\1\113\1\112\1\116\11\uffff\1\101\1\67\1\102\1\71\1\117\2"+
        "\uffff\1\106\6\uffff\1\132\1\uffff\1\105\1\uffff\1\123\3\uffff\1"+
        "\7\1\10\5\uffff\1\16\7\uffff\1\25\4\uffff\1\111\1\107\7\uffff\1"+
        "\11\1\12\1\uffff\1\14\1\uffff\1\17\2\uffff\1\22\4\uffff\1\27\4\uffff"+
        "\1\4\1\5\5\uffff\1\114\1\23\1\uffff\1\26\1\3\1\uffff\1\13\1\uffff"+
        "\1\20\1\21\1\24\1\uffff\1\15\1\6";
    static final String DFA49_specialS =
        "\1\3\55\uffff\1\4\1\uffff\1\1\1\2\107\uffff\1\0\u0080\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\60\1\57\1\uffff\1\56\1\57\22\uffff\1\61\1\43\1\54\1\62\1"+
            "\uffff\1\35\1\33\1\54\1\17\1\20\1\30\1\26\1\24\1\27\1\44\1\31"+
            "\1\50\11\51\1\23\1\25\1\1\1\34\1\2\1\uffff\1\45\32\53\1\21\1"+
            "\55\1\22\1\41\1\53\1\36\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\53\1"+
            "\12\4\53\1\47\1\46\1\13\1\53\1\14\1\53\1\15\1\52\1\53\1\16\3"+
            "\53\1\37\1\32\1\40\1\42",
            "\1\63\1\65\1\64",
            "\1\70\1\67",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\15\74"+
            "\1\73\4\74\1\72\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\21\74"+
            "\1\77\10\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\13\74"+
            "\1\100\2\74\1\101\13\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\4\74"+
            "\1\102\25\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\13\74"+
            "\1\103\13\74\1\104\2\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\10\74"+
            "\1\105\5\74\1\106\2\74\1\107\10\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\13\74"+
            "\1\110\16\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\5\74"+
            "\1\114\6\74\1\111\1\112\4\74\1\113\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\1\115"+
            "\20\74\1\116\10\74",
            "\1\54\4\uffff\1\54\6\uffff\1\76\1\uffff\12\74\7\uffff\32\74"+
            "\4\uffff\1\74\1\uffff\1\117\3\74\1\120\25\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\21\74"+
            "\1\121\10\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\7\74"+
            "\1\122\1\123\21\74",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\124",
            "\1\130\11\131\3\uffff\1\126",
            "\1\132\22\uffff\1\133",
            "\1\135\15\uffff\1\136",
            "\1\140",
            "\1\142",
            "\1\144",
            "\1\146",
            "",
            "",
            "",
            "\1\150",
            "",
            "",
            "\1\154\1\uffff\12\153\7\uffff\32\154\4\uffff\1\154\1\uffff"+
            "\32\154",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\21\74"+
            "\1\155\10\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\16\74"+
            "\1\156\13\74",
            "\1\161\1\uffff\12\162\13\uffff\1\163\4\uffff\1\165\1\uffff"+
            "\1\164\13\uffff\1\157\14\uffff\1\163\4\uffff\1\165\1\uffff\1"+
            "\164\13\uffff\1\157",
            "\1\161\1\uffff\12\166\13\uffff\1\163\4\uffff\1\165\1\uffff"+
            "\1\164\30\uffff\1\163\4\uffff\1\165\1\uffff\1\164",
            "\1\54\4\uffff\1\54\6\uffff\1\76\1\uffff\12\74\7\uffff\32\74"+
            "\4\uffff\1\74\1\uffff\21\74\1\167\10\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "",
            "",
            "\1\57\2\uffff\1\57",
            "",
            "\1\60\1\57\1\uffff\1\56\1\57\22\uffff\1\61\2\uffff\1\172",
            "\1\60\1\57\1\uffff\1\56\1\57\22\uffff\1\61\2\uffff\1\172",
            "",
            "\1\173\1\174",
            "",
            "",
            "",
            "\1\177\1\176",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\22\74"+
            "\1\u0081\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\3\74"+
            "\1\u0083\26\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "",
            "\32\u0084\4\uffff\1\u0084\1\uffff\32\u0084",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\4\74"+
            "\1\u0085\25\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\1\u0086"+
            "\31\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\15\74"+
            "\1\u0087\14\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\5\74"+
            "\1\u0088\5\74\1\u0089\16\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\10\74"+
            "\1\u008a\11\74\1\u008b\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\2\74"+
            "\1\u008c\1\74\1\u008d\25\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\15\74"+
            "\1\u008e\14\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\21\74"+
            "\1\u008f\10\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\16\74"+
            "\1\u0090\13\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\16\74"+
            "\1\u0091\13\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\17\74"+
            "\1\u0092\12\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\u0094\15\uffff\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff"+
            "\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\22\74"+
            "\1\u0097\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\10\74"+
            "\1\u0098\21\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\10\74"+
            "\1\u0099\21\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\23\74"+
            "\1\u009a\6\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\30\74"+
            "\1\u009b\1\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\10\74"+
            "\1\u009c\21\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\23\74"+
            "\1\u009d\6\74",
            "",
            "",
            "",
            "",
            "\12\u009e\20\uffff\1\165\1\uffff\1\164\13\uffff\1\157\21\uffff"+
            "\1\165\1\uffff\1\164\13\uffff\1\157",
            "\12\u009f\20\uffff\1\165\1\uffff\1\164\35\uffff\1\165\1\uffff"+
            "\1\164",
            "\1\u00a0",
            "",
            "",
            "\1\u00a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\154\1\uffff\12\153\7\uffff\4\154\1\u00a5\4\154\1\u00a6\20"+
            "\154\4\uffff\1\154\1\uffff\4\154\1\u00a5\4\154\1\u00a6\20\154",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\23\74"+
            "\1\u00a8\6\74",
            "\12\u00a9\7\uffff\6\u00a9\32\uffff\6\u00a9",
            "",
            "\12\u00ab\13\uffff\1\u00aa\4\uffff\1\165\32\uffff\1\u00aa\4"+
            "\uffff\1\165",
            "\1\161\1\uffff\12\162\13\uffff\1\163\4\uffff\1\165\1\uffff"+
            "\1\164\30\uffff\1\163\4\uffff\1\165\1\uffff\1\164",
            "\1\u00ac\1\uffff\1\u00ac\2\uffff\12\u00ad",
            "",
            "",
            "\1\161\1\uffff\12\166\13\uffff\1\163\4\uffff\1\165\1\uffff"+
            "\1\164\30\uffff\1\163\4\uffff\1\165\1\uffff\1\164",
            "\1\54\4\uffff\1\54\6\uffff\1\76\1\uffff\12\74\7\uffff\32\74"+
            "\4\uffff\1\74\1\uffff\32\74",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\4\74"+
            "\1\u00af\25\74",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\154\1\uffff\12\u00b1\7\uffff\32\u00b1\4\uffff\1\u00b1\1"+
            "\uffff\32\u00b1",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\1\u00b3"+
            "\31\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\22\74"+
            "\1\u00b4\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\23\74"+
            "\1\u00b5\6\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\5\74"+
            "\1\u00b8\24\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\4\74"+
            "\1\u00b9\25\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\4\74"+
            "\1\u00ba\25\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\2\74"+
            "\1\u00bb\27\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\1\u00bc"+
            "\31\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\14\74"+
            "\1\u00be\15\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\1\74"+
            "\1\u00bf\30\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\16\74"+
            "\1\u00c0\13\74",
            "",
            "",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\22\74"+
            "\1\u00c1\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\15\74"+
            "\1\u00c2\14\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\22\74"+
            "\1\u00c3\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\24\74"+
            "\1\u00c4\5\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\13\74"+
            "\1\u00c6\16\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\7\74"+
            "\1\u00c7\22\74",
            "\12\u009e\20\uffff\1\165\1\uffff\1\164\35\uffff\1\165\1\uffff"+
            "\1\164",
            "\12\u009f\20\uffff\1\165\1\uffff\1\164\35\uffff\1\165\1\uffff"+
            "\1\164",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c8\1\uffff\1\u00c8\2\uffff\12\u00c9",
            "\1\154\1\uffff\12\154\7\uffff\32\154\4\uffff\1\154\1\uffff"+
            "\32\154",
            "",
            "\1\u00ca\15\uffff\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff"+
            "\1\74\1\uffff\32\74",
            "\12\u00a9\7\uffff\6\u00a9\3\uffff\1\165\1\uffff\1\164\24\uffff"+
            "\6\u00a9\3\uffff\1\165\1\uffff\1\164",
            "\1\u00cc\1\uffff\1\u00cc\2\uffff\12\u00cd",
            "\12\u00ab\13\uffff\1\u00ce\4\uffff\1\165\32\uffff\1\u00ce\4"+
            "\uffff\1\165",
            "\12\u00ad",
            "\12\u00ad\20\uffff\1\165\37\uffff\1\165",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\21\74"+
            "\1\u00cf\10\74",
            "",
            "\1\154\1\uffff\12\u00b1\7\uffff\32\u00b1\4\uffff\1\u00b1\1"+
            "\uffff\32\u00b1",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\12\74"+
            "\1\u00d0\17\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\22\74"+
            "\1\u00d1\7\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\10\74"+
            "\1\u00d2\21\74",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\17\74"+
            "\1\u00d5\12\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\13\74"+
            "\1\u00d7\16\74",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\1\u00d9"+
            "\31\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\21\74"+
            "\1\u00da\10\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\23\74"+
            "\1\u00dc\6\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\4\74"+
            "\1\u00dd\25\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\21\74"+
            "\1\u00de\10\74",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\4\74"+
            "\1\u00df\25\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\12\u00e1",
            "\1\154\1\uffff\12\u00c9\7\uffff\11\154\1\u00a6\20\154\4\uffff"+
            "\1\154\1\uffff\11\154\1\u00a6\20\154",
            "",
            "",
            "\12\u00cd",
            "\12\u00cd\20\uffff\1\165\37\uffff\1\165",
            "\1\u00e2\1\uffff\1\u00e2\2\uffff\12\u00e3",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\23\74"+
            "\1\u00e4\6\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\15\74"+
            "\1\u00e7\14\74",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\23\74"+
            "\1\u00e8\6\74",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\13\74"+
            "\1\u00e9\16\74",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\13\74"+
            "\1\u00ea\16\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\23\74"+
            "\1\u00eb\6\74",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\15\74"+
            "\1\u00ee\14\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "",
            "\12\u00e1\20\uffff\1\165\37\uffff\1\165",
            "\12\u00e3",
            "\12\u00e3\20\uffff\1\165\37\uffff\1\165",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\24\74"+
            "\1\u00f1\5\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\30\74"+
            "\1\u00f3\1\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\4\74"+
            "\1\u00f7\25\74",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "",
            "",
            "",
            "\1\76\1\uffff\12\74\7\uffff\32\74\4\uffff\1\74\1\uffff\32\74",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "1:1: Tokens : ( DEDENT | INDENT | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | T__141 | T__142 | LPAREN | RPAREN | LBRACK | RBRACK | COLON | COMMA | SEMI | PLUS | MINUS | STAR | SLASH | VBAR | AMPER | LESS | GREATER | ASSIGN | PERCENT | BACKQUOTE | LCURLY | RCURLY | CIRCUMFLEX | TILDE | EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESSEQUAL | LEFTSHIFT | GREATEREQUAL | RIGHTSHIFT | PLUSEQUAL | MINUSEQUAL | DOUBLESTAR | STAREQUAL | DOUBLESLASH | SLASHEQUAL | VBAREQUAL | PERCENTEQUAL | AMPEREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL | DOT | AT | AND | OR | NOT | IN | NOTIN | IS | ISNOT | PRINT | AS | IF | FLOAT | LONGINT | INT | COMPLEX | DOTTED_NAME | NAME | IMPORT_NAME | STRING | CONTINUED_LINE | NEWLINE | WS | LEADING_WS | COMMENT );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            IntStream input = _input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_121 = input.LA(1);

                         
                        int index49_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((startPos>0)) ) {s = 120;}

                        else if ( ((startPos==0)) ) {s = 174;}

                         
                        input.seek(index49_121);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_48 = input.LA(1);

                         
                        int index49_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_48=='\f') ) {s = 46;}

                        else if ( (LA49_48=='\n'||LA49_48=='\r') ) {s = 47;}

                        else if ( (LA49_48=='\t') ) {s = 48;}

                        else if ( (LA49_48==' ') ) {s = 49;}

                        else if ( (LA49_48=='#') && ((startPos==-1))) {s = 122;}

                        else s = 121;

                         
                        input.seek(index49_48);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_49 = input.LA(1);

                         
                        int index49_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_49=='\f') ) {s = 46;}

                        else if ( (LA49_49=='\n'||LA49_49=='\r') ) {s = 47;}

                        else if ( (LA49_49=='\t') ) {s = 48;}

                        else if ( (LA49_49==' ') ) {s = 49;}

                        else if ( (LA49_49=='#') && ((startPos==-1))) {s = 122;}

                        else s = 121;

                         
                        input.seek(index49_49);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_0 = input.LA(1);

                         
                        int index49_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_0=='<') ) {s = 1;}

                        else if ( (LA49_0=='>') ) {s = 2;}

                        else if ( (LA49_0=='a') ) {s = 3;}

                        else if ( (LA49_0=='b') ) {s = 4;}

                        else if ( (LA49_0=='c') ) {s = 5;}

                        else if ( (LA49_0=='d') ) {s = 6;}

                        else if ( (LA49_0=='e') ) {s = 7;}

                        else if ( (LA49_0=='f') ) {s = 8;}

                        else if ( (LA49_0=='g') ) {s = 9;}

                        else if ( (LA49_0=='i') ) {s = 10;}

                        else if ( (LA49_0=='p') ) {s = 11;}

                        else if ( (LA49_0=='r') ) {s = 12;}

                        else if ( (LA49_0=='t') ) {s = 13;}

                        else if ( (LA49_0=='w') ) {s = 14;}

                        else if ( (LA49_0=='(') ) {s = 15;}

                        else if ( (LA49_0==')') ) {s = 16;}

                        else if ( (LA49_0=='[') ) {s = 17;}

                        else if ( (LA49_0==']') ) {s = 18;}

                        else if ( (LA49_0==':') ) {s = 19;}

                        else if ( (LA49_0==',') ) {s = 20;}

                        else if ( (LA49_0==';') ) {s = 21;}

                        else if ( (LA49_0=='+') ) {s = 22;}

                        else if ( (LA49_0=='-') ) {s = 23;}

                        else if ( (LA49_0=='*') ) {s = 24;}

                        else if ( (LA49_0=='/') ) {s = 25;}

                        else if ( (LA49_0=='|') ) {s = 26;}

                        else if ( (LA49_0=='&') ) {s = 27;}

                        else if ( (LA49_0=='=') ) {s = 28;}

                        else if ( (LA49_0=='%') ) {s = 29;}

                        else if ( (LA49_0=='`') ) {s = 30;}

                        else if ( (LA49_0=='{') ) {s = 31;}

                        else if ( (LA49_0=='}') ) {s = 32;}

                        else if ( (LA49_0=='^') ) {s = 33;}

                        else if ( (LA49_0=='~') ) {s = 34;}

                        else if ( (LA49_0=='!') ) {s = 35;}

                        else if ( (LA49_0=='.') ) {s = 36;}

                        else if ( (LA49_0=='@') ) {s = 37;}

                        else if ( (LA49_0=='o') ) {s = 38;}

                        else if ( (LA49_0=='n') ) {s = 39;}

                        else if ( (LA49_0=='0') ) {s = 40;}

                        else if ( ((LA49_0 >= '1' && LA49_0 <= '9')) ) {s = 41;}

                        else if ( (LA49_0=='u') ) {s = 42;}

                        else if ( ((LA49_0 >= 'A' && LA49_0 <= 'Z')||LA49_0=='_'||LA49_0=='h'||(LA49_0 >= 'j' && LA49_0 <= 'm')||LA49_0=='q'||LA49_0=='s'||LA49_0=='v'||(LA49_0 >= 'x' && LA49_0 <= 'z')) ) {s = 43;}

                        else if ( (LA49_0=='\"'||LA49_0=='\'') ) {s = 44;}

                        else if ( (LA49_0=='\\') ) {s = 45;}

                        else if ( (LA49_0=='\f') ) {s = 46;}

                        else if ( (LA49_0=='\n'||LA49_0=='\r') ) {s = 47;}

                        else if ( (LA49_0=='\t') ) {s = 48;}

                        else if ( (LA49_0==' ') ) {s = 49;}

                        else if ( (LA49_0=='#') && (((startPos==-1)||(startPos>-1)))) {s = 50;}

                         
                        input.seek(index49_0);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_46 = input.LA(1);

                         
                        int index49_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_46=='\n'||LA49_46=='\r') ) {s = 47;}

                        else s = 120;

                         
                        input.seek(index49_46);

                        if ( s>=0 ) return s;
                        break;
            }
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

}