// $ANTLR 3.4 D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g 2012-08-03 13:58:59

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class PythonProvenanceParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALT_NOTEQUAL", "AMPER", "AMPEREQUAL", "AND", "ARGUMENTS", "AS", "ASSIGN", "ASSIGN_CMD", "AT", "BACKQUOTE", "CIRCUMFLEX", "CIRCUMFLEXEQUAL", "CLASSVARIABLE_CMD", "CLASS_CMD", "COLON", "COMMA", "COMMENT", "COMPLEX", "CONTINUED_LINE", "DEDENT", "DICTIONARY_CMD", "DICTMAKER_CMD", "DICT_ARGS", "DIGITS", "DOT", "DOTTED_NAME", "DOUBLESLASH", "DOUBLESLASHEQUAL", "DOUBLESTAR", "DOUBLESTAREQUAL", "DOUBLE_TYPE", "ELIF_CLAUSES", "ELIF_CMD", "ELSE_CMD", "EQUAL", "ESC", "EXCEPT_CMD", "EXPRESSION", "Exponent", "FINALLY_CMD", "FLOAT", "FORLOOP_CMD", "GREATER", "GREATEREQUAL", "IF", "IFBLOCK", "IF_CMD", "IMPORT_ARGS", "IMPORT_CMD", "IMPORT_EQUIV", "IMPORT_NAME", "IN", "INDENT", "INNER_BRANCH", "INT", "INT_TYPE", "IS", "ISNOT", "LBRACK", "LCURLY", "LEADING_WS", "LEFTSHIFT", "LEFTSHIFTEQUAL", "LESS", "LESSEQUAL", "LISTCOMPREHENSION_CMD", "LISTCONDITION_CMD", "LISTLOOPCONTROL_CMD", "LISTMAKER_CMD", "LIST_ARGS", "LONGINT", "LONG_TYPE", "LPAREN", "MINUS", "MINUSEQUAL", "NAME", "NEWLINE", "NOT", "NOTEQUAL", "NOTIN", "NO_ARGS", "OR", "OUTER_FUNCTION_ARGS", "OUTER_FUNCTION_CMD", "PERCENT", "PERCENTEQUAL", "PLUS", "PLUSEQUAL", "PRINT", "PRINT_ARGS", "PRINT_CMD", "RBRACK", "RCURLY", "RETURN_CMD", "RIGHTSHIFT", "RIGHTSHIFTEQUAL", "RPAREN", "SEMI", "SLASH", "SLASHEQUAL", "STAR", "STAREQUAL", "STRING", "STRING_TYPE", "SUBSCRIPTS", "TILDE", "TRAILER", "TRIAPOS", "TRIQUOTE", "TRYBLOCK", "TRY_CMD", "VALUETYPE", "VARIABLE_CMD", "VBAR", "VBAREQUAL", "WHILEBLOCK", "WHILE_CMD", "WS", "'assert'", "'break'", "'class'", "'continue'", "'def'", "'del'", "'elif'", "'else'", "'except'", "'exec'", "'finally'", "'for'", "'from'", "'global'", "'import'", "'pass'", "'raise'", "'return'", "'try'", "'while'", "'with'"
    };

    public static final int EOF=-1;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int ALT_NOTEQUAL=4;
    public static final int AMPER=5;
    public static final int AMPEREQUAL=6;
    public static final int AND=7;
    public static final int ARGUMENTS=8;
    public static final int AS=9;
    public static final int ASSIGN=10;
    public static final int ASSIGN_CMD=11;
    public static final int AT=12;
    public static final int BACKQUOTE=13;
    public static final int CIRCUMFLEX=14;
    public static final int CIRCUMFLEXEQUAL=15;
    public static final int CLASSVARIABLE_CMD=16;
    public static final int CLASS_CMD=17;
    public static final int COLON=18;
    public static final int COMMA=19;
    public static final int COMMENT=20;
    public static final int COMPLEX=21;
    public static final int CONTINUED_LINE=22;
    public static final int DEDENT=23;
    public static final int DICTIONARY_CMD=24;
    public static final int DICTMAKER_CMD=25;
    public static final int DICT_ARGS=26;
    public static final int DIGITS=27;
    public static final int DOT=28;
    public static final int DOTTED_NAME=29;
    public static final int DOUBLESLASH=30;
    public static final int DOUBLESLASHEQUAL=31;
    public static final int DOUBLESTAR=32;
    public static final int DOUBLESTAREQUAL=33;
    public static final int DOUBLE_TYPE=34;
    public static final int ELIF_CLAUSES=35;
    public static final int ELIF_CMD=36;
    public static final int ELSE_CMD=37;
    public static final int EQUAL=38;
    public static final int ESC=39;
    public static final int EXCEPT_CMD=40;
    public static final int EXPRESSION=41;
    public static final int Exponent=42;
    public static final int FINALLY_CMD=43;
    public static final int FLOAT=44;
    public static final int FORLOOP_CMD=45;
    public static final int GREATER=46;
    public static final int GREATEREQUAL=47;
    public static final int IF=48;
    public static final int IFBLOCK=49;
    public static final int IF_CMD=50;
    public static final int IMPORT_ARGS=51;
    public static final int IMPORT_CMD=52;
    public static final int IMPORT_EQUIV=53;
    public static final int IMPORT_NAME=54;
    public static final int IN=55;
    public static final int INDENT=56;
    public static final int INNER_BRANCH=57;
    public static final int INT=58;
    public static final int INT_TYPE=59;
    public static final int IS=60;
    public static final int ISNOT=61;
    public static final int LBRACK=62;
    public static final int LCURLY=63;
    public static final int LEADING_WS=64;
    public static final int LEFTSHIFT=65;
    public static final int LEFTSHIFTEQUAL=66;
    public static final int LESS=67;
    public static final int LESSEQUAL=68;
    public static final int LISTCOMPREHENSION_CMD=69;
    public static final int LISTCONDITION_CMD=70;
    public static final int LISTLOOPCONTROL_CMD=71;
    public static final int LISTMAKER_CMD=72;
    public static final int LIST_ARGS=73;
    public static final int LONGINT=74;
    public static final int LONG_TYPE=75;
    public static final int LPAREN=76;
    public static final int MINUS=77;
    public static final int MINUSEQUAL=78;
    public static final int NAME=79;
    public static final int NEWLINE=80;
    public static final int NOT=81;
    public static final int NOTEQUAL=82;
    public static final int NOTIN=83;
    public static final int NO_ARGS=84;
    public static final int OR=85;
    public static final int OUTER_FUNCTION_ARGS=86;
    public static final int OUTER_FUNCTION_CMD=87;
    public static final int PERCENT=88;
    public static final int PERCENTEQUAL=89;
    public static final int PLUS=90;
    public static final int PLUSEQUAL=91;
    public static final int PRINT=92;
    public static final int PRINT_ARGS=93;
    public static final int PRINT_CMD=94;
    public static final int RBRACK=95;
    public static final int RCURLY=96;
    public static final int RETURN_CMD=97;
    public static final int RIGHTSHIFT=98;
    public static final int RIGHTSHIFTEQUAL=99;
    public static final int RPAREN=100;
    public static final int SEMI=101;
    public static final int SLASH=102;
    public static final int SLASHEQUAL=103;
    public static final int STAR=104;
    public static final int STAREQUAL=105;
    public static final int STRING=106;
    public static final int STRING_TYPE=107;
    public static final int SUBSCRIPTS=108;
    public static final int TILDE=109;
    public static final int TRAILER=110;
    public static final int TRIAPOS=111;
    public static final int TRIQUOTE=112;
    public static final int TRYBLOCK=113;
    public static final int TRY_CMD=114;
    public static final int VALUETYPE=115;
    public static final int VARIABLE_CMD=116;
    public static final int VBAR=117;
    public static final int VBAREQUAL=118;
    public static final int WHILEBLOCK=119;
    public static final int WHILE_CMD=120;
    public static final int WS=121;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public PythonProvenanceParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public PythonProvenanceParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return PythonProvenanceParser.tokenNames; }
    public String getGrammarFileName() { return "D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g"; }


    public static class single_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:85:1: single_input : ( NEWLINE !| simple_stmt | compound_stmt NEWLINE !);
    public final PythonProvenanceParser.single_input_return single_input() throws RecognitionException {
        PythonProvenanceParser.single_input_return retval = new PythonProvenanceParser.single_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE1=null;
        Token NEWLINE4=null;
        PythonProvenanceParser.simple_stmt_return simple_stmt2 =null;

        PythonProvenanceParser.compound_stmt_return compound_stmt3 =null;


        Object NEWLINE1_tree=null;
        Object NEWLINE4_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:85:14: ( NEWLINE !| simple_stmt | compound_stmt NEWLINE !)
            int alt1=3;
            switch ( input.LA(1) ) {
            case NEWLINE:
                {
                alt1=1;
                }
                break;
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case MINUS:
            case NAME:
            case NOT:
            case PLUS:
            case PRINT:
            case STRING:
            case TILDE:
            case 122:
            case 123:
            case 125:
            case 127:
            case 131:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
                {
                alt1=2;
                }
                break;
            case AT:
            case IF:
            case 124:
            case 126:
            case 133:
            case 140:
            case 141:
            case 142:
                {
                alt1=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }

            switch (alt1) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:85:16: NEWLINE !
                    {
                    root_0 = (Object)adaptor.nil();


                    NEWLINE1=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input365); 

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:86:16: simple_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_stmt_in_single_input383);
                    simple_stmt2=simple_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_stmt2.getTree());

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:87:16: compound_stmt NEWLINE !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_compound_stmt_in_single_input400);
                    compound_stmt3=compound_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, compound_stmt3.getTree());

                    NEWLINE4=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input402); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_input"


    public static class file_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "file_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:90:1: file_input : ( NEWLINE !| stmt )* ;
    public final PythonProvenanceParser.file_input_return file_input() throws RecognitionException {
        PythonProvenanceParser.file_input_return retval = new PythonProvenanceParser.file_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE5=null;
        PythonProvenanceParser.stmt_return stmt6 =null;


        Object NEWLINE5_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:90:12: ( ( NEWLINE !| stmt )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:90:14: ( NEWLINE !| stmt )*
            {
            root_0 = (Object)adaptor.nil();


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:90:14: ( NEWLINE !| stmt )*
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==NEWLINE) ) {
                    alt2=1;
                }
                else if ( ((LA2_0 >= AT && LA2_0 <= BACKQUOTE)||LA2_0==DOTTED_NAME||LA2_0==FLOAT||LA2_0==IF||LA2_0==INT||(LA2_0 >= LBRACK && LA2_0 <= LCURLY)||LA2_0==LONGINT||(LA2_0 >= LPAREN && LA2_0 <= MINUS)||LA2_0==NAME||LA2_0==NOT||LA2_0==PLUS||LA2_0==PRINT||LA2_0==STRING||LA2_0==TILDE||(LA2_0 >= 122 && LA2_0 <= 127)||LA2_0==131||(LA2_0 >= 133 && LA2_0 <= 142)) ) {
                    alt2=2;
                }


                switch (alt2) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:90:15: NEWLINE !
            	    {
            	    NEWLINE5=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_file_input426); 

            	    }
            	    break;
            	case 2 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:90:26: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_file_input431);
            	    stmt6=stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, stmt6.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "file_input"


    public static class eval_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eval_input"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:94:1: eval_input : ( NEWLINE !)* testlist ( NEWLINE !)* ;
    public final PythonProvenanceParser.eval_input_return eval_input() throws RecognitionException {
        PythonProvenanceParser.eval_input_return retval = new PythonProvenanceParser.eval_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE7=null;
        Token NEWLINE9=null;
        PythonProvenanceParser.testlist_return testlist8 =null;


        Object NEWLINE7_tree=null;
        Object NEWLINE9_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:94:12: ( ( NEWLINE !)* testlist ( NEWLINE !)* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:94:14: ( NEWLINE !)* testlist ( NEWLINE !)*
            {
            root_0 = (Object)adaptor.nil();


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:94:14: ( NEWLINE !)*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NEWLINE) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:94:15: NEWLINE !
            	    {
            	    NEWLINE7=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input456); 

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            pushFollow(FOLLOW_testlist_in_eval_input461);
            testlist8=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist8.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:94:35: ( NEWLINE !)*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==NEWLINE) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:94:36: NEWLINE !
            	    {
            	    NEWLINE9=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input464); 

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eval_input"


    public static class decorators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decorators"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:97:1: decorators : ( decorator )+ ;
    public final PythonProvenanceParser.decorators_return decorators() throws RecognitionException {
        PythonProvenanceParser.decorators_return retval = new PythonProvenanceParser.decorators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.decorator_return decorator10 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:97:11: ( ( decorator )+ )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:97:13: ( decorator )+
            {
            root_0 = (Object)adaptor.nil();


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:97:13: ( decorator )+
            int cnt5=0;
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==AT) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:97:13: decorator
            	    {
            	    pushFollow(FOLLOW_decorator_in_decorators486);
            	    decorator10=decorator();

            	    state._fsp--;

            	    adaptor.addChild(root_0, decorator10.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "decorators"


    public static class decorator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decorator"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:100:1: decorator : AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE ;
    public final PythonProvenanceParser.decorator_return decorator() throws RecognitionException {
        PythonProvenanceParser.decorator_return retval = new PythonProvenanceParser.decorator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AT11=null;
        Token LPAREN13=null;
        Token RPAREN15=null;
        Token NEWLINE16=null;
        PythonProvenanceParser.dotted_attr_return dotted_attr12 =null;

        PythonProvenanceParser.arglist_return arglist14 =null;


        Object AT11_tree=null;
        Object LPAREN13_tree=null;
        Object RPAREN15_tree=null;
        Object NEWLINE16_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:100:10: ( AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:100:12: AT dotted_attr ( LPAREN ( arglist )? RPAREN )? NEWLINE
            {
            root_0 = (Object)adaptor.nil();


            AT11=(Token)match(input,AT,FOLLOW_AT_in_decorator505); 
            AT11_tree = 
            (Object)adaptor.create(AT11)
            ;
            adaptor.addChild(root_0, AT11_tree);


            pushFollow(FOLLOW_dotted_attr_in_decorator507);
            dotted_attr12=dotted_attr();

            state._fsp--;

            adaptor.addChild(root_0, dotted_attr12.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:100:27: ( LPAREN ( arglist )? RPAREN )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:100:28: LPAREN ( arglist )? RPAREN
                    {
                    LPAREN13=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_decorator510); 
                    LPAREN13_tree = 
                    (Object)adaptor.create(LPAREN13)
                    ;
                    adaptor.addChild(root_0, LPAREN13_tree);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:100:35: ( arglist )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==BACKQUOTE||LA6_0==DOTTED_NAME||LA6_0==DOUBLESTAR||LA6_0==FLOAT||LA6_0==INT||(LA6_0 >= LBRACK && LA6_0 <= LCURLY)||LA6_0==LONGINT||(LA6_0 >= LPAREN && LA6_0 <= MINUS)||LA6_0==NAME||LA6_0==NOT||LA6_0==PLUS||LA6_0==STAR||LA6_0==STRING||LA6_0==TILDE) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:100:35: arglist
                            {
                            pushFollow(FOLLOW_arglist_in_decorator512);
                            arglist14=arglist();

                            state._fsp--;

                            adaptor.addChild(root_0, arglist14.getTree());

                            }
                            break;

                    }


                    RPAREN15=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_decorator515); 
                    RPAREN15_tree = 
                    (Object)adaptor.create(RPAREN15)
                    ;
                    adaptor.addChild(root_0, RPAREN15_tree);


                    }
                    break;

            }


            NEWLINE16=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_decorator519); 
            NEWLINE16_tree = 
            (Object)adaptor.create(NEWLINE16)
            ;
            adaptor.addChild(root_0, NEWLINE16_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "decorator"


    public static class dotted_attr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dotted_attr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:103:1: dotted_attr : NAME ( DOT NAME )* ;
    public final PythonProvenanceParser.dotted_attr_return dotted_attr() throws RecognitionException {
        PythonProvenanceParser.dotted_attr_return retval = new PythonProvenanceParser.dotted_attr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NAME17=null;
        Token DOT18=null;
        Token NAME19=null;

        Object NAME17_tree=null;
        Object DOT18_tree=null;
        Object NAME19_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:104:5: ( NAME ( DOT NAME )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:104:7: NAME ( DOT NAME )*
            {
            root_0 = (Object)adaptor.nil();


            NAME17=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_attr541); 
            NAME17_tree = 
            (Object)adaptor.create(NAME17)
            ;
            adaptor.addChild(root_0, NAME17_tree);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:104:12: ( DOT NAME )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==DOT) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:104:13: DOT NAME
            	    {
            	    DOT18=(Token)match(input,DOT,FOLLOW_DOT_in_dotted_attr544); 
            	    DOT18_tree = 
            	    (Object)adaptor.create(DOT18)
            	    ;
            	    adaptor.addChild(root_0, DOT18_tree);


            	    NAME19=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_attr546); 
            	    NAME19_tree = 
            	    (Object)adaptor.create(NAME19)
            	    ;
            	    adaptor.addChild(root_0, NAME19_tree);


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dotted_attr"


    public static class funcdef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "funcdef"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:107:1: funcdef : ( decorators )? ref= 'def' id1= NAME parameters COLON suite -> ^( OUTER_FUNCTION_CMD[$ref] $id1 ( parameters )? suite ) ;
    public final PythonProvenanceParser.funcdef_return funcdef() throws RecognitionException {
        PythonProvenanceParser.funcdef_return retval = new PythonProvenanceParser.funcdef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token id1=null;
        Token COLON22=null;
        PythonProvenanceParser.decorators_return decorators20 =null;

        PythonProvenanceParser.parameters_return parameters21 =null;

        PythonProvenanceParser.suite_return suite23 =null;


        Object ref_tree=null;
        Object id1_tree=null;
        Object COLON22_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleSubtreeStream stream_decorators=new RewriteRuleSubtreeStream(adaptor,"rule decorators");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:107:9: ( ( decorators )? ref= 'def' id1= NAME parameters COLON suite -> ^( OUTER_FUNCTION_CMD[$ref] $id1 ( parameters )? suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:107:11: ( decorators )? ref= 'def' id1= NAME parameters COLON suite
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:107:11: ( decorators )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==AT) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:107:11: decorators
                    {
                    pushFollow(FOLLOW_decorators_in_funcdef562);
                    decorators20=decorators();

                    state._fsp--;

                    stream_decorators.add(decorators20.getTree());

                    }
                    break;

            }


            ref=(Token)match(input,126,FOLLOW_126_in_funcdef567);  
            stream_126.add(ref);


            id1=(Token)match(input,NAME,FOLLOW_NAME_in_funcdef571);  
            stream_NAME.add(id1);


            pushFollow(FOLLOW_parameters_in_funcdef573);
            parameters21=parameters();

            state._fsp--;

            stream_parameters.add(parameters21.getTree());

            COLON22=(Token)match(input,COLON,FOLLOW_COLON_in_funcdef575);  
            stream_COLON.add(COLON22);


            pushFollow(FOLLOW_suite_in_funcdef577);
            suite23=suite();

            state._fsp--;

            stream_suite.add(suite23.getTree());

            // AST REWRITE
            // elements: id1, suite, parameters
            // token labels: id1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 107:65: -> ^( OUTER_FUNCTION_CMD[$ref] $id1 ( parameters )? suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:107:68: ^( OUTER_FUNCTION_CMD[$ref] $id1 ( parameters )? suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OUTER_FUNCTION_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:107:100: ( parameters )?
                if ( stream_parameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameters.nextTree());

                }
                stream_parameters.reset();

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "funcdef"


    public static class parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameters"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:110:1: parameters : LPAREN ! ( varargslist )? RPAREN !;
    public final PythonProvenanceParser.parameters_return parameters() throws RecognitionException {
        PythonProvenanceParser.parameters_return retval = new PythonProvenanceParser.parameters_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LPAREN24=null;
        Token RPAREN26=null;
        PythonProvenanceParser.varargslist_return varargslist25 =null;


        Object LPAREN24_tree=null;
        Object RPAREN26_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:110:12: ( LPAREN ! ( varargslist )? RPAREN !)
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:110:14: LPAREN ! ( varargslist )? RPAREN !
            {
            root_0 = (Object)adaptor.nil();


            LPAREN24=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parameters609); 

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:110:22: ( varargslist )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==BACKQUOTE||LA10_0==DOTTED_NAME||LA10_0==DOUBLESTAR||LA10_0==FLOAT||LA10_0==INT||(LA10_0 >= LBRACK && LA10_0 <= LCURLY)||LA10_0==LONGINT||(LA10_0 >= LPAREN && LA10_0 <= MINUS)||LA10_0==NAME||LA10_0==NOT||LA10_0==PLUS||LA10_0==STAR||LA10_0==STRING||LA10_0==TILDE) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:110:23: varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_parameters613);
                    varargslist25=varargslist();

                    state._fsp--;

                    adaptor.addChild(root_0, varargslist25.getTree());

                    }
                    break;

            }


            RPAREN26=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parameters617); 

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameters"


    public static class varargslist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varargslist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:113:1: varargslist : ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )? )? -> ^( OUTER_FUNCTION_ARGS ( defparameter )+ ) | STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME );
    public final PythonProvenanceParser.varargslist_return varargslist() throws RecognitionException {
        PythonProvenanceParser.varargslist_return retval = new PythonProvenanceParser.varargslist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA28=null;
        Token COMMA30=null;
        Token STAR31=null;
        Token NAME32=null;
        Token COMMA33=null;
        Token DOUBLESTAR34=null;
        Token NAME35=null;
        Token DOUBLESTAR36=null;
        Token NAME37=null;
        Token STAR38=null;
        Token NAME39=null;
        Token COMMA40=null;
        Token DOUBLESTAR41=null;
        Token NAME42=null;
        Token DOUBLESTAR43=null;
        Token NAME44=null;
        PythonProvenanceParser.defparameter_return defparameter27 =null;

        PythonProvenanceParser.defparameter_return defparameter29 =null;


        Object COMMA28_tree=null;
        Object COMMA30_tree=null;
        Object STAR31_tree=null;
        Object NAME32_tree=null;
        Object COMMA33_tree=null;
        Object DOUBLESTAR34_tree=null;
        Object NAME35_tree=null;
        Object DOUBLESTAR36_tree=null;
        Object NAME37_tree=null;
        Object STAR38_tree=null;
        Object NAME39_tree=null;
        Object COMMA40_tree=null;
        Object DOUBLESTAR41_tree=null;
        Object NAME42_tree=null;
        Object DOUBLESTAR43_tree=null;
        Object NAME44_tree=null;
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOUBLESTAR=new RewriteRuleTokenStream(adaptor,"token DOUBLESTAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_defparameter=new RewriteRuleSubtreeStream(adaptor,"rule defparameter");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:113:13: ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )? )? -> ^( OUTER_FUNCTION_ARGS ( defparameter )+ ) | STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )
            int alt16=3;
            switch ( input.LA(1) ) {
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case MINUS:
            case NAME:
            case NOT:
            case PLUS:
            case STRING:
            case TILDE:
                {
                alt16=1;
                }
                break;
            case STAR:
                {
                alt16=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt16=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:113:15: defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )? )?
                    {
                    pushFollow(FOLLOW_defparameter_in_varargslist639);
                    defparameter27=defparameter();

                    state._fsp--;

                    stream_defparameter.add(defparameter27.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:113:28: ( options {greedy=true; } : COMMA defparameter )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( (LA11_1==BACKQUOTE||LA11_1==DOTTED_NAME||LA11_1==FLOAT||LA11_1==INT||(LA11_1 >= LBRACK && LA11_1 <= LCURLY)||LA11_1==LONGINT||(LA11_1 >= LPAREN && LA11_1 <= MINUS)||LA11_1==NAME||LA11_1==NOT||LA11_1==PLUS||LA11_1==STRING||LA11_1==TILDE) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:113:52: COMMA defparameter
                    	    {
                    	    COMMA28=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist649);  
                    	    stream_COMMA.add(COMMA28);


                    	    pushFollow(FOLLOW_defparameter_in_varargslist651);
                    	    defparameter29=defparameter();

                    	    state._fsp--;

                    	    stream_defparameter.add(defparameter29.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:114:15: ( COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )? )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==COMMA) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:114:16: COMMA ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )?
                            {
                            COMMA30=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist670);  
                            stream_COMMA.add(COMMA30);


                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:115:19: ( STAR NAME ( COMMA DOUBLESTAR NAME )? | DOUBLESTAR NAME )?
                            int alt13=3;
                            int LA13_0 = input.LA(1);

                            if ( (LA13_0==STAR) ) {
                                alt13=1;
                            }
                            else if ( (LA13_0==DOUBLESTAR) ) {
                                alt13=2;
                            }
                            switch (alt13) {
                                case 1 :
                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:115:21: STAR NAME ( COMMA DOUBLESTAR NAME )?
                                    {
                                    STAR31=(Token)match(input,STAR,FOLLOW_STAR_in_varargslist692);  
                                    stream_STAR.add(STAR31);


                                    NAME32=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist694);  
                                    stream_NAME.add(NAME32);


                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:115:31: ( COMMA DOUBLESTAR NAME )?
                                    int alt12=2;
                                    int LA12_0 = input.LA(1);

                                    if ( (LA12_0==COMMA) ) {
                                        alt12=1;
                                    }
                                    switch (alt12) {
                                        case 1 :
                                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:115:32: COMMA DOUBLESTAR NAME
                                            {
                                            COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist697);  
                                            stream_COMMA.add(COMMA33);


                                            DOUBLESTAR34=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist699);  
                                            stream_DOUBLESTAR.add(DOUBLESTAR34);


                                            NAME35=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist701);  
                                            stream_NAME.add(NAME35);


                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:116:21: DOUBLESTAR NAME
                                    {
                                    DOUBLESTAR36=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist725);  
                                    stream_DOUBLESTAR.add(DOUBLESTAR36);


                                    NAME37=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist727);  
                                    stream_NAME.add(NAME37);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: defparameter
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 118:18: -> ^( OUTER_FUNCTION_ARGS ( defparameter )+ )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:118:21: ^( OUTER_FUNCTION_ARGS ( defparameter )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(OUTER_FUNCTION_ARGS, "OUTER_FUNCTION_ARGS")
                        , root_1);

                        if ( !(stream_defparameter.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_defparameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_defparameter.nextTree());

                        }
                        stream_defparameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:119:15: STAR NAME ( COMMA DOUBLESTAR NAME )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR38=(Token)match(input,STAR,FOLLOW_STAR_in_varargslist790); 
                    STAR38_tree = 
                    (Object)adaptor.create(STAR38)
                    ;
                    adaptor.addChild(root_0, STAR38_tree);


                    NAME39=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist792); 
                    NAME39_tree = 
                    (Object)adaptor.create(NAME39)
                    ;
                    adaptor.addChild(root_0, NAME39_tree);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:119:25: ( COMMA DOUBLESTAR NAME )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==COMMA) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:119:26: COMMA DOUBLESTAR NAME
                            {
                            COMMA40=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist795); 
                            COMMA40_tree = 
                            (Object)adaptor.create(COMMA40)
                            ;
                            adaptor.addChild(root_0, COMMA40_tree);


                            DOUBLESTAR41=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist797); 
                            DOUBLESTAR41_tree = 
                            (Object)adaptor.create(DOUBLESTAR41)
                            ;
                            adaptor.addChild(root_0, DOUBLESTAR41_tree);


                            NAME42=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist799); 
                            NAME42_tree = 
                            (Object)adaptor.create(NAME42)
                            ;
                            adaptor.addChild(root_0, NAME42_tree);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:120:15: DOUBLESTAR NAME
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLESTAR43=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist818); 
                    DOUBLESTAR43_tree = 
                    (Object)adaptor.create(DOUBLESTAR43)
                    ;
                    adaptor.addChild(root_0, DOUBLESTAR43_tree);


                    NAME44=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist820); 
                    NAME44_tree = 
                    (Object)adaptor.create(NAME44)
                    ;
                    adaptor.addChild(root_0, NAME44_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varargslist"


    public static class defparameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defparameter"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:123:1: defparameter : test ( ASSIGN test )? ;
    public final PythonProvenanceParser.defparameter_return defparameter() throws RecognitionException {
        PythonProvenanceParser.defparameter_return retval = new PythonProvenanceParser.defparameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSIGN46=null;
        PythonProvenanceParser.test_return test45 =null;

        PythonProvenanceParser.test_return test47 =null;


        Object ASSIGN46_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:123:14: ( test ( ASSIGN test )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:123:16: test ( ASSIGN test )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_test_in_defparameter842);
            test45=test();

            state._fsp--;

            adaptor.addChild(root_0, test45.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:123:21: ( ASSIGN test )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==ASSIGN) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:123:22: ASSIGN test
                    {
                    ASSIGN46=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_defparameter845); 
                    ASSIGN46_tree = 
                    (Object)adaptor.create(ASSIGN46)
                    ;
                    adaptor.addChild(root_0, ASSIGN46_tree);


                    pushFollow(FOLLOW_test_in_defparameter847);
                    test47=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test47.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "defparameter"


    public static class stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:126:1: stmt : ( simple_stmt | compound_stmt );
    public final PythonProvenanceParser.stmt_return stmt() throws RecognitionException {
        PythonProvenanceParser.stmt_return retval = new PythonProvenanceParser.stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.simple_stmt_return simple_stmt48 =null;

        PythonProvenanceParser.compound_stmt_return compound_stmt49 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:126:6: ( simple_stmt | compound_stmt )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==BACKQUOTE||LA18_0==DOTTED_NAME||LA18_0==FLOAT||LA18_0==INT||(LA18_0 >= LBRACK && LA18_0 <= LCURLY)||LA18_0==LONGINT||(LA18_0 >= LPAREN && LA18_0 <= MINUS)||LA18_0==NAME||LA18_0==NOT||LA18_0==PLUS||LA18_0==PRINT||LA18_0==STRING||LA18_0==TILDE||(LA18_0 >= 122 && LA18_0 <= 123)||LA18_0==125||LA18_0==127||LA18_0==131||(LA18_0 >= 134 && LA18_0 <= 139)) ) {
                alt18=1;
            }
            else if ( (LA18_0==AT||LA18_0==IF||LA18_0==124||LA18_0==126||LA18_0==133||(LA18_0 >= 140 && LA18_0 <= 142)) ) {
                alt18=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:126:8: simple_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_stmt_in_stmt873);
                    simple_stmt48=simple_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_stmt48.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:127:8: compound_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_compound_stmt_in_stmt883);
                    compound_stmt49=compound_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, compound_stmt49.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmt"


    public static class stmt_inside_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt_inside_block"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:130:1: stmt_inside_block : ( simple_stmt | compound_stmt );
    public final PythonProvenanceParser.stmt_inside_block_return stmt_inside_block() throws RecognitionException {
        PythonProvenanceParser.stmt_inside_block_return retval = new PythonProvenanceParser.stmt_inside_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.simple_stmt_return simple_stmt50 =null;

        PythonProvenanceParser.compound_stmt_return compound_stmt51 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:131:3: ( simple_stmt | compound_stmt )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==BACKQUOTE||LA19_0==DOTTED_NAME||LA19_0==FLOAT||LA19_0==INT||(LA19_0 >= LBRACK && LA19_0 <= LCURLY)||LA19_0==LONGINT||(LA19_0 >= LPAREN && LA19_0 <= MINUS)||LA19_0==NAME||LA19_0==NOT||LA19_0==PLUS||LA19_0==PRINT||LA19_0==STRING||LA19_0==TILDE||(LA19_0 >= 122 && LA19_0 <= 123)||LA19_0==125||LA19_0==127||LA19_0==131||(LA19_0 >= 134 && LA19_0 <= 139)) ) {
                alt19=1;
            }
            else if ( (LA19_0==AT||LA19_0==IF||LA19_0==124||LA19_0==126||LA19_0==133||(LA19_0 >= 140 && LA19_0 <= 142)) ) {
                alt19=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:131:5: simple_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_stmt_in_stmt_inside_block905);
                    simple_stmt50=simple_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_stmt50.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:132:9: compound_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_compound_stmt_in_stmt_inside_block916);
                    compound_stmt51=compound_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, compound_stmt51.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmt_inside_block"


    public static class simple_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:135:1: simple_stmt : small_stmt ( NEWLINE !) ;
    public final PythonProvenanceParser.simple_stmt_return simple_stmt() throws RecognitionException {
        PythonProvenanceParser.simple_stmt_return retval = new PythonProvenanceParser.simple_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE53=null;
        PythonProvenanceParser.small_stmt_return small_stmt52 =null;


        Object NEWLINE53_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:136:3: ( small_stmt ( NEWLINE !) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:136:5: small_stmt ( NEWLINE !)
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_small_stmt_in_simple_stmt933);
            small_stmt52=small_stmt();

            state._fsp--;

            adaptor.addChild(root_0, small_stmt52.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:136:16: ( NEWLINE !)
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:136:17: NEWLINE !
            {
            NEWLINE53=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_simple_stmt936); 

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_stmt"


    public static class small_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "small_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:139:1: small_stmt : ( expr_stmt | print_stmt | del_stmt ->| pass_stmt ->| flow_stmt | import_stmt | global_stmt ->| exec_stmt ->| assert_stmt ->);
    public final PythonProvenanceParser.small_stmt_return small_stmt() throws RecognitionException {
        PythonProvenanceParser.small_stmt_return retval = new PythonProvenanceParser.small_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.expr_stmt_return expr_stmt54 =null;

        PythonProvenanceParser.print_stmt_return print_stmt55 =null;

        PythonProvenanceParser.del_stmt_return del_stmt56 =null;

        PythonProvenanceParser.pass_stmt_return pass_stmt57 =null;

        PythonProvenanceParser.flow_stmt_return flow_stmt58 =null;

        PythonProvenanceParser.import_stmt_return import_stmt59 =null;

        PythonProvenanceParser.global_stmt_return global_stmt60 =null;

        PythonProvenanceParser.exec_stmt_return exec_stmt61 =null;

        PythonProvenanceParser.assert_stmt_return assert_stmt62 =null;


        RewriteRuleSubtreeStream stream_global_stmt=new RewriteRuleSubtreeStream(adaptor,"rule global_stmt");
        RewriteRuleSubtreeStream stream_pass_stmt=new RewriteRuleSubtreeStream(adaptor,"rule pass_stmt");
        RewriteRuleSubtreeStream stream_del_stmt=new RewriteRuleSubtreeStream(adaptor,"rule del_stmt");
        RewriteRuleSubtreeStream stream_assert_stmt=new RewriteRuleSubtreeStream(adaptor,"rule assert_stmt");
        RewriteRuleSubtreeStream stream_exec_stmt=new RewriteRuleSubtreeStream(adaptor,"rule exec_stmt");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:139:12: ( expr_stmt | print_stmt | del_stmt ->| pass_stmt ->| flow_stmt | import_stmt | global_stmt ->| exec_stmt ->| assert_stmt ->)
            int alt20=9;
            switch ( input.LA(1) ) {
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case MINUS:
            case NAME:
            case NOT:
            case PLUS:
            case STRING:
            case TILDE:
                {
                alt20=1;
                }
                break;
            case PRINT:
                {
                alt20=2;
                }
                break;
            case 127:
                {
                alt20=3;
                }
                break;
            case 137:
                {
                alt20=4;
                }
                break;
            case 123:
            case 125:
            case 138:
            case 139:
                {
                alt20=5;
                }
                break;
            case 134:
            case 136:
                {
                alt20=6;
                }
                break;
            case 135:
                {
                alt20=7;
                }
                break;
            case 131:
                {
                alt20=8;
                }
                break;
            case 122:
                {
                alt20=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }

            switch (alt20) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:139:14: expr_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_stmt_in_small_stmt949);
                    expr_stmt54=expr_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_stmt54.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:140:14: print_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_print_stmt_in_small_stmt964);
                    print_stmt55=print_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, print_stmt55.getTree());

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:141:14: del_stmt
                    {
                    pushFollow(FOLLOW_del_stmt_in_small_stmt980);
                    del_stmt56=del_stmt();

                    state._fsp--;

                    stream_del_stmt.add(del_stmt56.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 141:23: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:142:14: pass_stmt
                    {
                    pushFollow(FOLLOW_pass_stmt_in_small_stmt998);
                    pass_stmt57=pass_stmt();

                    state._fsp--;

                    stream_pass_stmt.add(pass_stmt57.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 142:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:143:14: flow_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_flow_stmt_in_small_stmt1015);
                    flow_stmt58=flow_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, flow_stmt58.getTree());

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:144:14: import_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_stmt_in_small_stmt1031);
                    import_stmt59=import_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, import_stmt59.getTree());

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:145:14: global_stmt
                    {
                    pushFollow(FOLLOW_global_stmt_in_small_stmt1046);
                    global_stmt60=global_stmt();

                    state._fsp--;

                    stream_global_stmt.add(global_stmt60.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 145:26: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 8 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:146:14: exec_stmt
                    {
                    pushFollow(FOLLOW_exec_stmt_in_small_stmt1063);
                    exec_stmt61=exec_stmt();

                    state._fsp--;

                    stream_exec_stmt.add(exec_stmt61.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 146:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 9 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:147:14: assert_stmt
                    {
                    pushFollow(FOLLOW_assert_stmt_in_small_stmt1080);
                    assert_stmt62=assert_stmt();

                    state._fsp--;

                    stream_assert_stmt.add(assert_stmt62.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 147:26: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "small_stmt"


    public static class expr_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:150:1: expr_stmt : testlist ( ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist )? ;
    public final PythonProvenanceParser.expr_stmt_return expr_stmt() throws RecognitionException {
        PythonProvenanceParser.expr_stmt_return retval = new PythonProvenanceParser.expr_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSIGN64=null;
        Token PLUSEQUAL65=null;
        Token MINUSEQUAL66=null;
        Token STAREQUAL67=null;
        Token SLASHEQUAL68=null;
        Token PERCENTEQUAL69=null;
        Token AMPEREQUAL70=null;
        Token VBAREQUAL71=null;
        Token CIRCUMFLEXEQUAL72=null;
        Token LEFTSHIFTEQUAL73=null;
        Token RIGHTSHIFTEQUAL74=null;
        Token DOUBLESTAREQUAL75=null;
        Token DOUBLESLASHEQUAL76=null;
        PythonProvenanceParser.testlist_return testlist63 =null;

        PythonProvenanceParser.testlist_return testlist77 =null;


        Object ASSIGN64_tree=null;
        Object PLUSEQUAL65_tree=null;
        Object MINUSEQUAL66_tree=null;
        Object STAREQUAL67_tree=null;
        Object SLASHEQUAL68_tree=null;
        Object PERCENTEQUAL69_tree=null;
        Object AMPEREQUAL70_tree=null;
        Object VBAREQUAL71_tree=null;
        Object CIRCUMFLEXEQUAL72_tree=null;
        Object LEFTSHIFTEQUAL73_tree=null;
        Object RIGHTSHIFTEQUAL74_tree=null;
        Object DOUBLESTAREQUAL75_tree=null;
        Object DOUBLESLASHEQUAL76_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:150:11: ( testlist ( ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:150:13: testlist ( ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_expr_stmt1095);
            testlist63=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist63.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:150:22: ( ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==AMPEREQUAL||LA22_0==ASSIGN||LA22_0==CIRCUMFLEXEQUAL||LA22_0==DOUBLESLASHEQUAL||LA22_0==DOUBLESTAREQUAL||LA22_0==LEFTSHIFTEQUAL||LA22_0==MINUSEQUAL||LA22_0==PERCENTEQUAL||LA22_0==PLUSEQUAL||LA22_0==RIGHTSHIFTEQUAL||LA22_0==SLASHEQUAL||LA22_0==STAREQUAL||LA22_0==VBAREQUAL) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:151:5: ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^) testlist
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:151:5: ( ASSIGN ^| PLUSEQUAL ^| MINUSEQUAL ^| STAREQUAL ^| SLASHEQUAL ^| PERCENTEQUAL ^| AMPEREQUAL ^| VBAREQUAL ^| CIRCUMFLEXEQUAL ^| LEFTSHIFTEQUAL ^| RIGHTSHIFTEQUAL ^| DOUBLESTAREQUAL ^| DOUBLESLASHEQUAL ^)
                    int alt21=13;
                    switch ( input.LA(1) ) {
                    case ASSIGN:
                        {
                        alt21=1;
                        }
                        break;
                    case PLUSEQUAL:
                        {
                        alt21=2;
                        }
                        break;
                    case MINUSEQUAL:
                        {
                        alt21=3;
                        }
                        break;
                    case STAREQUAL:
                        {
                        alt21=4;
                        }
                        break;
                    case SLASHEQUAL:
                        {
                        alt21=5;
                        }
                        break;
                    case PERCENTEQUAL:
                        {
                        alt21=6;
                        }
                        break;
                    case AMPEREQUAL:
                        {
                        alt21=7;
                        }
                        break;
                    case VBAREQUAL:
                        {
                        alt21=8;
                        }
                        break;
                    case CIRCUMFLEXEQUAL:
                        {
                        alt21=9;
                        }
                        break;
                    case LEFTSHIFTEQUAL:
                        {
                        alt21=10;
                        }
                        break;
                    case RIGHTSHIFTEQUAL:
                        {
                        alt21=11;
                        }
                        break;
                    case DOUBLESTAREQUAL:
                        {
                        alt21=12;
                        }
                        break;
                    case DOUBLESLASHEQUAL:
                        {
                        alt21=13;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 0, input);

                        throw nvae;

                    }

                    switch (alt21) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:151:7: ASSIGN ^
                            {
                            ASSIGN64=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_stmt1106); 
                            ASSIGN64_tree = 
                            (Object)adaptor.create(ASSIGN64)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(ASSIGN64_tree, root_0);


                            }
                            break;
                        case 2 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:152:7: PLUSEQUAL ^
                            {
                            PLUSEQUAL65=(Token)match(input,PLUSEQUAL,FOLLOW_PLUSEQUAL_in_expr_stmt1115); 
                            PLUSEQUAL65_tree = 
                            (Object)adaptor.create(PLUSEQUAL65)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(PLUSEQUAL65_tree, root_0);


                            }
                            break;
                        case 3 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:153:7: MINUSEQUAL ^
                            {
                            MINUSEQUAL66=(Token)match(input,MINUSEQUAL,FOLLOW_MINUSEQUAL_in_expr_stmt1124); 
                            MINUSEQUAL66_tree = 
                            (Object)adaptor.create(MINUSEQUAL66)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(MINUSEQUAL66_tree, root_0);


                            }
                            break;
                        case 4 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:154:7: STAREQUAL ^
                            {
                            STAREQUAL67=(Token)match(input,STAREQUAL,FOLLOW_STAREQUAL_in_expr_stmt1133); 
                            STAREQUAL67_tree = 
                            (Object)adaptor.create(STAREQUAL67)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(STAREQUAL67_tree, root_0);


                            }
                            break;
                        case 5 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:155:7: SLASHEQUAL ^
                            {
                            SLASHEQUAL68=(Token)match(input,SLASHEQUAL,FOLLOW_SLASHEQUAL_in_expr_stmt1142); 
                            SLASHEQUAL68_tree = 
                            (Object)adaptor.create(SLASHEQUAL68)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(SLASHEQUAL68_tree, root_0);


                            }
                            break;
                        case 6 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:156:7: PERCENTEQUAL ^
                            {
                            PERCENTEQUAL69=(Token)match(input,PERCENTEQUAL,FOLLOW_PERCENTEQUAL_in_expr_stmt1151); 
                            PERCENTEQUAL69_tree = 
                            (Object)adaptor.create(PERCENTEQUAL69)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(PERCENTEQUAL69_tree, root_0);


                            }
                            break;
                        case 7 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:157:7: AMPEREQUAL ^
                            {
                            AMPEREQUAL70=(Token)match(input,AMPEREQUAL,FOLLOW_AMPEREQUAL_in_expr_stmt1160); 
                            AMPEREQUAL70_tree = 
                            (Object)adaptor.create(AMPEREQUAL70)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(AMPEREQUAL70_tree, root_0);


                            }
                            break;
                        case 8 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:158:7: VBAREQUAL ^
                            {
                            VBAREQUAL71=(Token)match(input,VBAREQUAL,FOLLOW_VBAREQUAL_in_expr_stmt1169); 
                            VBAREQUAL71_tree = 
                            (Object)adaptor.create(VBAREQUAL71)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(VBAREQUAL71_tree, root_0);


                            }
                            break;
                        case 9 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:159:7: CIRCUMFLEXEQUAL ^
                            {
                            CIRCUMFLEXEQUAL72=(Token)match(input,CIRCUMFLEXEQUAL,FOLLOW_CIRCUMFLEXEQUAL_in_expr_stmt1178); 
                            CIRCUMFLEXEQUAL72_tree = 
                            (Object)adaptor.create(CIRCUMFLEXEQUAL72)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(CIRCUMFLEXEQUAL72_tree, root_0);


                            }
                            break;
                        case 10 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:160:7: LEFTSHIFTEQUAL ^
                            {
                            LEFTSHIFTEQUAL73=(Token)match(input,LEFTSHIFTEQUAL,FOLLOW_LEFTSHIFTEQUAL_in_expr_stmt1187); 
                            LEFTSHIFTEQUAL73_tree = 
                            (Object)adaptor.create(LEFTSHIFTEQUAL73)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(LEFTSHIFTEQUAL73_tree, root_0);


                            }
                            break;
                        case 11 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:161:7: RIGHTSHIFTEQUAL ^
                            {
                            RIGHTSHIFTEQUAL74=(Token)match(input,RIGHTSHIFTEQUAL,FOLLOW_RIGHTSHIFTEQUAL_in_expr_stmt1196); 
                            RIGHTSHIFTEQUAL74_tree = 
                            (Object)adaptor.create(RIGHTSHIFTEQUAL74)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(RIGHTSHIFTEQUAL74_tree, root_0);


                            }
                            break;
                        case 12 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:162:7: DOUBLESTAREQUAL ^
                            {
                            DOUBLESTAREQUAL75=(Token)match(input,DOUBLESTAREQUAL,FOLLOW_DOUBLESTAREQUAL_in_expr_stmt1205); 
                            DOUBLESTAREQUAL75_tree = 
                            (Object)adaptor.create(DOUBLESTAREQUAL75)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(DOUBLESTAREQUAL75_tree, root_0);


                            }
                            break;
                        case 13 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:163:7: DOUBLESLASHEQUAL ^
                            {
                            DOUBLESLASHEQUAL76=(Token)match(input,DOUBLESLASHEQUAL,FOLLOW_DOUBLESLASHEQUAL_in_expr_stmt1214); 
                            DOUBLESLASHEQUAL76_tree = 
                            (Object)adaptor.create(DOUBLESLASHEQUAL76)
                            ;
                            root_0 = (Object)adaptor.becomeRoot(DOUBLESLASHEQUAL76_tree, root_0);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_testlist_in_expr_stmt1228);
                    testlist77=testlist();

                    state._fsp--;

                    adaptor.addChild(root_0, testlist77.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_stmt"


    public static class print_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "print_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:168:1: print_stmt : ref= PRINT ( printlist | RIGHTSHIFT printlist )? -> ^( PRINT_CMD[$ref] printlist ) ;
    public final PythonProvenanceParser.print_stmt_return print_stmt() throws RecognitionException {
        PythonProvenanceParser.print_stmt_return retval = new PythonProvenanceParser.print_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token RIGHTSHIFT79=null;
        PythonProvenanceParser.printlist_return printlist78 =null;

        PythonProvenanceParser.printlist_return printlist80 =null;


        Object ref_tree=null;
        Object RIGHTSHIFT79_tree=null;
        RewriteRuleTokenStream stream_RIGHTSHIFT=new RewriteRuleTokenStream(adaptor,"token RIGHTSHIFT");
        RewriteRuleTokenStream stream_PRINT=new RewriteRuleTokenStream(adaptor,"token PRINT");
        RewriteRuleSubtreeStream stream_printlist=new RewriteRuleSubtreeStream(adaptor,"rule printlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:168:12: (ref= PRINT ( printlist | RIGHTSHIFT printlist )? -> ^( PRINT_CMD[$ref] printlist ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:168:14: ref= PRINT ( printlist | RIGHTSHIFT printlist )?
            {
            ref=(Token)match(input,PRINT,FOLLOW_PRINT_in_print_stmt1246);  
            stream_PRINT.add(ref);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:168:24: ( printlist | RIGHTSHIFT printlist )?
            int alt23=3;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==BACKQUOTE||LA23_0==DOTTED_NAME||LA23_0==FLOAT||LA23_0==INT||(LA23_0 >= LBRACK && LA23_0 <= LCURLY)||LA23_0==LONGINT||(LA23_0 >= LPAREN && LA23_0 <= MINUS)||LA23_0==NAME||LA23_0==NOT||LA23_0==PLUS||LA23_0==STRING||LA23_0==TILDE) ) {
                alt23=1;
            }
            else if ( (LA23_0==RIGHTSHIFT) ) {
                alt23=2;
            }
            switch (alt23) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:168:25: printlist
                    {
                    pushFollow(FOLLOW_printlist_in_print_stmt1249);
                    printlist78=printlist();

                    state._fsp--;

                    stream_printlist.add(printlist78.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:168:37: RIGHTSHIFT printlist
                    {
                    RIGHTSHIFT79=(Token)match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_print_stmt1253);  
                    stream_RIGHTSHIFT.add(RIGHTSHIFT79);


                    pushFollow(FOLLOW_printlist_in_print_stmt1255);
                    printlist80=printlist();

                    state._fsp--;

                    stream_printlist.add(printlist80.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: printlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 168:60: -> ^( PRINT_CMD[$ref] printlist )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:168:63: ^( PRINT_CMD[$ref] printlist )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRINT_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_printlist.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "print_stmt"


    public static class printlist_return extends ParserRuleReturnScope {
        public boolean newline;
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:171:1: printlist returns [boolean newline] : print_argument ( options {k=2; } : COMMA print_argument )* ( COMMA )? -> ^( PRINT_ARGS ( print_argument )+ ) ;
    public final PythonProvenanceParser.printlist_return printlist() throws RecognitionException {
        PythonProvenanceParser.printlist_return retval = new PythonProvenanceParser.printlist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA82=null;
        Token COMMA84=null;
        PythonProvenanceParser.print_argument_return print_argument81 =null;

        PythonProvenanceParser.print_argument_return print_argument83 =null;


        Object COMMA82_tree=null;
        Object COMMA84_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_print_argument=new RewriteRuleSubtreeStream(adaptor,"rule print_argument");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:172:5: ( print_argument ( options {k=2; } : COMMA print_argument )* ( COMMA )? -> ^( PRINT_ARGS ( print_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:172:7: print_argument ( options {k=2; } : COMMA print_argument )* ( COMMA )?
            {
            pushFollow(FOLLOW_print_argument_in_printlist1294);
            print_argument81=print_argument();

            state._fsp--;

            stream_print_argument.add(print_argument81.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:172:22: ( options {k=2; } : COMMA print_argument )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMA) ) {
                    int LA24_1 = input.LA(2);

                    if ( (LA24_1==BACKQUOTE||LA24_1==DOTTED_NAME||LA24_1==FLOAT||LA24_1==INT||(LA24_1 >= LBRACK && LA24_1 <= LCURLY)||LA24_1==LONGINT||(LA24_1 >= LPAREN && LA24_1 <= MINUS)||LA24_1==NAME||LA24_1==NOT||LA24_1==PLUS||LA24_1==STRING||LA24_1==TILDE) ) {
                        alt24=1;
                    }


                }


                switch (alt24) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:172:39: COMMA print_argument
            	    {
            	    COMMA82=(Token)match(input,COMMA,FOLLOW_COMMA_in_printlist1305);  
            	    stream_COMMA.add(COMMA82);


            	    pushFollow(FOLLOW_print_argument_in_printlist1307);
            	    print_argument83=print_argument();

            	    state._fsp--;

            	    stream_print_argument.add(print_argument83.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:172:62: ( COMMA )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==COMMA) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:172:63: COMMA
                    {
                    COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_printlist1312);  
                    stream_COMMA.add(COMMA84);


                    }
                    break;

            }


            // AST REWRITE
            // elements: print_argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 172:71: -> ^( PRINT_ARGS ( print_argument )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:172:74: ^( PRINT_ARGS ( print_argument )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRINT_ARGS, "PRINT_ARGS")
                , root_1);

                if ( !(stream_print_argument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_print_argument.hasNext() ) {
                    adaptor.addChild(root_1, stream_print_argument.nextTree());

                }
                stream_print_argument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "printlist"


    public static class del_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "del_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:176:1: del_stmt : 'del' exprlist ;
    public final PythonProvenanceParser.del_stmt_return del_stmt() throws RecognitionException {
        PythonProvenanceParser.del_stmt_return retval = new PythonProvenanceParser.del_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal85=null;
        PythonProvenanceParser.exprlist_return exprlist86 =null;


        Object string_literal85_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:176:10: ( 'del' exprlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:176:12: 'del' exprlist
            {
            root_0 = (Object)adaptor.nil();


            string_literal85=(Token)match(input,127,FOLLOW_127_in_del_stmt1337); 
            string_literal85_tree = 
            (Object)adaptor.create(string_literal85)
            ;
            adaptor.addChild(root_0, string_literal85_tree);


            pushFollow(FOLLOW_exprlist_in_del_stmt1339);
            exprlist86=exprlist();

            state._fsp--;

            adaptor.addChild(root_0, exprlist86.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "del_stmt"


    public static class pass_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pass_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:179:1: pass_stmt : 'pass' ;
    public final PythonProvenanceParser.pass_stmt_return pass_stmt() throws RecognitionException {
        PythonProvenanceParser.pass_stmt_return retval = new PythonProvenanceParser.pass_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal87=null;

        Object string_literal87_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:179:11: ( 'pass' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:179:13: 'pass'
            {
            root_0 = (Object)adaptor.nil();


            string_literal87=(Token)match(input,137,FOLLOW_137_in_pass_stmt1357); 
            string_literal87_tree = 
            (Object)adaptor.create(string_literal87)
            ;
            adaptor.addChild(root_0, string_literal87_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pass_stmt"


    public static class flow_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flow_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:182:1: flow_stmt : ( break_stmt ->| continue_stmt ->| return_stmt | raise_stmt ->);
    public final PythonProvenanceParser.flow_stmt_return flow_stmt() throws RecognitionException {
        PythonProvenanceParser.flow_stmt_return retval = new PythonProvenanceParser.flow_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.break_stmt_return break_stmt88 =null;

        PythonProvenanceParser.continue_stmt_return continue_stmt89 =null;

        PythonProvenanceParser.return_stmt_return return_stmt90 =null;

        PythonProvenanceParser.raise_stmt_return raise_stmt91 =null;


        RewriteRuleSubtreeStream stream_raise_stmt=new RewriteRuleSubtreeStream(adaptor,"rule raise_stmt");
        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        RewriteRuleSubtreeStream stream_continue_stmt=new RewriteRuleSubtreeStream(adaptor,"rule continue_stmt");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:182:11: ( break_stmt ->| continue_stmt ->| return_stmt | raise_stmt ->)
            int alt26=4;
            switch ( input.LA(1) ) {
            case 123:
                {
                alt26=1;
                }
                break;
            case 125:
                {
                alt26=2;
                }
                break;
            case 139:
                {
                alt26=3;
                }
                break;
            case 138:
                {
                alt26=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }

            switch (alt26) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:182:13: break_stmt
                    {
                    pushFollow(FOLLOW_break_stmt_in_flow_stmt1376);
                    break_stmt88=break_stmt();

                    state._fsp--;

                    stream_break_stmt.add(break_stmt88.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 182:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:183:13: continue_stmt
                    {
                    pushFollow(FOLLOW_continue_stmt_in_flow_stmt1392);
                    continue_stmt89=continue_stmt();

                    state._fsp--;

                    stream_continue_stmt.add(continue_stmt89.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 183:27: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:184:13: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_flow_stmt1408);
                    return_stmt90=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt90.getTree());

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:185:13: raise_stmt
                    {
                    pushFollow(FOLLOW_raise_stmt_in_flow_stmt1422);
                    raise_stmt91=raise_stmt();

                    state._fsp--;

                    stream_raise_stmt.add(raise_stmt91.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 185:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flow_stmt"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:188:1: break_stmt : 'break' ;
    public final PythonProvenanceParser.break_stmt_return break_stmt() throws RecognitionException {
        PythonProvenanceParser.break_stmt_return retval = new PythonProvenanceParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal92=null;

        Object string_literal92_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:188:12: ( 'break' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:188:14: 'break'
            {
            root_0 = (Object)adaptor.nil();


            string_literal92=(Token)match(input,123,FOLLOW_123_in_break_stmt1443); 
            string_literal92_tree = 
            (Object)adaptor.create(string_literal92)
            ;
            adaptor.addChild(root_0, string_literal92_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:191:1: continue_stmt : 'continue' ;
    public final PythonProvenanceParser.continue_stmt_return continue_stmt() throws RecognitionException {
        PythonProvenanceParser.continue_stmt_return retval = new PythonProvenanceParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal93=null;

        Object string_literal93_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:191:15: ( 'continue' )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:191:17: 'continue'
            {
            root_0 = (Object)adaptor.nil();


            string_literal93=(Token)match(input,125,FOLLOW_125_in_continue_stmt1463); 
            string_literal93_tree = 
            (Object)adaptor.create(string_literal93)
            ;
            adaptor.addChild(root_0, string_literal93_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:194:1: return_stmt : ref= 'return' ( testlist )? -> ^( RETURN_CMD[$ref] testlist ) ;
    public final PythonProvenanceParser.return_stmt_return return_stmt() throws RecognitionException {
        PythonProvenanceParser.return_stmt_return retval = new PythonProvenanceParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        PythonProvenanceParser.testlist_return testlist94 =null;


        Object ref_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:194:13: (ref= 'return' ( testlist )? -> ^( RETURN_CMD[$ref] testlist ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:194:15: ref= 'return' ( testlist )?
            {
            ref=(Token)match(input,139,FOLLOW_139_in_return_stmt1488);  
            stream_139.add(ref);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:194:28: ( testlist )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BACKQUOTE||LA27_0==DOTTED_NAME||LA27_0==FLOAT||LA27_0==INT||(LA27_0 >= LBRACK && LA27_0 <= LCURLY)||LA27_0==LONGINT||(LA27_0 >= LPAREN && LA27_0 <= MINUS)||LA27_0==NAME||LA27_0==NOT||LA27_0==PLUS||LA27_0==STRING||LA27_0==TILDE) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:194:29: testlist
                    {
                    pushFollow(FOLLOW_testlist_in_return_stmt1491);
                    testlist94=testlist();

                    state._fsp--;

                    stream_testlist.add(testlist94.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 194:40: -> ^( RETURN_CMD[$ref] testlist )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:194:43: ^( RETURN_CMD[$ref] testlist )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_testlist.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class raise_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "raise_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:1: raise_stmt : 'raise' ( test ( COMMA test ( COMMA test )? )? )? ;
    public final PythonProvenanceParser.raise_stmt_return raise_stmt() throws RecognitionException {
        PythonProvenanceParser.raise_stmt_return retval = new PythonProvenanceParser.raise_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal95=null;
        Token COMMA97=null;
        Token COMMA99=null;
        PythonProvenanceParser.test_return test96 =null;

        PythonProvenanceParser.test_return test98 =null;

        PythonProvenanceParser.test_return test100 =null;


        Object string_literal95_tree=null;
        Object COMMA97_tree=null;
        Object COMMA99_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:11: ( 'raise' ( test ( COMMA test ( COMMA test )? )? )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:13: 'raise' ( test ( COMMA test ( COMMA test )? )? )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal95=(Token)match(input,138,FOLLOW_138_in_raise_stmt1522); 
            string_literal95_tree = 
            (Object)adaptor.create(string_literal95)
            ;
            adaptor.addChild(root_0, string_literal95_tree);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:21: ( test ( COMMA test ( COMMA test )? )? )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==BACKQUOTE||LA30_0==DOTTED_NAME||LA30_0==FLOAT||LA30_0==INT||(LA30_0 >= LBRACK && LA30_0 <= LCURLY)||LA30_0==LONGINT||(LA30_0 >= LPAREN && LA30_0 <= MINUS)||LA30_0==NAME||LA30_0==NOT||LA30_0==PLUS||LA30_0==STRING||LA30_0==TILDE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:22: test ( COMMA test ( COMMA test )? )?
                    {
                    pushFollow(FOLLOW_test_in_raise_stmt1525);
                    test96=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test96.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:27: ( COMMA test ( COMMA test )? )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==COMMA) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:28: COMMA test ( COMMA test )?
                            {
                            COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_raise_stmt1528); 
                            COMMA97_tree = 
                            (Object)adaptor.create(COMMA97)
                            ;
                            adaptor.addChild(root_0, COMMA97_tree);


                            pushFollow(FOLLOW_test_in_raise_stmt1530);
                            test98=test();

                            state._fsp--;

                            adaptor.addChild(root_0, test98.getTree());

                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:39: ( COMMA test )?
                            int alt28=2;
                            int LA28_0 = input.LA(1);

                            if ( (LA28_0==COMMA) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:197:40: COMMA test
                                    {
                                    COMMA99=(Token)match(input,COMMA,FOLLOW_COMMA_in_raise_stmt1533); 
                                    COMMA99_tree = 
                                    (Object)adaptor.create(COMMA99)
                                    ;
                                    adaptor.addChild(root_0, COMMA99_tree);


                                    pushFollow(FOLLOW_test_in_raise_stmt1535);
                                    test100=test();

                                    state._fsp--;

                                    adaptor.addChild(root_0, test100.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "raise_stmt"


    public static class import_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:200:1: import_stmt : ( import_name | import_from );
    public final PythonProvenanceParser.import_stmt_return import_stmt() throws RecognitionException {
        PythonProvenanceParser.import_stmt_return retval = new PythonProvenanceParser.import_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.import_name_return import_name101 =null;

        PythonProvenanceParser.import_from_return import_from102 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:200:13: ( import_name | import_from )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==136) ) {
                alt31=1;
            }
            else if ( (LA31_0==134) ) {
                alt31=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:200:15: import_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_name_in_import_stmt1560);
                    import_name101=import_name();

                    state._fsp--;

                    adaptor.addChild(root_0, import_name101.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:201:15: import_from
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_from_in_import_stmt1576);
                    import_from102=import_from();

                    state._fsp--;

                    adaptor.addChild(root_0, import_from102.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_stmt"


    public static class import_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:204:1: import_name : ref= 'import' dotted_as_names -> ^( IMPORT_CMD[$ref] dotted_as_names ) ;
    public final PythonProvenanceParser.import_name_return import_name() throws RecognitionException {
        PythonProvenanceParser.import_name_return retval = new PythonProvenanceParser.import_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        PythonProvenanceParser.dotted_as_names_return dotted_as_names103 =null;


        Object ref_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_dotted_as_names=new RewriteRuleSubtreeStream(adaptor,"rule dotted_as_names");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:204:13: (ref= 'import' dotted_as_names -> ^( IMPORT_CMD[$ref] dotted_as_names ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:204:15: ref= 'import' dotted_as_names
            {
            ref=(Token)match(input,136,FOLLOW_136_in_import_name1599);  
            stream_136.add(ref);


            pushFollow(FOLLOW_dotted_as_names_in_import_name1601);
            dotted_as_names103=dotted_as_names();

            state._fsp--;

            stream_dotted_as_names.add(dotted_as_names103.getTree());

            // AST REWRITE
            // elements: dotted_as_names
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 204:44: -> ^( IMPORT_CMD[$ref] dotted_as_names )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:204:47: ^( IMPORT_CMD[$ref] dotted_as_names )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPORT_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_dotted_as_names.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_name"


    public static class import_from_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_from"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:208:1: import_from : ref= 'from' NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] NAME STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] NAME import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] NAME import_as_names ) ) ;
    public final PythonProvenanceParser.import_from_return import_from() throws RecognitionException {
        PythonProvenanceParser.import_from_return retval = new PythonProvenanceParser.import_from_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token NAME104=null;
        Token string_literal105=null;
        Token STAR106=null;
        Token LPAREN108=null;
        Token RPAREN110=null;
        PythonProvenanceParser.import_as_names_return import_as_names107 =null;

        PythonProvenanceParser.import_as_names_return import_as_names109 =null;


        Object ref_tree=null;
        Object NAME104_tree=null;
        Object string_literal105_tree=null;
        Object STAR106_tree=null;
        Object LPAREN108_tree=null;
        Object RPAREN110_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_import_as_names=new RewriteRuleSubtreeStream(adaptor,"rule import_as_names");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:208:12: (ref= 'from' NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] NAME STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] NAME import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] NAME import_as_names ) ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:208:14: ref= 'from' NAME 'import' ( STAR -> ^( IMPORT_CMD[$ref] NAME STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] NAME import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] NAME import_as_names ) )
            {
            ref=(Token)match(input,134,FOLLOW_134_in_import_from1633);  
            stream_134.add(ref);


            NAME104=(Token)match(input,NAME,FOLLOW_NAME_in_import_from1635);  
            stream_NAME.add(NAME104);


            string_literal105=(Token)match(input,136,FOLLOW_136_in_import_from1637);  
            stream_136.add(string_literal105);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:209:15: ( STAR -> ^( IMPORT_CMD[$ref] NAME STAR ) | import_as_names -> ^( IMPORT_CMD[$ref] NAME import_as_names ) | LPAREN import_as_names RPAREN -> ^( IMPORT_CMD[$ref] NAME import_as_names ) )
            int alt32=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt32=1;
                }
                break;
            case IMPORT_NAME:
            case NAME:
                {
                alt32=2;
                }
                break;
            case LPAREN:
                {
                alt32=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }

            switch (alt32) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:209:16: STAR
                    {
                    STAR106=(Token)match(input,STAR,FOLLOW_STAR_in_import_from1654);  
                    stream_STAR.add(STAR106);


                    // AST REWRITE
                    // elements: STAR, NAME
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 209:21: -> ^( IMPORT_CMD[$ref] NAME STAR )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:209:24: ^( IMPORT_CMD[$ref] NAME STAR )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NAME.nextNode()
                        );

                        adaptor.addChild(root_1, 
                        stream_STAR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:210:17: import_as_names
                    {
                    pushFollow(FOLLOW_import_as_names_in_import_from1683);
                    import_as_names107=import_as_names();

                    state._fsp--;

                    stream_import_as_names.add(import_as_names107.getTree());

                    // AST REWRITE
                    // elements: import_as_names, NAME
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 210:33: -> ^( IMPORT_CMD[$ref] NAME import_as_names )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:210:36: ^( IMPORT_CMD[$ref] NAME import_as_names )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NAME.nextNode()
                        );

                        adaptor.addChild(root_1, stream_import_as_names.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:211:17: LPAREN import_as_names RPAREN
                    {
                    LPAREN108=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_import_from1712);  
                    stream_LPAREN.add(LPAREN108);


                    pushFollow(FOLLOW_import_as_names_in_import_from1714);
                    import_as_names109=import_as_names();

                    state._fsp--;

                    stream_import_as_names.add(import_as_names109.getTree());

                    RPAREN110=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_import_from1716);  
                    stream_RPAREN.add(RPAREN110);


                    // AST REWRITE
                    // elements: NAME, import_as_names
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 211:47: -> ^( IMPORT_CMD[$ref] NAME import_as_names )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:211:50: ^( IMPORT_CMD[$ref] NAME import_as_names )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_CMD, ref)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NAME.nextNode()
                        );

                        adaptor.addChild(root_1, stream_import_as_names.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_from"


    public static class import_as_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_as_names"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:215:1: import_as_names : import_as_name ( COMMA import_as_name )* ( COMMA )? -> ^( IMPORT_ARGS ( import_as_name )+ ) ;
    public final PythonProvenanceParser.import_as_names_return import_as_names() throws RecognitionException {
        PythonProvenanceParser.import_as_names_return retval = new PythonProvenanceParser.import_as_names_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA112=null;
        Token COMMA114=null;
        PythonProvenanceParser.import_as_name_return import_as_name111 =null;

        PythonProvenanceParser.import_as_name_return import_as_name113 =null;


        Object COMMA112_tree=null;
        Object COMMA114_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_import_as_name=new RewriteRuleSubtreeStream(adaptor,"rule import_as_name");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:215:17: ( import_as_name ( COMMA import_as_name )* ( COMMA )? -> ^( IMPORT_ARGS ( import_as_name )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:215:19: import_as_name ( COMMA import_as_name )* ( COMMA )?
            {
            pushFollow(FOLLOW_import_as_name_in_import_as_names1763);
            import_as_name111=import_as_name();

            state._fsp--;

            stream_import_as_name.add(import_as_name111.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:215:34: ( COMMA import_as_name )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COMMA) ) {
                    int LA33_1 = input.LA(2);

                    if ( (LA33_1==IMPORT_NAME||LA33_1==NAME) ) {
                        alt33=1;
                    }


                }


                switch (alt33) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:215:35: COMMA import_as_name
            	    {
            	    COMMA112=(Token)match(input,COMMA,FOLLOW_COMMA_in_import_as_names1766);  
            	    stream_COMMA.add(COMMA112);


            	    pushFollow(FOLLOW_import_as_name_in_import_as_names1768);
            	    import_as_name113=import_as_name();

            	    state._fsp--;

            	    stream_import_as_name.add(import_as_name113.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:215:58: ( COMMA )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==COMMA) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:215:59: COMMA
                    {
                    COMMA114=(Token)match(input,COMMA,FOLLOW_COMMA_in_import_as_names1773);  
                    stream_COMMA.add(COMMA114);


                    }
                    break;

            }


            // AST REWRITE
            // elements: import_as_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 215:67: -> ^( IMPORT_ARGS ( import_as_name )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:215:70: ^( IMPORT_ARGS ( import_as_name )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPORT_ARGS, "IMPORT_ARGS")
                , root_1);

                if ( !(stream_import_as_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_import_as_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_import_as_name.nextTree());

                }
                stream_import_as_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_as_names"


    public static class import_as_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_as_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:218:1: import_as_name : (id1= NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV $id1 ( $id2)? ) |id1= IMPORT_NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV $id1 ( $id2)? ) );
    public final PythonProvenanceParser.import_as_name_return import_as_name() throws RecognitionException {
        PythonProvenanceParser.import_as_name_return retval = new PythonProvenanceParser.import_as_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token AS115=null;
        Token AS116=null;

        Object id1_tree=null;
        Object id2_tree=null;
        Object AS115_tree=null;
        Object AS116_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_IMPORT_NAME=new RewriteRuleTokenStream(adaptor,"token IMPORT_NAME");

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:219:2: (id1= NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV $id1 ( $id2)? ) |id1= IMPORT_NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV $id1 ( $id2)? ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==NAME) ) {
                alt37=1;
            }
            else if ( (LA37_0==IMPORT_NAME) ) {
                alt37=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:219:4: id1= NAME ( AS id2= NAME )?
                    {
                    id1=(Token)match(input,NAME,FOLLOW_NAME_in_import_as_name1812);  
                    stream_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:219:13: ( AS id2= NAME )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==AS) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:219:14: AS id2= NAME
                            {
                            AS115=(Token)match(input,AS,FOLLOW_AS_in_import_as_name1815);  
                            stream_AS.add(AS115);


                            id2=(Token)match(input,NAME,FOLLOW_NAME_in_import_as_name1819);  
                            stream_NAME.add(id2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id1, id2
                    // token labels: id2, id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 219:28: -> ^( IMPORT_EQUIV $id1 ( $id2)? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:219:31: ^( IMPORT_EQUIV $id1 ( $id2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_EQUIV, "IMPORT_EQUIV")
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:219:52: ( $id2)?
                        if ( stream_id2.hasNext() ) {
                            adaptor.addChild(root_1, stream_id2.nextNode());

                        }
                        stream_id2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:220:4: id1= IMPORT_NAME ( AS id2= NAME )?
                    {
                    id1=(Token)match(input,IMPORT_NAME,FOLLOW_IMPORT_NAME_in_import_as_name1842);  
                    stream_IMPORT_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:220:20: ( AS id2= NAME )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==AS) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:220:21: AS id2= NAME
                            {
                            AS116=(Token)match(input,AS,FOLLOW_AS_in_import_as_name1845);  
                            stream_AS.add(AS116);


                            id2=(Token)match(input,NAME,FOLLOW_NAME_in_import_as_name1849);  
                            stream_NAME.add(id2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id1, id2
                    // token labels: id2, id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 220:35: -> ^( IMPORT_EQUIV $id1 ( $id2)? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:220:38: ^( IMPORT_EQUIV $id1 ( $id2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_EQUIV, "IMPORT_EQUIV")
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:220:59: ( $id2)?
                        if ( stream_id2.hasNext() ) {
                            adaptor.addChild(root_1, stream_id2.nextNode());

                        }
                        stream_id2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_as_name"


    public static class dotted_as_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dotted_as_name"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:223:1: dotted_as_name : (id1= NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV $id1 ( $id2)? ) |id1= IMPORT_NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV $id1 ( $id2)? ) );
    public final PythonProvenanceParser.dotted_as_name_return dotted_as_name() throws RecognitionException {
        PythonProvenanceParser.dotted_as_name_return retval = new PythonProvenanceParser.dotted_as_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token AS117=null;
        Token AS118=null;

        Object id1_tree=null;
        Object id2_tree=null;
        Object AS117_tree=null;
        Object AS118_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_IMPORT_NAME=new RewriteRuleTokenStream(adaptor,"token IMPORT_NAME");

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:224:2: (id1= NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV $id1 ( $id2)? ) |id1= IMPORT_NAME ( AS id2= NAME )? -> ^( IMPORT_EQUIV $id1 ( $id2)? ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==NAME) ) {
                alt40=1;
            }
            else if ( (LA40_0==IMPORT_NAME) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:224:4: id1= NAME ( AS id2= NAME )?
                    {
                    id1=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_as_name1878);  
                    stream_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:224:13: ( AS id2= NAME )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==AS) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:224:14: AS id2= NAME
                            {
                            AS117=(Token)match(input,AS,FOLLOW_AS_in_dotted_as_name1881);  
                            stream_AS.add(AS117);


                            id2=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_as_name1885);  
                            stream_NAME.add(id2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id2, id1
                    // token labels: id2, id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 224:28: -> ^( IMPORT_EQUIV $id1 ( $id2)? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:224:31: ^( IMPORT_EQUIV $id1 ( $id2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_EQUIV, "IMPORT_EQUIV")
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:224:52: ( $id2)?
                        if ( stream_id2.hasNext() ) {
                            adaptor.addChild(root_1, stream_id2.nextNode());

                        }
                        stream_id2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:225:4: id1= IMPORT_NAME ( AS id2= NAME )?
                    {
                    id1=(Token)match(input,IMPORT_NAME,FOLLOW_IMPORT_NAME_in_dotted_as_name1908);  
                    stream_IMPORT_NAME.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:225:20: ( AS id2= NAME )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==AS) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:225:21: AS id2= NAME
                            {
                            AS118=(Token)match(input,AS,FOLLOW_AS_in_dotted_as_name1911);  
                            stream_AS.add(AS118);


                            id2=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_as_name1915);  
                            stream_NAME.add(id2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: id1, id2
                    // token labels: id2, id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 225:35: -> ^( IMPORT_EQUIV $id1 ( $id2)? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:225:38: ^( IMPORT_EQUIV $id1 ( $id2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(IMPORT_EQUIV, "IMPORT_EQUIV")
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:225:59: ( $id2)?
                        if ( stream_id2.hasNext() ) {
                            adaptor.addChild(root_1, stream_id2.nextNode());

                        }
                        stream_id2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dotted_as_name"


    public static class dotted_as_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dotted_as_names"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:228:1: dotted_as_names : dotted_as_name ( COMMA dotted_as_name )* -> ^( IMPORT_ARGS ( dotted_as_name )+ ) ;
    public final PythonProvenanceParser.dotted_as_names_return dotted_as_names() throws RecognitionException {
        PythonProvenanceParser.dotted_as_names_return retval = new PythonProvenanceParser.dotted_as_names_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA120=null;
        PythonProvenanceParser.dotted_as_name_return dotted_as_name119 =null;

        PythonProvenanceParser.dotted_as_name_return dotted_as_name121 =null;


        Object COMMA120_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_dotted_as_name=new RewriteRuleSubtreeStream(adaptor,"rule dotted_as_name");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:228:17: ( dotted_as_name ( COMMA dotted_as_name )* -> ^( IMPORT_ARGS ( dotted_as_name )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:228:19: dotted_as_name ( COMMA dotted_as_name )*
            {
            pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names1942);
            dotted_as_name119=dotted_as_name();

            state._fsp--;

            stream_dotted_as_name.add(dotted_as_name119.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:228:34: ( COMMA dotted_as_name )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==COMMA) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:228:35: COMMA dotted_as_name
            	    {
            	    COMMA120=(Token)match(input,COMMA,FOLLOW_COMMA_in_dotted_as_names1945);  
            	    stream_COMMA.add(COMMA120);


            	    pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names1947);
            	    dotted_as_name121=dotted_as_name();

            	    state._fsp--;

            	    stream_dotted_as_name.add(dotted_as_name121.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            // AST REWRITE
            // elements: dotted_as_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 228:58: -> ^( IMPORT_ARGS ( dotted_as_name )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:228:61: ^( IMPORT_ARGS ( dotted_as_name )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPORT_ARGS, "IMPORT_ARGS")
                , root_1);

                if ( !(stream_dotted_as_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dotted_as_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_dotted_as_name.nextTree());

                }
                stream_dotted_as_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dotted_as_names"


    public static class global_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "global_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:231:1: global_stmt : 'global' NAME ( COMMA NAME )* ;
    public final PythonProvenanceParser.global_stmt_return global_stmt() throws RecognitionException {
        PythonProvenanceParser.global_stmt_return retval = new PythonProvenanceParser.global_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal122=null;
        Token NAME123=null;
        Token COMMA124=null;
        Token NAME125=null;

        Object string_literal122_tree=null;
        Object NAME123_tree=null;
        Object COMMA124_tree=null;
        Object NAME125_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:231:13: ( 'global' NAME ( COMMA NAME )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:231:15: 'global' NAME ( COMMA NAME )*
            {
            root_0 = (Object)adaptor.nil();


            string_literal122=(Token)match(input,135,FOLLOW_135_in_global_stmt1983); 
            string_literal122_tree = 
            (Object)adaptor.create(string_literal122)
            ;
            adaptor.addChild(root_0, string_literal122_tree);


            NAME123=(Token)match(input,NAME,FOLLOW_NAME_in_global_stmt1985); 
            NAME123_tree = 
            (Object)adaptor.create(NAME123)
            ;
            adaptor.addChild(root_0, NAME123_tree);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:231:29: ( COMMA NAME )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==COMMA) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:231:30: COMMA NAME
            	    {
            	    COMMA124=(Token)match(input,COMMA,FOLLOW_COMMA_in_global_stmt1988); 
            	    COMMA124_tree = 
            	    (Object)adaptor.create(COMMA124)
            	    ;
            	    adaptor.addChild(root_0, COMMA124_tree);


            	    NAME125=(Token)match(input,NAME,FOLLOW_NAME_in_global_stmt1990); 
            	    NAME125_tree = 
            	    (Object)adaptor.create(NAME125)
            	    ;
            	    adaptor.addChild(root_0, NAME125_tree);


            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_stmt"


    public static class exec_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exec_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:234:1: exec_stmt : 'exec' expr ( 'in' test ( COMMA test )? )? ;
    public final PythonProvenanceParser.exec_stmt_return exec_stmt() throws RecognitionException {
        PythonProvenanceParser.exec_stmt_return retval = new PythonProvenanceParser.exec_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal126=null;
        Token string_literal128=null;
        Token COMMA130=null;
        PythonProvenanceParser.expr_return expr127 =null;

        PythonProvenanceParser.test_return test129 =null;

        PythonProvenanceParser.test_return test131 =null;


        Object string_literal126_tree=null;
        Object string_literal128_tree=null;
        Object COMMA130_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:234:11: ( 'exec' expr ( 'in' test ( COMMA test )? )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:234:13: 'exec' expr ( 'in' test ( COMMA test )? )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal126=(Token)match(input,131,FOLLOW_131_in_exec_stmt2013); 
            string_literal126_tree = 
            (Object)adaptor.create(string_literal126)
            ;
            adaptor.addChild(root_0, string_literal126_tree);


            pushFollow(FOLLOW_expr_in_exec_stmt2015);
            expr127=expr();

            state._fsp--;

            adaptor.addChild(root_0, expr127.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:234:25: ( 'in' test ( COMMA test )? )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==IN) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:234:26: 'in' test ( COMMA test )?
                    {
                    string_literal128=(Token)match(input,IN,FOLLOW_IN_in_exec_stmt2018); 
                    string_literal128_tree = 
                    (Object)adaptor.create(string_literal128)
                    ;
                    adaptor.addChild(root_0, string_literal128_tree);


                    pushFollow(FOLLOW_test_in_exec_stmt2020);
                    test129=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test129.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:234:36: ( COMMA test )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==COMMA) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:234:37: COMMA test
                            {
                            COMMA130=(Token)match(input,COMMA,FOLLOW_COMMA_in_exec_stmt2023); 
                            COMMA130_tree = 
                            (Object)adaptor.create(COMMA130)
                            ;
                            adaptor.addChild(root_0, COMMA130_tree);


                            pushFollow(FOLLOW_test_in_exec_stmt2025);
                            test131=test();

                            state._fsp--;

                            adaptor.addChild(root_0, test131.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exec_stmt"


    public static class assert_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assert_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:237:1: assert_stmt : 'assert' test ( COMMA test )? ;
    public final PythonProvenanceParser.assert_stmt_return assert_stmt() throws RecognitionException {
        PythonProvenanceParser.assert_stmt_return retval = new PythonProvenanceParser.assert_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal132=null;
        Token COMMA134=null;
        PythonProvenanceParser.test_return test133 =null;

        PythonProvenanceParser.test_return test135 =null;


        Object string_literal132_tree=null;
        Object COMMA134_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:237:13: ( 'assert' test ( COMMA test )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:237:15: 'assert' test ( COMMA test )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal132=(Token)match(input,122,FOLLOW_122_in_assert_stmt2048); 
            string_literal132_tree = 
            (Object)adaptor.create(string_literal132)
            ;
            adaptor.addChild(root_0, string_literal132_tree);


            pushFollow(FOLLOW_test_in_assert_stmt2050);
            test133=test();

            state._fsp--;

            adaptor.addChild(root_0, test133.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:237:29: ( COMMA test )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==COMMA) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:237:30: COMMA test
                    {
                    COMMA134=(Token)match(input,COMMA,FOLLOW_COMMA_in_assert_stmt2053); 
                    COMMA134_tree = 
                    (Object)adaptor.create(COMMA134)
                    ;
                    adaptor.addChild(root_0, COMMA134_tree);


                    pushFollow(FOLLOW_test_in_assert_stmt2055);
                    test135=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test135.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assert_stmt"


    public static class compound_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compound_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:240:1: compound_stmt : ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef );
    public final PythonProvenanceParser.compound_stmt_return compound_stmt() throws RecognitionException {
        PythonProvenanceParser.compound_stmt_return retval = new PythonProvenanceParser.compound_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.if_stmt_return if_stmt136 =null;

        PythonProvenanceParser.while_stmt_return while_stmt137 =null;

        PythonProvenanceParser.for_stmt_return for_stmt138 =null;

        PythonProvenanceParser.try_stmt_return try_stmt139 =null;

        PythonProvenanceParser.with_stmt_return with_stmt140 =null;

        PythonProvenanceParser.funcdef_return funcdef141 =null;

        PythonProvenanceParser.classdef_return classdef142 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:240:15: ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef )
            int alt46=7;
            switch ( input.LA(1) ) {
            case IF:
                {
                alt46=1;
                }
                break;
            case 141:
                {
                alt46=2;
                }
                break;
            case 133:
                {
                alt46=3;
                }
                break;
            case 140:
                {
                alt46=4;
                }
                break;
            case 142:
                {
                alt46=5;
                }
                break;
            case AT:
            case 126:
                {
                alt46=6;
                }
                break;
            case 124:
                {
                alt46=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:240:17: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_compound_stmt2078);
                    if_stmt136=if_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt136.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:241:17: while_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_in_compound_stmt2096);
                    while_stmt137=while_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt137.getTree());

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:242:17: for_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_in_compound_stmt2114);
                    for_stmt138=for_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt138.getTree());

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:243:17: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_compound_stmt2132);
                    try_stmt139=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt139.getTree());

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:244:17: with_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_with_stmt_in_compound_stmt2150);
                    with_stmt140=with_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, with_stmt140.getTree());

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:245:17: funcdef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_funcdef_in_compound_stmt2168);
                    funcdef141=funcdef();

                    state._fsp--;

                    adaptor.addChild(root_0, funcdef141.getTree());

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:246:17: classdef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classdef_in_compound_stmt2186);
                    classdef142=classdef();

                    state._fsp--;

                    adaptor.addChild(root_0, classdef142.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compound_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:1: if_stmt : if_clause ( elif_clauses )? ( else_clause )? -> ^( IFBLOCK if_clause ( elif_clauses )? ( else_clause )? ) ;
    public final PythonProvenanceParser.if_stmt_return if_stmt() throws RecognitionException {
        PythonProvenanceParser.if_stmt_return retval = new PythonProvenanceParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.if_clause_return if_clause143 =null;

        PythonProvenanceParser.elif_clauses_return elif_clauses144 =null;

        PythonProvenanceParser.else_clause_return else_clause145 =null;


        RewriteRuleSubtreeStream stream_else_clause=new RewriteRuleSubtreeStream(adaptor,"rule else_clause");
        RewriteRuleSubtreeStream stream_elif_clauses=new RewriteRuleSubtreeStream(adaptor,"rule elif_clauses");
        RewriteRuleSubtreeStream stream_if_clause=new RewriteRuleSubtreeStream(adaptor,"rule if_clause");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:9: ( if_clause ( elif_clauses )? ( else_clause )? -> ^( IFBLOCK if_clause ( elif_clauses )? ( else_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:11: if_clause ( elif_clauses )? ( else_clause )?
            {
            pushFollow(FOLLOW_if_clause_in_if_stmt2209);
            if_clause143=if_clause();

            state._fsp--;

            stream_if_clause.add(if_clause143.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:21: ( elif_clauses )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==128) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:22: elif_clauses
                    {
                    pushFollow(FOLLOW_elif_clauses_in_if_stmt2212);
                    elif_clauses144=elif_clauses();

                    state._fsp--;

                    stream_elif_clauses.add(elif_clauses144.getTree());

                    }
                    break;

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:37: ( else_clause )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==129) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:38: else_clause
                    {
                    pushFollow(FOLLOW_else_clause_in_if_stmt2217);
                    else_clause145=else_clause();

                    state._fsp--;

                    stream_else_clause.add(else_clause145.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: elif_clauses, else_clause, if_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 249:52: -> ^( IFBLOCK if_clause ( elif_clauses )? ( else_clause )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:55: ^( IFBLOCK if_clause ( elif_clauses )? ( else_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IFBLOCK, "IFBLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_clause.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:75: ( elif_clauses )?
                if ( stream_elif_clauses.hasNext() ) {
                    adaptor.addChild(root_1, stream_elif_clauses.nextTree());

                }
                stream_elif_clauses.reset();

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:249:89: ( else_clause )?
                if ( stream_else_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_else_clause.nextTree());

                }
                stream_else_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:253:1: if_clause : ref= IF test COLON suite -> ^( IF_CMD[$ref] test suite ) ;
    public final PythonProvenanceParser.if_clause_return if_clause() throws RecognitionException {
        PythonProvenanceParser.if_clause_return retval = new PythonProvenanceParser.if_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON147=null;
        PythonProvenanceParser.test_return test146 =null;

        PythonProvenanceParser.suite_return suite148 =null;


        Object ref_tree=null;
        Object COLON147_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:253:10: (ref= IF test COLON suite -> ^( IF_CMD[$ref] test suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:253:12: ref= IF test COLON suite
            {
            ref=(Token)match(input,IF,FOLLOW_IF_in_if_clause2247);  
            stream_IF.add(ref);


            pushFollow(FOLLOW_test_in_if_clause2249);
            test146=test();

            state._fsp--;

            stream_test.add(test146.getTree());

            COLON147=(Token)match(input,COLON,FOLLOW_COLON_in_if_clause2251);  
            stream_COLON.add(COLON147);


            pushFollow(FOLLOW_suite_in_if_clause2253);
            suite148=suite();

            state._fsp--;

            stream_suite.add(suite148.getTree());

            // AST REWRITE
            // elements: test, suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:36: -> ^( IF_CMD[$ref] test suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:253:39: ^( IF_CMD[$ref] test suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_test.nextTree());

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_clause"


    public static class elif_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "elif_clauses"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:256:1: elif_clauses : ( elif_clause )+ -> ^( ELIF_CLAUSES ( elif_clause )+ ) ;
    public final PythonProvenanceParser.elif_clauses_return elif_clauses() throws RecognitionException {
        PythonProvenanceParser.elif_clauses_return retval = new PythonProvenanceParser.elif_clauses_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.elif_clause_return elif_clause149 =null;


        RewriteRuleSubtreeStream stream_elif_clause=new RewriteRuleSubtreeStream(adaptor,"rule elif_clause");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:257:2: ( ( elif_clause )+ -> ^( ELIF_CLAUSES ( elif_clause )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:257:4: ( elif_clause )+
            {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:257:4: ( elif_clause )+
            int cnt49=0;
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==128) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:257:5: elif_clause
            	    {
            	    pushFollow(FOLLOW_elif_clause_in_elif_clauses2277);
            	    elif_clause149=elif_clause();

            	    state._fsp--;

            	    stream_elif_clause.add(elif_clause149.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt49 >= 1 ) break loop49;
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);


            // AST REWRITE
            // elements: elif_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:19: -> ^( ELIF_CLAUSES ( elif_clause )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:257:22: ^( ELIF_CLAUSES ( elif_clause )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELIF_CLAUSES, "ELIF_CLAUSES")
                , root_1);

                if ( !(stream_elif_clause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_elif_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_elif_clause.nextTree());

                }
                stream_elif_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "elif_clauses"


    public static class elif_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "elif_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:260:1: elif_clause : ref= 'elif' test COLON suite -> ^( ELIF_CMD[$ref] test suite ) ;
    public final PythonProvenanceParser.elif_clause_return elif_clause() throws RecognitionException {
        PythonProvenanceParser.elif_clause_return retval = new PythonProvenanceParser.elif_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON151=null;
        PythonProvenanceParser.test_return test150 =null;

        PythonProvenanceParser.suite_return suite152 =null;


        Object ref_tree=null;
        Object COLON151_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:261:2: (ref= 'elif' test COLON suite -> ^( ELIF_CMD[$ref] test suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:261:4: ref= 'elif' test COLON suite
            {
            ref=(Token)match(input,128,FOLLOW_128_in_elif_clause2302);  
            stream_128.add(ref);


            pushFollow(FOLLOW_test_in_elif_clause2304);
            test150=test();

            state._fsp--;

            stream_test.add(test150.getTree());

            COLON151=(Token)match(input,COLON,FOLLOW_COLON_in_elif_clause2306);  
            stream_COLON.add(COLON151);


            pushFollow(FOLLOW_suite_in_elif_clause2308);
            suite152=suite();

            state._fsp--;

            stream_suite.add(suite152.getTree());

            // AST REWRITE
            // elements: suite, test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:32: -> ^( ELIF_CMD[$ref] test suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:261:35: ^( ELIF_CMD[$ref] test suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELIF_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_test.nextTree());

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "elif_clause"


    public static class else_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:264:1: else_clause : ref= 'else' COLON suite -> ^( ELSE_CMD[$ref] suite ) ;
    public final PythonProvenanceParser.else_clause_return else_clause() throws RecognitionException {
        PythonProvenanceParser.else_clause_return retval = new PythonProvenanceParser.else_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON153=null;
        PythonProvenanceParser.suite_return suite154 =null;


        Object ref_tree=null;
        Object COLON153_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:265:2: (ref= 'else' COLON suite -> ^( ELSE_CMD[$ref] suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:265:4: ref= 'else' COLON suite
            {
            ref=(Token)match(input,129,FOLLOW_129_in_else_clause2333);  
            stream_129.add(ref);


            COLON153=(Token)match(input,COLON,FOLLOW_COLON_in_else_clause2335);  
            stream_COLON.add(COLON153);


            pushFollow(FOLLOW_suite_in_else_clause2337);
            suite154=suite();

            state._fsp--;

            stream_suite.add(suite154.getTree());

            // AST REWRITE
            // elements: suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:27: -> ^( ELSE_CMD[$ref] suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:265:30: ^( ELSE_CMD[$ref] suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_clause"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:268:1: while_stmt : while_clause ( else_clause )? -> ^( WHILEBLOCK while_clause ( else_clause )? ) ;
    public final PythonProvenanceParser.while_stmt_return while_stmt() throws RecognitionException {
        PythonProvenanceParser.while_stmt_return retval = new PythonProvenanceParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.while_clause_return while_clause155 =null;

        PythonProvenanceParser.else_clause_return else_clause156 =null;


        RewriteRuleSubtreeStream stream_else_clause=new RewriteRuleSubtreeStream(adaptor,"rule else_clause");
        RewriteRuleSubtreeStream stream_while_clause=new RewriteRuleSubtreeStream(adaptor,"rule while_clause");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:268:12: ( while_clause ( else_clause )? -> ^( WHILEBLOCK while_clause ( else_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:268:14: while_clause ( else_clause )?
            {
            pushFollow(FOLLOW_while_clause_in_while_stmt2356);
            while_clause155=while_clause();

            state._fsp--;

            stream_while_clause.add(while_clause155.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:268:27: ( else_clause )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==129) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:268:28: else_clause
                    {
                    pushFollow(FOLLOW_else_clause_in_while_stmt2359);
                    else_clause156=else_clause();

                    state._fsp--;

                    stream_else_clause.add(else_clause156.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: while_clause, else_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 268:42: -> ^( WHILEBLOCK while_clause ( else_clause )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:268:45: ^( WHILEBLOCK while_clause ( else_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILEBLOCK, "WHILEBLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_while_clause.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:268:71: ( else_clause )?
                if ( stream_else_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_else_clause.nextTree());

                }
                stream_else_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:271:1: while_clause : ref= 'while' test COLON suite -> ^( WHILE_CMD[$ref] test suite ) ;
    public final PythonProvenanceParser.while_clause_return while_clause() throws RecognitionException {
        PythonProvenanceParser.while_clause_return retval = new PythonProvenanceParser.while_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON158=null;
        PythonProvenanceParser.test_return test157 =null;

        PythonProvenanceParser.suite_return suite159 =null;


        Object ref_tree=null;
        Object COLON158_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:271:13: (ref= 'while' test COLON suite -> ^( WHILE_CMD[$ref] test suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:271:15: ref= 'while' test COLON suite
            {
            ref=(Token)match(input,141,FOLLOW_141_in_while_clause2393);  
            stream_141.add(ref);


            pushFollow(FOLLOW_test_in_while_clause2395);
            test157=test();

            state._fsp--;

            stream_test.add(test157.getTree());

            COLON158=(Token)match(input,COLON,FOLLOW_COLON_in_while_clause2397);  
            stream_COLON.add(COLON158);


            pushFollow(FOLLOW_suite_in_while_clause2399);
            suite159=suite();

            state._fsp--;

            stream_suite.add(suite159.getTree());

            // AST REWRITE
            // elements: suite, test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 271:44: -> ^( WHILE_CMD[$ref] test suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:271:47: ^( WHILE_CMD[$ref] test suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_test.nextTree());

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_clause"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:274:1: for_stmt : ref= 'for' exprlist 'in' testlist COLON suite -> ^( FORLOOP_CMD[$ref] exprlist testlist suite ) ;
    public final PythonProvenanceParser.for_stmt_return for_stmt() throws RecognitionException {
        PythonProvenanceParser.for_stmt_return retval = new PythonProvenanceParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token string_literal161=null;
        Token COLON163=null;
        PythonProvenanceParser.exprlist_return exprlist160 =null;

        PythonProvenanceParser.testlist_return testlist162 =null;

        PythonProvenanceParser.suite_return suite164 =null;


        Object ref_tree=null;
        Object string_literal161_tree=null;
        Object COLON163_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:274:10: (ref= 'for' exprlist 'in' testlist COLON suite -> ^( FORLOOP_CMD[$ref] exprlist testlist suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:274:12: ref= 'for' exprlist 'in' testlist COLON suite
            {
            ref=(Token)match(input,133,FOLLOW_133_in_for_stmt2445);  
            stream_133.add(ref);


            pushFollow(FOLLOW_exprlist_in_for_stmt2447);
            exprlist160=exprlist();

            state._fsp--;

            stream_exprlist.add(exprlist160.getTree());

            string_literal161=(Token)match(input,IN,FOLLOW_IN_in_for_stmt2449);  
            stream_IN.add(string_literal161);


            pushFollow(FOLLOW_testlist_in_for_stmt2451);
            testlist162=testlist();

            state._fsp--;

            stream_testlist.add(testlist162.getTree());

            COLON163=(Token)match(input,COLON,FOLLOW_COLON_in_for_stmt2453);  
            stream_COLON.add(COLON163);


            pushFollow(FOLLOW_suite_in_for_stmt2455);
            suite164=suite();

            state._fsp--;

            stream_suite.add(suite164.getTree());

            // AST REWRITE
            // elements: exprlist, suite, testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 274:58: -> ^( FORLOOP_CMD[$ref] exprlist testlist suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:274:61: ^( FORLOOP_CMD[$ref] exprlist testlist suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FORLOOP_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_exprlist.nextTree());

                adaptor.addChild(root_1, stream_testlist.nextTree());

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:277:1: try_stmt : try_clause except_clause ( finally_clause )? -> ^( TRYBLOCK try_clause except_clause ( finally_clause )? ) ;
    public final PythonProvenanceParser.try_stmt_return try_stmt() throws RecognitionException {
        PythonProvenanceParser.try_stmt_return retval = new PythonProvenanceParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.try_clause_return try_clause165 =null;

        PythonProvenanceParser.except_clause_return except_clause166 =null;

        PythonProvenanceParser.finally_clause_return finally_clause167 =null;


        RewriteRuleSubtreeStream stream_except_clause=new RewriteRuleSubtreeStream(adaptor,"rule except_clause");
        RewriteRuleSubtreeStream stream_try_clause=new RewriteRuleSubtreeStream(adaptor,"rule try_clause");
        RewriteRuleSubtreeStream stream_finally_clause=new RewriteRuleSubtreeStream(adaptor,"rule finally_clause");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:277:9: ( try_clause except_clause ( finally_clause )? -> ^( TRYBLOCK try_clause except_clause ( finally_clause )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:277:11: try_clause except_clause ( finally_clause )?
            {
            pushFollow(FOLLOW_try_clause_in_try_stmt2486);
            try_clause165=try_clause();

            state._fsp--;

            stream_try_clause.add(try_clause165.getTree());

            pushFollow(FOLLOW_except_clause_in_try_stmt2488);
            except_clause166=except_clause();

            state._fsp--;

            stream_except_clause.add(except_clause166.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:277:36: ( finally_clause )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==132) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:277:37: finally_clause
                    {
                    pushFollow(FOLLOW_finally_clause_in_try_stmt2491);
                    finally_clause167=finally_clause();

                    state._fsp--;

                    stream_finally_clause.add(finally_clause167.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: finally_clause, except_clause, try_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:54: -> ^( TRYBLOCK try_clause except_clause ( finally_clause )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:277:57: ^( TRYBLOCK try_clause except_clause ( finally_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRYBLOCK, "TRYBLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_try_clause.nextTree());

                adaptor.addChild(root_1, stream_except_clause.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:277:93: ( finally_clause )?
                if ( stream_finally_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_clause.nextTree());

                }
                stream_finally_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class try_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:280:1: try_clause : ref= 'try' COLON suite -> ^( TRY_CMD[$ref] suite ) ;
    public final PythonProvenanceParser.try_clause_return try_clause() throws RecognitionException {
        PythonProvenanceParser.try_clause_return retval = new PythonProvenanceParser.try_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON168=null;
        PythonProvenanceParser.suite_return suite169 =null;


        Object ref_tree=null;
        Object COLON168_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:281:2: (ref= 'try' COLON suite -> ^( TRY_CMD[$ref] suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:281:4: ref= 'try' COLON suite
            {
            ref=(Token)match(input,140,FOLLOW_140_in_try_clause2520);  
            stream_140.add(ref);


            COLON168=(Token)match(input,COLON,FOLLOW_COLON_in_try_clause2522);  
            stream_COLON.add(COLON168);


            pushFollow(FOLLOW_suite_in_try_clause2524);
            suite169=suite();

            state._fsp--;

            stream_suite.add(suite169.getTree());

            // AST REWRITE
            // elements: suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 281:26: -> ^( TRY_CMD[$ref] suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:281:29: ^( TRY_CMD[$ref] suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_clause"


    public static class except_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "except_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:284:1: except_clause : ref= 'except' ( trailer )? COLON suite -> ^( EXCEPT_CMD[$ref] ( trailer )? suite ) ;
    public final PythonProvenanceParser.except_clause_return except_clause() throws RecognitionException {
        PythonProvenanceParser.except_clause_return retval = new PythonProvenanceParser.except_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON171=null;
        PythonProvenanceParser.trailer_return trailer170 =null;

        PythonProvenanceParser.suite_return suite172 =null;


        Object ref_tree=null;
        Object COLON171_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_trailer=new RewriteRuleSubtreeStream(adaptor,"rule trailer");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:285:2: (ref= 'except' ( trailer )? COLON suite -> ^( EXCEPT_CMD[$ref] ( trailer )? suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:285:4: ref= 'except' ( trailer )? COLON suite
            {
            ref=(Token)match(input,130,FOLLOW_130_in_except_clause2547);  
            stream_130.add(ref);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:285:17: ( trailer )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==LBRACK||LA52_0==LPAREN) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:285:17: trailer
                    {
                    pushFollow(FOLLOW_trailer_in_except_clause2549);
                    trailer170=trailer();

                    state._fsp--;

                    stream_trailer.add(trailer170.getTree());

                    }
                    break;

            }


            COLON171=(Token)match(input,COLON,FOLLOW_COLON_in_except_clause2552);  
            stream_COLON.add(COLON171);


            pushFollow(FOLLOW_suite_in_except_clause2554);
            suite172=suite();

            state._fsp--;

            stream_suite.add(suite172.getTree());

            // AST REWRITE
            // elements: suite, trailer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 285:38: -> ^( EXCEPT_CMD[$ref] ( trailer )? suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:285:41: ^( EXCEPT_CMD[$ref] ( trailer )? suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXCEPT_CMD, ref)
                , root_1);

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:285:60: ( trailer )?
                if ( stream_trailer.hasNext() ) {
                    adaptor.addChild(root_1, stream_trailer.nextTree());

                }
                stream_trailer.reset();

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "except_clause"


    public static class finally_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_clause"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:288:1: finally_clause : ref= 'finally' COLON suite -> ^( FINALLY_CMD[$ref] suite ) ;
    public final PythonProvenanceParser.finally_clause_return finally_clause() throws RecognitionException {
        PythonProvenanceParser.finally_clause_return retval = new PythonProvenanceParser.finally_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token COLON173=null;
        PythonProvenanceParser.suite_return suite174 =null;


        Object ref_tree=null;
        Object COLON173_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:289:2: (ref= 'finally' COLON suite -> ^( FINALLY_CMD[$ref] suite ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:289:4: ref= 'finally' COLON suite
            {
            ref=(Token)match(input,132,FOLLOW_132_in_finally_clause2580);  
            stream_132.add(ref);


            COLON173=(Token)match(input,COLON,FOLLOW_COLON_in_finally_clause2582);  
            stream_COLON.add(COLON173);


            pushFollow(FOLLOW_suite_in_finally_clause2584);
            suite174=suite();

            state._fsp--;

            stream_suite.add(suite174.getTree());

            // AST REWRITE
            // elements: suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 289:30: -> ^( FINALLY_CMD[$ref] suite )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:289:33: ^( FINALLY_CMD[$ref] suite )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_suite.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_clause"


    public static class with_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "with_stmt"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:292:1: with_stmt : 'with' test ( with_var )? COLON suite ;
    public final PythonProvenanceParser.with_stmt_return with_stmt() throws RecognitionException {
        PythonProvenanceParser.with_stmt_return retval = new PythonProvenanceParser.with_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal175=null;
        Token COLON178=null;
        PythonProvenanceParser.test_return test176 =null;

        PythonProvenanceParser.with_var_return with_var177 =null;

        PythonProvenanceParser.suite_return suite179 =null;


        Object string_literal175_tree=null;
        Object COLON178_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:292:10: ( 'with' test ( with_var )? COLON suite )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:292:12: 'with' test ( with_var )? COLON suite
            {
            root_0 = (Object)adaptor.nil();


            string_literal175=(Token)match(input,142,FOLLOW_142_in_with_stmt2603); 
            string_literal175_tree = 
            (Object)adaptor.create(string_literal175)
            ;
            adaptor.addChild(root_0, string_literal175_tree);


            pushFollow(FOLLOW_test_in_with_stmt2605);
            test176=test();

            state._fsp--;

            adaptor.addChild(root_0, test176.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:292:24: ( with_var )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==AS||LA53_0==NAME) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:292:25: with_var
                    {
                    pushFollow(FOLLOW_with_var_in_with_stmt2608);
                    with_var177=with_var();

                    state._fsp--;

                    adaptor.addChild(root_0, with_var177.getTree());

                    }
                    break;

            }


            COLON178=(Token)match(input,COLON,FOLLOW_COLON_in_with_stmt2612); 
            COLON178_tree = 
            (Object)adaptor.create(COLON178)
            ;
            adaptor.addChild(root_0, COLON178_tree);


            pushFollow(FOLLOW_suite_in_with_stmt2614);
            suite179=suite();

            state._fsp--;

            adaptor.addChild(root_0, suite179.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "with_stmt"


    public static class with_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "with_var"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:295:1: with_var : ( 'as' | NAME ) expr ;
    public final PythonProvenanceParser.with_var_return with_var() throws RecognitionException {
        PythonProvenanceParser.with_var_return retval = new PythonProvenanceParser.with_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set180=null;
        PythonProvenanceParser.expr_return expr181 =null;


        Object set180_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:295:9: ( ( 'as' | NAME ) expr )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:295:11: ( 'as' | NAME ) expr
            {
            root_0 = (Object)adaptor.nil();


            set180=(Token)input.LT(1);

            if ( input.LA(1)==AS||input.LA(1)==NAME ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set180)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_expr_in_with_var2639);
            expr181=expr();

            state._fsp--;

            adaptor.addChild(root_0, expr181.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "with_var"


    public static class suite_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "suite"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:298:1: suite : ( NEWLINE INDENT ( stmt_inside_block )+ DEDENT -> ^( INDENT ( stmt_inside_block )+ ) | INDENT ( stmt_inside_block )+ DEDENT -> ^( INDENT ( stmt_inside_block )+ ) );
    public final PythonProvenanceParser.suite_return suite() throws RecognitionException {
        PythonProvenanceParser.suite_return retval = new PythonProvenanceParser.suite_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NEWLINE182=null;
        Token INDENT183=null;
        Token DEDENT185=null;
        Token INDENT186=null;
        Token DEDENT188=null;
        PythonProvenanceParser.stmt_inside_block_return stmt_inside_block184 =null;

        PythonProvenanceParser.stmt_inside_block_return stmt_inside_block187 =null;


        Object NEWLINE182_tree=null;
        Object INDENT183_tree=null;
        Object DEDENT185_tree=null;
        Object INDENT186_tree=null;
        Object DEDENT188_tree=null;
        RewriteRuleTokenStream stream_DEDENT=new RewriteRuleTokenStream(adaptor,"token DEDENT");
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleTokenStream stream_INDENT=new RewriteRuleTokenStream(adaptor,"token INDENT");
        RewriteRuleSubtreeStream stream_stmt_inside_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_inside_block");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:298:7: ( NEWLINE INDENT ( stmt_inside_block )+ DEDENT -> ^( INDENT ( stmt_inside_block )+ ) | INDENT ( stmt_inside_block )+ DEDENT -> ^( INDENT ( stmt_inside_block )+ ) )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==NEWLINE) ) {
                alt56=1;
            }
            else if ( (LA56_0==INDENT) ) {
                alt56=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:298:9: NEWLINE INDENT ( stmt_inside_block )+ DEDENT
                    {
                    NEWLINE182=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_suite2658);  
                    stream_NEWLINE.add(NEWLINE182);


                    INDENT183=(Token)match(input,INDENT,FOLLOW_INDENT_in_suite2660);  
                    stream_INDENT.add(INDENT183);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:298:24: ( stmt_inside_block )+
                    int cnt54=0;
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( ((LA54_0 >= AT && LA54_0 <= BACKQUOTE)||LA54_0==DOTTED_NAME||LA54_0==FLOAT||LA54_0==IF||LA54_0==INT||(LA54_0 >= LBRACK && LA54_0 <= LCURLY)||LA54_0==LONGINT||(LA54_0 >= LPAREN && LA54_0 <= MINUS)||LA54_0==NAME||LA54_0==NOT||LA54_0==PLUS||LA54_0==PRINT||LA54_0==STRING||LA54_0==TILDE||(LA54_0 >= 122 && LA54_0 <= 127)||LA54_0==131||(LA54_0 >= 133 && LA54_0 <= 142)) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:298:25: stmt_inside_block
                    	    {
                    	    pushFollow(FOLLOW_stmt_inside_block_in_suite2663);
                    	    stmt_inside_block184=stmt_inside_block();

                    	    state._fsp--;

                    	    stream_stmt_inside_block.add(stmt_inside_block184.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt54 >= 1 ) break loop54;
                                EarlyExitException eee =
                                    new EarlyExitException(54, input);
                                throw eee;
                        }
                        cnt54++;
                    } while (true);


                    DEDENT185=(Token)match(input,DEDENT,FOLLOW_DEDENT_in_suite2667);  
                    stream_DEDENT.add(DEDENT185);


                    // AST REWRITE
                    // elements: stmt_inside_block, INDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 298:52: -> ^( INDENT ( stmt_inside_block )+ )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:298:55: ^( INDENT ( stmt_inside_block )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_INDENT.nextNode()
                        , root_1);

                        if ( !(stream_stmt_inside_block.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt_inside_block.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt_inside_block.nextTree());

                        }
                        stream_stmt_inside_block.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:299:9: INDENT ( stmt_inside_block )+ DEDENT
                    {
                    INDENT186=(Token)match(input,INDENT,FOLLOW_INDENT_in_suite2686);  
                    stream_INDENT.add(INDENT186);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:299:16: ( stmt_inside_block )+
                    int cnt55=0;
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( ((LA55_0 >= AT && LA55_0 <= BACKQUOTE)||LA55_0==DOTTED_NAME||LA55_0==FLOAT||LA55_0==IF||LA55_0==INT||(LA55_0 >= LBRACK && LA55_0 <= LCURLY)||LA55_0==LONGINT||(LA55_0 >= LPAREN && LA55_0 <= MINUS)||LA55_0==NAME||LA55_0==NOT||LA55_0==PLUS||LA55_0==PRINT||LA55_0==STRING||LA55_0==TILDE||(LA55_0 >= 122 && LA55_0 <= 127)||LA55_0==131||(LA55_0 >= 133 && LA55_0 <= 142)) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:299:17: stmt_inside_block
                    	    {
                    	    pushFollow(FOLLOW_stmt_inside_block_in_suite2689);
                    	    stmt_inside_block187=stmt_inside_block();

                    	    state._fsp--;

                    	    stream_stmt_inside_block.add(stmt_inside_block187.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt55 >= 1 ) break loop55;
                                EarlyExitException eee =
                                    new EarlyExitException(55, input);
                                throw eee;
                        }
                        cnt55++;
                    } while (true);


                    DEDENT188=(Token)match(input,DEDENT,FOLLOW_DEDENT_in_suite2693);  
                    stream_DEDENT.add(DEDENT188);


                    // AST REWRITE
                    // elements: stmt_inside_block, INDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 299:44: -> ^( INDENT ( stmt_inside_block )+ )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:299:47: ^( INDENT ( stmt_inside_block )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_INDENT.nextNode()
                        , root_1);

                        if ( !(stream_stmt_inside_block.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt_inside_block.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt_inside_block.nextTree());

                        }
                        stream_stmt_inside_block.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "suite"


    public static class test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:302:1: test : or_test ;
    public final PythonProvenanceParser.test_return test() throws RecognitionException {
        PythonProvenanceParser.test_return retval = new PythonProvenanceParser.test_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.or_test_return or_test189 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:302:5: ( or_test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:302:7: or_test
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_or_test_in_test2716);
            or_test189=or_test();

            state._fsp--;

            adaptor.addChild(root_0, or_test189.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "test"


    public static class or_test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "or_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:305:1: or_test : and_test ( OR ^ and_test )* ;
    public final PythonProvenanceParser.or_test_return or_test() throws RecognitionException {
        PythonProvenanceParser.or_test_return retval = new PythonProvenanceParser.or_test_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OR191=null;
        PythonProvenanceParser.and_test_return and_test190 =null;

        PythonProvenanceParser.and_test_return and_test192 =null;


        Object OR191_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:305:9: ( and_test ( OR ^ and_test )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:305:11: and_test ( OR ^ and_test )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_test_in_or_test2729);
            and_test190=and_test();

            state._fsp--;

            adaptor.addChild(root_0, and_test190.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:305:20: ( OR ^ and_test )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==OR) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:305:21: OR ^ and_test
            	    {
            	    OR191=(Token)match(input,OR,FOLLOW_OR_in_or_test2732); 
            	    OR191_tree = 
            	    (Object)adaptor.create(OR191)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(OR191_tree, root_0);


            	    pushFollow(FOLLOW_and_test_in_or_test2735);
            	    and_test192=and_test();

            	    state._fsp--;

            	    adaptor.addChild(root_0, and_test192.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "or_test"


    public static class and_test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:308:1: and_test : not_test ( AND ^ not_test )* ;
    public final PythonProvenanceParser.and_test_return and_test() throws RecognitionException {
        PythonProvenanceParser.and_test_return retval = new PythonProvenanceParser.and_test_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AND194=null;
        PythonProvenanceParser.not_test_return not_test193 =null;

        PythonProvenanceParser.not_test_return not_test195 =null;


        Object AND194_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:308:10: ( not_test ( AND ^ not_test )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:308:12: not_test ( AND ^ not_test )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_not_test_in_and_test2754);
            not_test193=not_test();

            state._fsp--;

            adaptor.addChild(root_0, not_test193.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:308:21: ( AND ^ not_test )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==AND) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:308:22: AND ^ not_test
            	    {
            	    AND194=(Token)match(input,AND,FOLLOW_AND_in_and_test2757); 
            	    AND194_tree = 
            	    (Object)adaptor.create(AND194)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AND194_tree, root_0);


            	    pushFollow(FOLLOW_not_test_in_and_test2760);
            	    not_test195=not_test();

            	    state._fsp--;

            	    adaptor.addChild(root_0, not_test195.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_test"


    public static class not_test_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_test"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:311:1: not_test : ( NOT ^ not_test | comparison );
    public final PythonProvenanceParser.not_test_return not_test() throws RecognitionException {
        PythonProvenanceParser.not_test_return retval = new PythonProvenanceParser.not_test_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NOT196=null;
        PythonProvenanceParser.not_test_return not_test197 =null;

        PythonProvenanceParser.comparison_return comparison198 =null;


        Object NOT196_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:311:10: ( NOT ^ not_test | comparison )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==NOT) ) {
                alt59=1;
            }
            else if ( (LA59_0==BACKQUOTE||LA59_0==DOTTED_NAME||LA59_0==FLOAT||LA59_0==INT||(LA59_0 >= LBRACK && LA59_0 <= LCURLY)||LA59_0==LONGINT||(LA59_0 >= LPAREN && LA59_0 <= MINUS)||LA59_0==NAME||LA59_0==PLUS||LA59_0==STRING||LA59_0==TILDE) ) {
                alt59=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:311:12: NOT ^ not_test
                    {
                    root_0 = (Object)adaptor.nil();


                    NOT196=(Token)match(input,NOT,FOLLOW_NOT_in_not_test2780); 
                    NOT196_tree = 
                    (Object)adaptor.create(NOT196)
                    ;
                    root_0 = (Object)adaptor.becomeRoot(NOT196_tree, root_0);


                    pushFollow(FOLLOW_not_test_in_not_test2783);
                    not_test197=not_test();

                    state._fsp--;

                    adaptor.addChild(root_0, not_test197.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:312:12: comparison
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comparison_in_not_test2796);
                    comparison198=comparison();

                    state._fsp--;

                    adaptor.addChild(root_0, comparison198.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_test"


    public static class comparison_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comparison"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:1: comparison : expr ( ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr )* ;
    public final PythonProvenanceParser.comparison_return comparison() throws RecognitionException {
        PythonProvenanceParser.comparison_return retval = new PythonProvenanceParser.comparison_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LESS200=null;
        Token GREATER201=null;
        Token EQUAL202=null;
        Token GREATEREQUAL203=null;
        Token LESSEQUAL204=null;
        Token ALT_NOTEQUAL205=null;
        Token NOTEQUAL206=null;
        Token IN207=null;
        Token NOTIN208=null;
        Token IS209=null;
        Token ISNOT210=null;
        PythonProvenanceParser.expr_return expr199 =null;

        PythonProvenanceParser.expr_return expr211 =null;


        Object LESS200_tree=null;
        Object GREATER201_tree=null;
        Object EQUAL202_tree=null;
        Object GREATEREQUAL203_tree=null;
        Object LESSEQUAL204_tree=null;
        Object ALT_NOTEQUAL205_tree=null;
        Object NOTEQUAL206_tree=null;
        Object IN207_tree=null;
        Object NOTIN208_tree=null;
        Object IS209_tree=null;
        Object ISNOT210_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:11: ( expr ( ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:13: expr ( ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_comparison2813);
            expr199=expr();

            state._fsp--;

            adaptor.addChild(root_0, expr199.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:18: ( ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==ALT_NOTEQUAL||LA61_0==EQUAL||(LA61_0 >= GREATER && LA61_0 <= GREATEREQUAL)||LA61_0==IN||(LA61_0 >= IS && LA61_0 <= ISNOT)||(LA61_0 >= LESS && LA61_0 <= LESSEQUAL)||(LA61_0 >= NOTEQUAL && LA61_0 <= NOTIN)) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:20: ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^) expr
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:20: ( LESS ^| GREATER ^| EQUAL ^| GREATEREQUAL ^| LESSEQUAL ^| ALT_NOTEQUAL ^| NOTEQUAL ^| IN ^| NOTIN ^| IS ^| ISNOT ^)
            	    int alt60=11;
            	    switch ( input.LA(1) ) {
            	    case LESS:
            	        {
            	        alt60=1;
            	        }
            	        break;
            	    case GREATER:
            	        {
            	        alt60=2;
            	        }
            	        break;
            	    case EQUAL:
            	        {
            	        alt60=3;
            	        }
            	        break;
            	    case GREATEREQUAL:
            	        {
            	        alt60=4;
            	        }
            	        break;
            	    case LESSEQUAL:
            	        {
            	        alt60=5;
            	        }
            	        break;
            	    case ALT_NOTEQUAL:
            	        {
            	        alt60=6;
            	        }
            	        break;
            	    case NOTEQUAL:
            	        {
            	        alt60=7;
            	        }
            	        break;
            	    case IN:
            	        {
            	        alt60=8;
            	        }
            	        break;
            	    case NOTIN:
            	        {
            	        alt60=9;
            	        }
            	        break;
            	    case IS:
            	        {
            	        alt60=10;
            	        }
            	        break;
            	    case ISNOT:
            	        {
            	        alt60=11;
            	        }
            	        break;
            	    default:
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 60, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt60) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:21: LESS ^
            	            {
            	            LESS200=(Token)match(input,LESS,FOLLOW_LESS_in_comparison2818); 
            	            LESS200_tree = 
            	            (Object)adaptor.create(LESS200)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(LESS200_tree, root_0);


            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:27: GREATER ^
            	            {
            	            GREATER201=(Token)match(input,GREATER,FOLLOW_GREATER_in_comparison2821); 
            	            GREATER201_tree = 
            	            (Object)adaptor.create(GREATER201)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(GREATER201_tree, root_0);


            	            }
            	            break;
            	        case 3 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:36: EQUAL ^
            	            {
            	            EQUAL202=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_comparison2824); 
            	            EQUAL202_tree = 
            	            (Object)adaptor.create(EQUAL202)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(EQUAL202_tree, root_0);


            	            }
            	            break;
            	        case 4 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:43: GREATEREQUAL ^
            	            {
            	            GREATEREQUAL203=(Token)match(input,GREATEREQUAL,FOLLOW_GREATEREQUAL_in_comparison2827); 
            	            GREATEREQUAL203_tree = 
            	            (Object)adaptor.create(GREATEREQUAL203)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(GREATEREQUAL203_tree, root_0);


            	            }
            	            break;
            	        case 5 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:57: LESSEQUAL ^
            	            {
            	            LESSEQUAL204=(Token)match(input,LESSEQUAL,FOLLOW_LESSEQUAL_in_comparison2830); 
            	            LESSEQUAL204_tree = 
            	            (Object)adaptor.create(LESSEQUAL204)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(LESSEQUAL204_tree, root_0);


            	            }
            	            break;
            	        case 6 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:68: ALT_NOTEQUAL ^
            	            {
            	            ALT_NOTEQUAL205=(Token)match(input,ALT_NOTEQUAL,FOLLOW_ALT_NOTEQUAL_in_comparison2833); 
            	            ALT_NOTEQUAL205_tree = 
            	            (Object)adaptor.create(ALT_NOTEQUAL205)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(ALT_NOTEQUAL205_tree, root_0);


            	            }
            	            break;
            	        case 7 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:82: NOTEQUAL ^
            	            {
            	            NOTEQUAL206=(Token)match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_comparison2836); 
            	            NOTEQUAL206_tree = 
            	            (Object)adaptor.create(NOTEQUAL206)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(NOTEQUAL206_tree, root_0);


            	            }
            	            break;
            	        case 8 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:92: IN ^
            	            {
            	            IN207=(Token)match(input,IN,FOLLOW_IN_in_comparison2839); 
            	            IN207_tree = 
            	            (Object)adaptor.create(IN207)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(IN207_tree, root_0);


            	            }
            	            break;
            	        case 9 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:96: NOTIN ^
            	            {
            	            NOTIN208=(Token)match(input,NOTIN,FOLLOW_NOTIN_in_comparison2842); 
            	            NOTIN208_tree = 
            	            (Object)adaptor.create(NOTIN208)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(NOTIN208_tree, root_0);


            	            }
            	            break;
            	        case 10 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:103: IS ^
            	            {
            	            IS209=(Token)match(input,IS,FOLLOW_IS_in_comparison2845); 
            	            IS209_tree = 
            	            (Object)adaptor.create(IS209)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(IS209_tree, root_0);


            	            }
            	            break;
            	        case 11 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:315:107: ISNOT ^
            	            {
            	            ISNOT210=(Token)match(input,ISNOT,FOLLOW_ISNOT_in_comparison2848); 
            	            ISNOT210_tree = 
            	            (Object)adaptor.create(ISNOT210)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(ISNOT210_tree, root_0);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_expr_in_comparison2852);
            	    expr211=expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expr211.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comparison"


    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:318:1: expr : xor_expr ( VBAR ^ xor_expr )* ;
    public final PythonProvenanceParser.expr_return expr() throws RecognitionException {
        PythonProvenanceParser.expr_return retval = new PythonProvenanceParser.expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token VBAR213=null;
        PythonProvenanceParser.xor_expr_return xor_expr212 =null;

        PythonProvenanceParser.xor_expr_return xor_expr214 =null;


        Object VBAR213_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:318:6: ( xor_expr ( VBAR ^ xor_expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:318:8: xor_expr ( VBAR ^ xor_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_xor_expr_in_expr2873);
            xor_expr212=xor_expr();

            state._fsp--;

            adaptor.addChild(root_0, xor_expr212.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:318:17: ( VBAR ^ xor_expr )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==VBAR) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:318:18: VBAR ^ xor_expr
            	    {
            	    VBAR213=(Token)match(input,VBAR,FOLLOW_VBAR_in_expr2876); 
            	    VBAR213_tree = 
            	    (Object)adaptor.create(VBAR213)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(VBAR213_tree, root_0);


            	    pushFollow(FOLLOW_xor_expr_in_expr2879);
            	    xor_expr214=xor_expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, xor_expr214.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class xor_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xor_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:321:1: xor_expr : and_expr ( CIRCUMFLEX ^ and_expr )* ;
    public final PythonProvenanceParser.xor_expr_return xor_expr() throws RecognitionException {
        PythonProvenanceParser.xor_expr_return retval = new PythonProvenanceParser.xor_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CIRCUMFLEX216=null;
        PythonProvenanceParser.and_expr_return and_expr215 =null;

        PythonProvenanceParser.and_expr_return and_expr217 =null;


        Object CIRCUMFLEX216_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:321:10: ( and_expr ( CIRCUMFLEX ^ and_expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:321:12: and_expr ( CIRCUMFLEX ^ and_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_expr_in_xor_expr2895);
            and_expr215=and_expr();

            state._fsp--;

            adaptor.addChild(root_0, and_expr215.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:321:21: ( CIRCUMFLEX ^ and_expr )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==CIRCUMFLEX) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:321:22: CIRCUMFLEX ^ and_expr
            	    {
            	    CIRCUMFLEX216=(Token)match(input,CIRCUMFLEX,FOLLOW_CIRCUMFLEX_in_xor_expr2898); 
            	    CIRCUMFLEX216_tree = 
            	    (Object)adaptor.create(CIRCUMFLEX216)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(CIRCUMFLEX216_tree, root_0);


            	    pushFollow(FOLLOW_and_expr_in_xor_expr2901);
            	    and_expr217=and_expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, and_expr217.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xor_expr"


    public static class and_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:324:1: and_expr : shift_expr ( AMPER ^ shift_expr )* ;
    public final PythonProvenanceParser.and_expr_return and_expr() throws RecognitionException {
        PythonProvenanceParser.and_expr_return retval = new PythonProvenanceParser.and_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AMPER219=null;
        PythonProvenanceParser.shift_expr_return shift_expr218 =null;

        PythonProvenanceParser.shift_expr_return shift_expr220 =null;


        Object AMPER219_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:324:10: ( shift_expr ( AMPER ^ shift_expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:324:12: shift_expr ( AMPER ^ shift_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_shift_expr_in_and_expr2921);
            shift_expr218=shift_expr();

            state._fsp--;

            adaptor.addChild(root_0, shift_expr218.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:324:23: ( AMPER ^ shift_expr )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==AMPER) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:324:24: AMPER ^ shift_expr
            	    {
            	    AMPER219=(Token)match(input,AMPER,FOLLOW_AMPER_in_and_expr2924); 
            	    AMPER219_tree = 
            	    (Object)adaptor.create(AMPER219)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AMPER219_tree, root_0);


            	    pushFollow(FOLLOW_shift_expr_in_and_expr2927);
            	    shift_expr220=shift_expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, shift_expr220.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_expr"


    public static class shift_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shift_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:327:1: shift_expr : arith_expr ( ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr )* ;
    public final PythonProvenanceParser.shift_expr_return shift_expr() throws RecognitionException {
        PythonProvenanceParser.shift_expr_return retval = new PythonProvenanceParser.shift_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFTSHIFT222=null;
        Token RIGHTSHIFT223=null;
        PythonProvenanceParser.arith_expr_return arith_expr221 =null;

        PythonProvenanceParser.arith_expr_return arith_expr224 =null;


        Object LEFTSHIFT222_tree=null;
        Object RIGHTSHIFT223_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:327:12: ( arith_expr ( ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:327:14: arith_expr ( ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_arith_expr_in_shift_expr2947);
            arith_expr221=arith_expr();

            state._fsp--;

            adaptor.addChild(root_0, arith_expr221.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:327:25: ( ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==LEFTSHIFT||LA66_0==RIGHTSHIFT) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:327:26: ( LEFTSHIFT ^| RIGHTSHIFT ^) arith_expr
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:327:26: ( LEFTSHIFT ^| RIGHTSHIFT ^)
            	    int alt65=2;
            	    int LA65_0 = input.LA(1);

            	    if ( (LA65_0==LEFTSHIFT) ) {
            	        alt65=1;
            	    }
            	    else if ( (LA65_0==RIGHTSHIFT) ) {
            	        alt65=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 65, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt65) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:327:27: LEFTSHIFT ^
            	            {
            	            LEFTSHIFT222=(Token)match(input,LEFTSHIFT,FOLLOW_LEFTSHIFT_in_shift_expr2951); 
            	            LEFTSHIFT222_tree = 
            	            (Object)adaptor.create(LEFTSHIFT222)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(LEFTSHIFT222_tree, root_0);


            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:327:38: RIGHTSHIFT ^
            	            {
            	            RIGHTSHIFT223=(Token)match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_shift_expr2954); 
            	            RIGHTSHIFT223_tree = 
            	            (Object)adaptor.create(RIGHTSHIFT223)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(RIGHTSHIFT223_tree, root_0);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_arith_expr_in_shift_expr2958);
            	    arith_expr224=arith_expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, arith_expr224.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shift_expr"


    public static class arith_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arith_expr"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:330:1: arith_expr : term ( ( PLUS ^| MINUS ^) term )* ;
    public final PythonProvenanceParser.arith_expr_return arith_expr() throws RecognitionException {
        PythonProvenanceParser.arith_expr_return retval = new PythonProvenanceParser.arith_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLUS226=null;
        Token MINUS227=null;
        PythonProvenanceParser.term_return term225 =null;

        PythonProvenanceParser.term_return term228 =null;


        Object PLUS226_tree=null;
        Object MINUS227_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:330:11: ( term ( ( PLUS ^| MINUS ^) term )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:330:13: term ( ( PLUS ^| MINUS ^) term )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_term_in_arith_expr2979);
            term225=term();

            state._fsp--;

            adaptor.addChild(root_0, term225.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:330:18: ( ( PLUS ^| MINUS ^) term )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==MINUS||LA68_0==PLUS) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:330:19: ( PLUS ^| MINUS ^) term
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:330:19: ( PLUS ^| MINUS ^)
            	    int alt67=2;
            	    int LA67_0 = input.LA(1);

            	    if ( (LA67_0==PLUS) ) {
            	        alt67=1;
            	    }
            	    else if ( (LA67_0==MINUS) ) {
            	        alt67=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 67, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt67) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:330:20: PLUS ^
            	            {
            	            PLUS226=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_expr2983); 
            	            PLUS226_tree = 
            	            (Object)adaptor.create(PLUS226)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(PLUS226_tree, root_0);


            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:330:26: MINUS ^
            	            {
            	            MINUS227=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_expr2986); 
            	            MINUS227_tree = 
            	            (Object)adaptor.create(MINUS227)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(MINUS227_tree, root_0);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_term_in_arith_expr2990);
            	    term228=term();

            	    state._fsp--;

            	    adaptor.addChild(root_0, term228.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arith_expr"


    public static class term_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "term"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:1: term : factor ( ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor )* ;
    public final PythonProvenanceParser.term_return term() throws RecognitionException {
        PythonProvenanceParser.term_return retval = new PythonProvenanceParser.term_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR230=null;
        Token SLASH231=null;
        Token DOUBLESLASH232=null;
        Token DOUBLESTAR233=null;
        PythonProvenanceParser.factor_return factor229 =null;

        PythonProvenanceParser.factor_return factor234 =null;


        Object STAR230_tree=null;
        Object SLASH231_tree=null;
        Object DOUBLESLASH232_tree=null;
        Object DOUBLESTAR233_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:6: ( factor ( ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor )* )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:8: factor ( ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_factor_in_term3011);
            factor229=factor();

            state._fsp--;

            adaptor.addChild(root_0, factor229.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:15: ( ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==DOUBLESLASH||LA70_0==DOUBLESTAR||LA70_0==SLASH||LA70_0==STAR) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:16: ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^) factor
            	    {
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:16: ( STAR ^| SLASH ^| DOUBLESLASH ^| DOUBLESTAR ^)
            	    int alt69=4;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt69=1;
            	        }
            	        break;
            	    case SLASH:
            	        {
            	        alt69=2;
            	        }
            	        break;
            	    case DOUBLESLASH:
            	        {
            	        alt69=3;
            	        }
            	        break;
            	    case DOUBLESTAR:
            	        {
            	        alt69=4;
            	        }
            	        break;
            	    default:
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 69, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt69) {
            	        case 1 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:17: STAR ^
            	            {
            	            STAR230=(Token)match(input,STAR,FOLLOW_STAR_in_term3015); 
            	            STAR230_tree = 
            	            (Object)adaptor.create(STAR230)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(STAR230_tree, root_0);


            	            }
            	            break;
            	        case 2 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:25: SLASH ^
            	            {
            	            SLASH231=(Token)match(input,SLASH,FOLLOW_SLASH_in_term3020); 
            	            SLASH231_tree = 
            	            (Object)adaptor.create(SLASH231)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(SLASH231_tree, root_0);


            	            }
            	            break;
            	        case 3 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:34: DOUBLESLASH ^
            	            {
            	            DOUBLESLASH232=(Token)match(input,DOUBLESLASH,FOLLOW_DOUBLESLASH_in_term3025); 
            	            DOUBLESLASH232_tree = 
            	            (Object)adaptor.create(DOUBLESLASH232)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(DOUBLESLASH232_tree, root_0);


            	            }
            	            break;
            	        case 4 :
            	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:333:49: DOUBLESTAR ^
            	            {
            	            DOUBLESTAR233=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_term3030); 
            	            DOUBLESTAR233_tree = 
            	            (Object)adaptor.create(DOUBLESTAR233)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(DOUBLESTAR233_tree, root_0);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_factor_in_term3035);
            	    factor234=factor();

            	    state._fsp--;

            	    adaptor.addChild(root_0, factor234.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "term"


    public static class factor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "factor"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:337:1: factor : ( PLUS factor | MINUS factor | TILDE factor | power );
    public final PythonProvenanceParser.factor_return factor() throws RecognitionException {
        PythonProvenanceParser.factor_return retval = new PythonProvenanceParser.factor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLUS235=null;
        Token MINUS237=null;
        Token TILDE239=null;
        PythonProvenanceParser.factor_return factor236 =null;

        PythonProvenanceParser.factor_return factor238 =null;

        PythonProvenanceParser.factor_return factor240 =null;

        PythonProvenanceParser.power_return power241 =null;


        Object PLUS235_tree=null;
        Object MINUS237_tree=null;
        Object TILDE239_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:337:8: ( PLUS factor | MINUS factor | TILDE factor | power )
            int alt71=4;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt71=1;
                }
                break;
            case MINUS:
                {
                alt71=2;
                }
                break;
            case TILDE:
                {
                alt71=3;
                }
                break;
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case NAME:
            case STRING:
                {
                alt71=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;

            }

            switch (alt71) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:337:10: PLUS factor
                    {
                    root_0 = (Object)adaptor.nil();


                    PLUS235=(Token)match(input,PLUS,FOLLOW_PLUS_in_factor3052); 
                    PLUS235_tree = 
                    (Object)adaptor.create(PLUS235)
                    ;
                    adaptor.addChild(root_0, PLUS235_tree);


                    pushFollow(FOLLOW_factor_in_factor3054);
                    factor236=factor();

                    state._fsp--;

                    adaptor.addChild(root_0, factor236.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:338:10: MINUS factor
                    {
                    root_0 = (Object)adaptor.nil();


                    MINUS237=(Token)match(input,MINUS,FOLLOW_MINUS_in_factor3065); 
                    MINUS237_tree = 
                    (Object)adaptor.create(MINUS237)
                    ;
                    adaptor.addChild(root_0, MINUS237_tree);


                    pushFollow(FOLLOW_factor_in_factor3067);
                    factor238=factor();

                    state._fsp--;

                    adaptor.addChild(root_0, factor238.getTree());

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:339:10: TILDE factor
                    {
                    root_0 = (Object)adaptor.nil();


                    TILDE239=(Token)match(input,TILDE,FOLLOW_TILDE_in_factor3078); 
                    TILDE239_tree = 
                    (Object)adaptor.create(TILDE239)
                    ;
                    adaptor.addChild(root_0, TILDE239_tree);


                    pushFollow(FOLLOW_factor_in_factor3080);
                    factor240=factor();

                    state._fsp--;

                    adaptor.addChild(root_0, factor240.getTree());

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:340:10: power
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_power_in_factor3091);
                    power241=power();

                    state._fsp--;

                    adaptor.addChild(root_0, power241.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "factor"


    public static class power_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "power"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:343:1: power : atom ( trailer )? -> ^( EXPRESSION atom ( trailer )? ) ;
    public final PythonProvenanceParser.power_return power() throws RecognitionException {
        PythonProvenanceParser.power_return retval = new PythonProvenanceParser.power_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.atom_return atom242 =null;

        PythonProvenanceParser.trailer_return trailer243 =null;


        RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
        RewriteRuleSubtreeStream stream_trailer=new RewriteRuleSubtreeStream(adaptor,"rule trailer");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:343:7: ( atom ( trailer )? -> ^( EXPRESSION atom ( trailer )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:343:9: atom ( trailer )?
            {
            pushFollow(FOLLOW_atom_in_power3107);
            atom242=atom();

            state._fsp--;

            stream_atom.add(atom242.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:343:14: ( trailer )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==LBRACK||LA72_0==LPAREN) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:343:15: trailer
                    {
                    pushFollow(FOLLOW_trailer_in_power3110);
                    trailer243=trailer();

                    state._fsp--;

                    stream_trailer.add(trailer243.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: atom, trailer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:25: -> ^( EXPRESSION atom ( trailer )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:343:28: ^( EXPRESSION atom ( trailer )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPRESSION, "EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_atom.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:343:46: ( trailer )?
                if ( stream_trailer.hasNext() ) {
                    adaptor.addChild(root_1, stream_trailer.nextTree());

                }
                stream_trailer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "power"


    public static class atom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "atom"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:347:1: atom : (ref= LPAREN ( testlist_gexp )? RPAREN -> ^( INNER_BRANCH[$ref] testlist_gexp ) |ref= LBRACK ( listmaker ) -> ^( LISTMAKER_CMD[$ref] ( listmaker )? ) |ref= LCURLY ( dictmaker ) -> ^( DICTMAKER_CMD[$ref] ( dictmaker )? ) | BACKQUOTE ! testlist BACKQUOTE !|id1= NAME -> ^( VARIABLE_CMD[$id1] $id1) |id1= DOTTED_NAME -> ^( CLASSVARIABLE_CMD[$id1] $id1) |id1= INT -> ^( VALUETYPE[$id1] INT_TYPE $id1) |id1= LONGINT -> ^( VALUETYPE[$id1] LONG_TYPE $id1) |id1= FLOAT -> ^( VALUETYPE[$id1] DOUBLE_TYPE $id1) |id1= STRING ( PERCENT string_argument )? -> ^( VALUETYPE[$id1] STRING_TYPE $id1 ( string_argument )? ) );
    public final PythonProvenanceParser.atom_return atom() throws RecognitionException {
        PythonProvenanceParser.atom_return retval = new PythonProvenanceParser.atom_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token id1=null;
        Token RPAREN245=null;
        Token BACKQUOTE248=null;
        Token BACKQUOTE250=null;
        Token PERCENT251=null;
        PythonProvenanceParser.testlist_gexp_return testlist_gexp244 =null;

        PythonProvenanceParser.listmaker_return listmaker246 =null;

        PythonProvenanceParser.dictmaker_return dictmaker247 =null;

        PythonProvenanceParser.testlist_return testlist249 =null;

        PythonProvenanceParser.string_argument_return string_argument252 =null;


        Object ref_tree=null;
        Object id1_tree=null;
        Object RPAREN245_tree=null;
        Object BACKQUOTE248_tree=null;
        Object BACKQUOTE250_tree=null;
        Object PERCENT251_tree=null;
        RewriteRuleTokenStream stream_LONGINT=new RewriteRuleTokenStream(adaptor,"token LONGINT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_FLOAT=new RewriteRuleTokenStream(adaptor,"token FLOAT");
        RewriteRuleTokenStream stream_INT=new RewriteRuleTokenStream(adaptor,"token INT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_DOTTED_NAME=new RewriteRuleTokenStream(adaptor,"token DOTTED_NAME");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleSubtreeStream stream_string_argument=new RewriteRuleSubtreeStream(adaptor,"rule string_argument");
        RewriteRuleSubtreeStream stream_testlist_gexp=new RewriteRuleSubtreeStream(adaptor,"rule testlist_gexp");
        RewriteRuleSubtreeStream stream_dictmaker=new RewriteRuleSubtreeStream(adaptor,"rule dictmaker");
        RewriteRuleSubtreeStream stream_listmaker=new RewriteRuleSubtreeStream(adaptor,"rule listmaker");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:347:6: (ref= LPAREN ( testlist_gexp )? RPAREN -> ^( INNER_BRANCH[$ref] testlist_gexp ) |ref= LBRACK ( listmaker ) -> ^( LISTMAKER_CMD[$ref] ( listmaker )? ) |ref= LCURLY ( dictmaker ) -> ^( DICTMAKER_CMD[$ref] ( dictmaker )? ) | BACKQUOTE ! testlist BACKQUOTE !|id1= NAME -> ^( VARIABLE_CMD[$id1] $id1) |id1= DOTTED_NAME -> ^( CLASSVARIABLE_CMD[$id1] $id1) |id1= INT -> ^( VALUETYPE[$id1] INT_TYPE $id1) |id1= LONGINT -> ^( VALUETYPE[$id1] LONG_TYPE $id1) |id1= FLOAT -> ^( VALUETYPE[$id1] DOUBLE_TYPE $id1) |id1= STRING ( PERCENT string_argument )? -> ^( VALUETYPE[$id1] STRING_TYPE $id1 ( string_argument )? ) )
            int alt75=10;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt75=1;
                }
                break;
            case LBRACK:
                {
                alt75=2;
                }
                break;
            case LCURLY:
                {
                alt75=3;
                }
                break;
            case BACKQUOTE:
                {
                alt75=4;
                }
                break;
            case NAME:
                {
                alt75=5;
                }
                break;
            case DOTTED_NAME:
                {
                alt75=6;
                }
                break;
            case INT:
                {
                alt75=7;
                }
                break;
            case LONGINT:
                {
                alt75=8;
                }
                break;
            case FLOAT:
                {
                alt75=9;
                }
                break;
            case STRING:
                {
                alt75=10;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }

            switch (alt75) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:347:8: ref= LPAREN ( testlist_gexp )? RPAREN
                    {
                    ref=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atom3137);  
                    stream_LPAREN.add(ref);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:348:8: ( testlist_gexp )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==BACKQUOTE||LA73_0==DOTTED_NAME||LA73_0==FLOAT||LA73_0==INT||(LA73_0 >= LBRACK && LA73_0 <= LCURLY)||LA73_0==LONGINT||(LA73_0 >= LPAREN && LA73_0 <= MINUS)||LA73_0==NAME||LA73_0==NOT||LA73_0==PLUS||LA73_0==STRING||LA73_0==TILDE) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:349:8: testlist_gexp
                            {
                            pushFollow(FOLLOW_testlist_gexp_in_atom3156);
                            testlist_gexp244=testlist_gexp();

                            state._fsp--;

                            stream_testlist_gexp.add(testlist_gexp244.getTree());

                            }
                            break;

                    }


                    RPAREN245=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atom3176);  
                    stream_RPAREN.add(RPAREN245);


                    // AST REWRITE
                    // elements: testlist_gexp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 351:15: -> ^( INNER_BRANCH[$ref] testlist_gexp )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:351:18: ^( INNER_BRANCH[$ref] testlist_gexp )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(INNER_BRANCH, ref)
                        , root_1);

                        adaptor.addChild(root_1, stream_testlist_gexp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:352:8: ref= LBRACK ( listmaker )
                    {
                    ref=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_atom3196);  
                    stream_LBRACK.add(ref);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:352:19: ( listmaker )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:352:20: listmaker
                    {
                    pushFollow(FOLLOW_listmaker_in_atom3199);
                    listmaker246=listmaker();

                    state._fsp--;

                    stream_listmaker.add(listmaker246.getTree());

                    }


                    // AST REWRITE
                    // elements: listmaker
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 352:32: -> ^( LISTMAKER_CMD[$ref] ( listmaker )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:352:35: ^( LISTMAKER_CMD[$ref] ( listmaker )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(LISTMAKER_CMD, ref)
                        , root_1);

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:352:57: ( listmaker )?
                        if ( stream_listmaker.hasNext() ) {
                            adaptor.addChild(root_1, stream_listmaker.nextTree());

                        }
                        stream_listmaker.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:353:8: ref= LCURLY ( dictmaker )
                    {
                    ref=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_atom3222);  
                    stream_LCURLY.add(ref);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:353:19: ( dictmaker )
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:353:20: dictmaker
                    {
                    pushFollow(FOLLOW_dictmaker_in_atom3225);
                    dictmaker247=dictmaker();

                    state._fsp--;

                    stream_dictmaker.add(dictmaker247.getTree());

                    }


                    // AST REWRITE
                    // elements: dictmaker
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 353:31: -> ^( DICTMAKER_CMD[$ref] ( dictmaker )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:353:34: ^( DICTMAKER_CMD[$ref] ( dictmaker )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DICTMAKER_CMD, ref)
                        , root_1);

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:353:56: ( dictmaker )?
                        if ( stream_dictmaker.hasNext() ) {
                            adaptor.addChild(root_1, stream_dictmaker.nextTree());

                        }
                        stream_dictmaker.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:354:8: BACKQUOTE ! testlist BACKQUOTE !
                    {
                    root_0 = (Object)adaptor.nil();


                    BACKQUOTE248=(Token)match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom3245); 

                    pushFollow(FOLLOW_testlist_in_atom3248);
                    testlist249=testlist();

                    state._fsp--;

                    adaptor.addChild(root_0, testlist249.getTree());

                    BACKQUOTE250=(Token)match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom3250); 

                    }
                    break;
                case 5 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:355:8: id1= NAME
                    {
                    id1=(Token)match(input,NAME,FOLLOW_NAME_in_atom3262);  
                    stream_NAME.add(id1);


                    // AST REWRITE
                    // elements: id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 355:17: -> ^( VARIABLE_CMD[$id1] $id1)
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:355:20: ^( VARIABLE_CMD[$id1] $id1)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VARIABLE_CMD, id1)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 6 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:356:8: id1= DOTTED_NAME
                    {
                    id1=(Token)match(input,DOTTED_NAME,FOLLOW_DOTTED_NAME_in_atom3283);  
                    stream_DOTTED_NAME.add(id1);


                    // AST REWRITE
                    // elements: id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 356:24: -> ^( CLASSVARIABLE_CMD[$id1] $id1)
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:356:27: ^( CLASSVARIABLE_CMD[$id1] $id1)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CLASSVARIABLE_CMD, id1)
                        , root_1);

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 7 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:357:8: id1= INT
                    {
                    id1=(Token)match(input,INT,FOLLOW_INT_in_atom3304);  
                    stream_INT.add(id1);


                    // AST REWRITE
                    // elements: id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 357:16: -> ^( VALUETYPE[$id1] INT_TYPE $id1)
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:357:19: ^( VALUETYPE[$id1] INT_TYPE $id1)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUETYPE, id1)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(INT_TYPE, "INT_TYPE")
                        );

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 8 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:358:8: id1= LONGINT
                    {
                    id1=(Token)match(input,LONGINT,FOLLOW_LONGINT_in_atom3328);  
                    stream_LONGINT.add(id1);


                    // AST REWRITE
                    // elements: id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 358:20: -> ^( VALUETYPE[$id1] LONG_TYPE $id1)
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:358:23: ^( VALUETYPE[$id1] LONG_TYPE $id1)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUETYPE, id1)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(LONG_TYPE, "LONG_TYPE")
                        );

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 9 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:359:8: id1= FLOAT
                    {
                    id1=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_atom3352);  
                    stream_FLOAT.add(id1);


                    // AST REWRITE
                    // elements: id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 359:18: -> ^( VALUETYPE[$id1] DOUBLE_TYPE $id1)
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:359:21: ^( VALUETYPE[$id1] DOUBLE_TYPE $id1)
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUETYPE, id1)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(DOUBLE_TYPE, "DOUBLE_TYPE")
                        );

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 10 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:360:8: id1= STRING ( PERCENT string_argument )?
                    {
                    id1=(Token)match(input,STRING,FOLLOW_STRING_in_atom3376);  
                    stream_STRING.add(id1);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:360:19: ( PERCENT string_argument )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==PERCENT) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:360:20: PERCENT string_argument
                            {
                            PERCENT251=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_atom3379);  
                            stream_PERCENT.add(PERCENT251);


                            pushFollow(FOLLOW_string_argument_in_atom3381);
                            string_argument252=string_argument();

                            state._fsp--;

                            stream_string_argument.add(string_argument252.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: string_argument, id1
                    // token labels: id1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 360:47: -> ^( VALUETYPE[$id1] STRING_TYPE $id1 ( string_argument )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:360:50: ^( VALUETYPE[$id1] STRING_TYPE $id1 ( string_argument )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUETYPE, id1)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(STRING_TYPE, "STRING_TYPE")
                        );

                        adaptor.addChild(root_1, stream_id1.nextNode());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:360:85: ( string_argument )?
                        if ( stream_string_argument.hasNext() ) {
                            adaptor.addChild(root_1, stream_string_argument.nextTree());

                        }
                        stream_string_argument.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "atom"


    public static class string_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:363:1: string_argument : ( LPAREN !) ( arglist ) ( RPAREN !) ;
    public final PythonProvenanceParser.string_argument_return string_argument() throws RecognitionException {
        PythonProvenanceParser.string_argument_return retval = new PythonProvenanceParser.string_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LPAREN253=null;
        Token RPAREN255=null;
        PythonProvenanceParser.arglist_return arglist254 =null;


        Object LPAREN253_tree=null;
        Object RPAREN255_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:364:3: ( ( LPAREN !) ( arglist ) ( RPAREN !) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:364:5: ( LPAREN !) ( arglist ) ( RPAREN !)
            {
            root_0 = (Object)adaptor.nil();


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:364:5: ( LPAREN !)
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:364:6: LPAREN !
            {
            LPAREN253=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_string_argument3416); 

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:364:15: ( arglist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:364:16: arglist
            {
            pushFollow(FOLLOW_arglist_in_string_argument3421);
            arglist254=arglist();

            state._fsp--;

            adaptor.addChild(root_0, arglist254.getTree());

            }


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:364:25: ( RPAREN !)
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:364:26: RPAREN !
            {
            RPAREN255=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_string_argument3425); 

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_argument"


    public static class listmaker_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "listmaker"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:367:1: listmaker : ( list_arguments ( list_for )? RBRACK -> ^( LISTCOMPREHENSION_CMD list_arguments ( list_for )? ) | RBRACK !);
    public final PythonProvenanceParser.listmaker_return listmaker() throws RecognitionException {
        PythonProvenanceParser.listmaker_return retval = new PythonProvenanceParser.listmaker_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RBRACK258=null;
        Token RBRACK259=null;
        PythonProvenanceParser.list_arguments_return list_arguments256 =null;

        PythonProvenanceParser.list_for_return list_for257 =null;


        Object RBRACK258_tree=null;
        Object RBRACK259_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleSubtreeStream stream_list_for=new RewriteRuleSubtreeStream(adaptor,"rule list_for");
        RewriteRuleSubtreeStream stream_list_arguments=new RewriteRuleSubtreeStream(adaptor,"rule list_arguments");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:367:11: ( list_arguments ( list_for )? RBRACK -> ^( LISTCOMPREHENSION_CMD list_arguments ( list_for )? ) | RBRACK !)
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==BACKQUOTE||LA77_0==DOTTED_NAME||LA77_0==FLOAT||LA77_0==INT||(LA77_0 >= LBRACK && LA77_0 <= LCURLY)||LA77_0==LONGINT||(LA77_0 >= LPAREN && LA77_0 <= MINUS)||LA77_0==NAME||LA77_0==NOT||LA77_0==PLUS||LA77_0==STRING||LA77_0==TILDE) ) {
                alt77=1;
            }
            else if ( (LA77_0==RBRACK) ) {
                alt77=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }
            switch (alt77) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:367:14: list_arguments ( list_for )? RBRACK
                    {
                    pushFollow(FOLLOW_list_arguments_in_listmaker3441);
                    list_arguments256=list_arguments();

                    state._fsp--;

                    stream_list_arguments.add(list_arguments256.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:367:29: ( list_for )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==133) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:367:29: list_for
                            {
                            pushFollow(FOLLOW_list_for_in_listmaker3443);
                            list_for257=list_for();

                            state._fsp--;

                            stream_list_for.add(list_for257.getTree());

                            }
                            break;

                    }


                    RBRACK258=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_listmaker3446);  
                    stream_RBRACK.add(RBRACK258);


                    // AST REWRITE
                    // elements: list_for, list_arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 367:46: -> ^( LISTCOMPREHENSION_CMD list_arguments ( list_for )? )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:367:49: ^( LISTCOMPREHENSION_CMD list_arguments ( list_for )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(LISTCOMPREHENSION_CMD, "LISTCOMPREHENSION_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_list_arguments.nextTree());

                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:367:88: ( list_for )?
                        if ( stream_list_for.hasNext() ) {
                            adaptor.addChild(root_1, stream_list_for.nextTree());

                        }
                        stream_list_for.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:368:6: RBRACK !
                    {
                    root_0 = (Object)adaptor.nil();


                    RBRACK259=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_listmaker3464); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "listmaker"


    public static class list_arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_arguments"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:371:1: list_arguments : list_argument ( COMMA list_argument )* -> ^( LIST_ARGS ( list_argument )+ ) ;
    public final PythonProvenanceParser.list_arguments_return list_arguments() throws RecognitionException {
        PythonProvenanceParser.list_arguments_return retval = new PythonProvenanceParser.list_arguments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA261=null;
        PythonProvenanceParser.list_argument_return list_argument260 =null;

        PythonProvenanceParser.list_argument_return list_argument262 =null;


        Object COMMA261_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_list_argument=new RewriteRuleSubtreeStream(adaptor,"rule list_argument");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:371:15: ( list_argument ( COMMA list_argument )* -> ^( LIST_ARGS ( list_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:371:17: list_argument ( COMMA list_argument )*
            {
            pushFollow(FOLLOW_list_argument_in_list_arguments3481);
            list_argument260=list_argument();

            state._fsp--;

            stream_list_argument.add(list_argument260.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:371:31: ( COMMA list_argument )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:371:32: COMMA list_argument
            	    {
            	    COMMA261=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_arguments3484);  
            	    stream_COMMA.add(COMMA261);


            	    pushFollow(FOLLOW_list_argument_in_list_arguments3486);
            	    list_argument262=list_argument();

            	    state._fsp--;

            	    stream_list_argument.add(list_argument262.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            // AST REWRITE
            // elements: list_argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:54: -> ^( LIST_ARGS ( list_argument )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:371:57: ^( LIST_ARGS ( list_argument )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LIST_ARGS, "LIST_ARGS")
                , root_1);

                if ( !(stream_list_argument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_list_argument.hasNext() ) {
                    adaptor.addChild(root_1, stream_list_argument.nextTree());

                }
                stream_list_argument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_arguments"


    public static class list_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:374:1: list_argument : testlist ;
    public final PythonProvenanceParser.list_argument_return list_argument() throws RecognitionException {
        PythonProvenanceParser.list_argument_return retval = new PythonProvenanceParser.list_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist263 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:375:2: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:375:4: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_list_argument3511);
            testlist263=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist263.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_argument"


    public static class dictmaker_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dictmaker"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:378:1: dictmaker : ( dict_arguments RCURLY -> ^( DICTIONARY_CMD dict_arguments ) | RCURLY !);
    public final PythonProvenanceParser.dictmaker_return dictmaker() throws RecognitionException {
        PythonProvenanceParser.dictmaker_return retval = new PythonProvenanceParser.dictmaker_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RCURLY265=null;
        Token RCURLY266=null;
        PythonProvenanceParser.dict_arguments_return dict_arguments264 =null;


        Object RCURLY265_tree=null;
        Object RCURLY266_tree=null;
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_dict_arguments=new RewriteRuleSubtreeStream(adaptor,"rule dict_arguments");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:378:11: ( dict_arguments RCURLY -> ^( DICTIONARY_CMD dict_arguments ) | RCURLY !)
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==BACKQUOTE||LA79_0==DOTTED_NAME||LA79_0==FLOAT||LA79_0==INT||(LA79_0 >= LBRACK && LA79_0 <= LCURLY)||LA79_0==LONGINT||(LA79_0 >= LPAREN && LA79_0 <= MINUS)||LA79_0==NAME||LA79_0==NOT||LA79_0==PLUS||LA79_0==STRING||LA79_0==TILDE) ) {
                alt79=1;
            }
            else if ( (LA79_0==RCURLY) ) {
                alt79=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:378:13: dict_arguments RCURLY
                    {
                    pushFollow(FOLLOW_dict_arguments_in_dictmaker3522);
                    dict_arguments264=dict_arguments();

                    state._fsp--;

                    stream_dict_arguments.add(dict_arguments264.getTree());

                    RCURLY265=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_dictmaker3525);  
                    stream_RCURLY.add(RCURLY265);


                    // AST REWRITE
                    // elements: dict_arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 378:36: -> ^( DICTIONARY_CMD dict_arguments )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:378:39: ^( DICTIONARY_CMD dict_arguments )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DICTIONARY_CMD, "DICTIONARY_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_dict_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:379:5: RCURLY !
                    {
                    root_0 = (Object)adaptor.nil();


                    RCURLY266=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_dictmaker3539); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dictmaker"


    public static class dict_arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dict_arguments"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:382:1: dict_arguments : dict_argument COLON dict_argument ( options {k=2; } : COMMA dict_argument COLON dict_argument )* ( COMMA )? -> ^( DICT_ARGS ( dict_argument )+ ) ;
    public final PythonProvenanceParser.dict_arguments_return dict_arguments() throws RecognitionException {
        PythonProvenanceParser.dict_arguments_return retval = new PythonProvenanceParser.dict_arguments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON268=null;
        Token COMMA270=null;
        Token COLON272=null;
        Token COMMA274=null;
        PythonProvenanceParser.dict_argument_return dict_argument267 =null;

        PythonProvenanceParser.dict_argument_return dict_argument269 =null;

        PythonProvenanceParser.dict_argument_return dict_argument271 =null;

        PythonProvenanceParser.dict_argument_return dict_argument273 =null;


        Object COLON268_tree=null;
        Object COMMA270_tree=null;
        Object COLON272_tree=null;
        Object COMMA274_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_dict_argument=new RewriteRuleSubtreeStream(adaptor,"rule dict_argument");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:382:15: ( dict_argument COLON dict_argument ( options {k=2; } : COMMA dict_argument COLON dict_argument )* ( COMMA )? -> ^( DICT_ARGS ( dict_argument )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:382:17: dict_argument COLON dict_argument ( options {k=2; } : COMMA dict_argument COLON dict_argument )* ( COMMA )?
            {
            pushFollow(FOLLOW_dict_argument_in_dict_arguments3568);
            dict_argument267=dict_argument();

            state._fsp--;

            stream_dict_argument.add(dict_argument267.getTree());

            COLON268=(Token)match(input,COLON,FOLLOW_COLON_in_dict_arguments3570);  
            stream_COLON.add(COLON268);


            pushFollow(FOLLOW_dict_argument_in_dict_arguments3572);
            dict_argument269=dict_argument();

            state._fsp--;

            stream_dict_argument.add(dict_argument269.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:382:51: ( options {k=2; } : COMMA dict_argument COLON dict_argument )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==COMMA) ) {
                    int LA80_1 = input.LA(2);

                    if ( (LA80_1==BACKQUOTE||LA80_1==DOTTED_NAME||LA80_1==FLOAT||LA80_1==INT||(LA80_1 >= LBRACK && LA80_1 <= LCURLY)||LA80_1==LONGINT||(LA80_1 >= LPAREN && LA80_1 <= MINUS)||LA80_1==NAME||LA80_1==NOT||LA80_1==PLUS||LA80_1==STRING||LA80_1==TILDE) ) {
                        alt80=1;
                    }


                }


                switch (alt80) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:382:67: COMMA dict_argument COLON dict_argument
            	    {
            	    COMMA270=(Token)match(input,COMMA,FOLLOW_COMMA_in_dict_arguments3582);  
            	    stream_COMMA.add(COMMA270);


            	    pushFollow(FOLLOW_dict_argument_in_dict_arguments3584);
            	    dict_argument271=dict_argument();

            	    state._fsp--;

            	    stream_dict_argument.add(dict_argument271.getTree());

            	    COLON272=(Token)match(input,COLON,FOLLOW_COLON_in_dict_arguments3586);  
            	    stream_COLON.add(COLON272);


            	    pushFollow(FOLLOW_dict_argument_in_dict_arguments3588);
            	    dict_argument273=dict_argument();

            	    state._fsp--;

            	    stream_dict_argument.add(dict_argument273.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:382:109: ( COMMA )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==COMMA) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:382:110: COMMA
                    {
                    COMMA274=(Token)match(input,COMMA,FOLLOW_COMMA_in_dict_arguments3593);  
                    stream_COMMA.add(COMMA274);


                    }
                    break;

            }


            // AST REWRITE
            // elements: dict_argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:118: -> ^( DICT_ARGS ( dict_argument )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:382:121: ^( DICT_ARGS ( dict_argument )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DICT_ARGS, "DICT_ARGS")
                , root_1);

                if ( !(stream_dict_argument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dict_argument.hasNext() ) {
                    adaptor.addChild(root_1, stream_dict_argument.nextTree());

                }
                stream_dict_argument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dict_arguments"


    public static class dict_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dict_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:385:1: dict_argument : testlist ;
    public final PythonProvenanceParser.dict_argument_return dict_argument() throws RecognitionException {
        PythonProvenanceParser.dict_argument_return retval = new PythonProvenanceParser.dict_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist275 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:386:2: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:386:4: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_dict_argument3634);
            testlist275=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist275.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dict_argument"


    public static class testlist_gexp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "testlist_gexp"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:388:1: testlist_gexp : test ( ( options {k=2; } : COMMA ! test )* ( COMMA !)? | gen_for ) ;
    public final PythonProvenanceParser.testlist_gexp_return testlist_gexp() throws RecognitionException {
        PythonProvenanceParser.testlist_gexp_return retval = new PythonProvenanceParser.testlist_gexp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA277=null;
        Token COMMA279=null;
        PythonProvenanceParser.test_return test276 =null;

        PythonProvenanceParser.test_return test278 =null;

        PythonProvenanceParser.gen_for_return gen_for280 =null;


        Object COMMA277_tree=null;
        Object COMMA279_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:389:5: ( test ( ( options {k=2; } : COMMA ! test )* ( COMMA !)? | gen_for ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:389:7: test ( ( options {k=2; } : COMMA ! test )* ( COMMA !)? | gen_for )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_test_in_testlist_gexp3647);
            test276=test();

            state._fsp--;

            adaptor.addChild(root_0, test276.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:389:12: ( ( options {k=2; } : COMMA ! test )* ( COMMA !)? | gen_for )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==COMMA||LA84_0==RPAREN) ) {
                alt84=1;
            }
            else if ( (LA84_0==133) ) {
                alt84=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }
            switch (alt84) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:389:14: ( options {k=2; } : COMMA ! test )* ( COMMA !)?
                    {
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:389:14: ( options {k=2; } : COMMA ! test )*
                    loop82:
                    do {
                        int alt82=2;
                        int LA82_0 = input.LA(1);

                        if ( (LA82_0==COMMA) ) {
                            int LA82_1 = input.LA(2);

                            if ( (LA82_1==BACKQUOTE||LA82_1==DOTTED_NAME||LA82_1==FLOAT||LA82_1==INT||(LA82_1 >= LBRACK && LA82_1 <= LCURLY)||LA82_1==LONGINT||(LA82_1 >= LPAREN && LA82_1 <= MINUS)||LA82_1==NAME||LA82_1==NOT||LA82_1==PLUS||LA82_1==STRING||LA82_1==TILDE) ) {
                                alt82=1;
                            }


                        }


                        switch (alt82) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:389:31: COMMA ! test
                    	    {
                    	    COMMA277=(Token)match(input,COMMA,FOLLOW_COMMA_in_testlist_gexp3660); 

                    	    pushFollow(FOLLOW_test_in_testlist_gexp3663);
                    	    test278=test();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, test278.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop82;
                        }
                    } while (true);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:389:45: ( COMMA !)?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==COMMA) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:389:46: COMMA !
                            {
                            COMMA279=(Token)match(input,COMMA,FOLLOW_COMMA_in_testlist_gexp3668); 

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:390:14: gen_for
                    {
                    pushFollow(FOLLOW_gen_for_in_testlist_gexp3687);
                    gen_for280=gen_for();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_for280.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "testlist_gexp"


    public static class trailer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trailer"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:394:1: trailer : ( LPAREN ! inner_trailer | LBRACK ! subscriptlist RBRACK !);
    public final PythonProvenanceParser.trailer_return trailer() throws RecognitionException {
        PythonProvenanceParser.trailer_return retval = new PythonProvenanceParser.trailer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LPAREN281=null;
        Token LBRACK283=null;
        Token RBRACK285=null;
        PythonProvenanceParser.inner_trailer_return inner_trailer282 =null;

        PythonProvenanceParser.subscriptlist_return subscriptlist284 =null;


        Object LPAREN281_tree=null;
        Object LBRACK283_tree=null;
        Object RBRACK285_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:394:9: ( LPAREN ! inner_trailer | LBRACK ! subscriptlist RBRACK !)
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==LPAREN) ) {
                alt85=1;
            }
            else if ( (LA85_0==LBRACK) ) {
                alt85=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:394:11: LPAREN ! inner_trailer
                    {
                    root_0 = (Object)adaptor.nil();


                    LPAREN281=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_trailer3725); 

                    pushFollow(FOLLOW_inner_trailer_in_trailer3728);
                    inner_trailer282=inner_trailer();

                    state._fsp--;

                    adaptor.addChild(root_0, inner_trailer282.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:395:4: LBRACK ! subscriptlist RBRACK !
                    {
                    root_0 = (Object)adaptor.nil();


                    LBRACK283=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_trailer3733); 

                    pushFollow(FOLLOW_subscriptlist_in_trailer3736);
                    subscriptlist284=subscriptlist();

                    state._fsp--;

                    adaptor.addChild(root_0, subscriptlist284.getTree());

                    RBRACK285=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_trailer3738); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trailer"


    public static class inner_trailer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inner_trailer"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:398:1: inner_trailer : ( arglist RPAREN -> ^( TRAILER arglist ) | RPAREN -> ^( TRAILER NO_ARGS ) );
    public final PythonProvenanceParser.inner_trailer_return inner_trailer() throws RecognitionException {
        PythonProvenanceParser.inner_trailer_return retval = new PythonProvenanceParser.inner_trailer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RPAREN287=null;
        Token RPAREN288=null;
        PythonProvenanceParser.arglist_return arglist286 =null;


        Object RPAREN287_tree=null;
        Object RPAREN288_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_arglist=new RewriteRuleSubtreeStream(adaptor,"rule arglist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:399:2: ( arglist RPAREN -> ^( TRAILER arglist ) | RPAREN -> ^( TRAILER NO_ARGS ) )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==BACKQUOTE||LA86_0==DOTTED_NAME||LA86_0==DOUBLESTAR||LA86_0==FLOAT||LA86_0==INT||(LA86_0 >= LBRACK && LA86_0 <= LCURLY)||LA86_0==LONGINT||(LA86_0 >= LPAREN && LA86_0 <= MINUS)||LA86_0==NAME||LA86_0==NOT||LA86_0==PLUS||LA86_0==STAR||LA86_0==STRING||LA86_0==TILDE) ) {
                alt86=1;
            }
            else if ( (LA86_0==RPAREN) ) {
                alt86=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }
            switch (alt86) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:399:4: arglist RPAREN
                    {
                    pushFollow(FOLLOW_arglist_in_inner_trailer3751);
                    arglist286=arglist();

                    state._fsp--;

                    stream_arglist.add(arglist286.getTree());

                    RPAREN287=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_inner_trailer3753);  
                    stream_RPAREN.add(RPAREN287);


                    // AST REWRITE
                    // elements: arglist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 399:19: -> ^( TRAILER arglist )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:399:22: ^( TRAILER arglist )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TRAILER, "TRAILER")
                        , root_1);

                        adaptor.addChild(root_1, stream_arglist.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:400:4: RPAREN
                    {
                    RPAREN288=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_inner_trailer3767);  
                    stream_RPAREN.add(RPAREN288);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 400:11: -> ^( TRAILER NO_ARGS )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:400:14: ^( TRAILER NO_ARGS )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TRAILER, "TRAILER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(NO_ARGS, "NO_ARGS")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inner_trailer"


    public static class subscriptlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subscriptlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:409:1: subscriptlist : subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )? -> ^( SUBSCRIPTS ( subscript )+ ) ;
    public final PythonProvenanceParser.subscriptlist_return subscriptlist() throws RecognitionException {
        PythonProvenanceParser.subscriptlist_return retval = new PythonProvenanceParser.subscriptlist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA290=null;
        Token COMMA292=null;
        PythonProvenanceParser.subscript_return subscript289 =null;

        PythonProvenanceParser.subscript_return subscript291 =null;


        Object COMMA290_tree=null;
        Object COMMA292_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_subscript=new RewriteRuleSubtreeStream(adaptor,"rule subscript");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:409:15: ( subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )? -> ^( SUBSCRIPTS ( subscript )+ ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:409:17: subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )?
            {
            pushFollow(FOLLOW_subscript_in_subscriptlist3796);
            subscript289=subscript();

            state._fsp--;

            stream_subscript.add(subscript289.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:409:27: ( options {greedy=true; } : COMMA subscript )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==COMMA) ) {
                    int LA87_1 = input.LA(2);

                    if ( (LA87_1==BACKQUOTE||LA87_1==DOTTED_NAME||LA87_1==FLOAT||LA87_1==INT||(LA87_1 >= LBRACK && LA87_1 <= LCURLY)||LA87_1==LONGINT||(LA87_1 >= LPAREN && LA87_1 <= MINUS)||LA87_1==NAME||LA87_1==NOT||LA87_1==PLUS||LA87_1==STRING||LA87_1==TILDE) ) {
                        alt87=1;
                    }


                }


                switch (alt87) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:409:51: COMMA subscript
            	    {
            	    COMMA290=(Token)match(input,COMMA,FOLLOW_COMMA_in_subscriptlist3806);  
            	    stream_COMMA.add(COMMA290);


            	    pushFollow(FOLLOW_subscript_in_subscriptlist3808);
            	    subscript291=subscript();

            	    state._fsp--;

            	    stream_subscript.add(subscript291.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:409:69: ( COMMA )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==COMMA) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:409:70: COMMA
                    {
                    COMMA292=(Token)match(input,COMMA,FOLLOW_COMMA_in_subscriptlist3813);  
                    stream_COMMA.add(COMMA292);


                    }
                    break;

            }


            // AST REWRITE
            // elements: subscript
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:78: -> ^( SUBSCRIPTS ( subscript )+ )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:409:81: ^( SUBSCRIPTS ( subscript )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUBSCRIPTS, "SUBSCRIPTS")
                , root_1);

                if ( !(stream_subscript.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_subscript.hasNext() ) {
                    adaptor.addChild(root_1, stream_subscript.nextTree());

                }
                stream_subscript.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subscriptlist"


    public static class subscript_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subscript"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:412:1: subscript : test ;
    public final PythonProvenanceParser.subscript_return subscript() throws RecognitionException {
        PythonProvenanceParser.subscript_return retval = new PythonProvenanceParser.subscript_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.test_return test293 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:412:11: ( test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:413:11: test
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_test_in_subscript3858);
            test293=test();

            state._fsp--;

            adaptor.addChild(root_0, test293.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subscript"


    public static class exprlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:416:1: exprlist : expr ( options {k=2; } : COMMA ! expr )* ( COMMA !)? ;
    public final PythonProvenanceParser.exprlist_return exprlist() throws RecognitionException {
        PythonProvenanceParser.exprlist_return retval = new PythonProvenanceParser.exprlist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA295=null;
        Token COMMA297=null;
        PythonProvenanceParser.expr_return expr294 =null;

        PythonProvenanceParser.expr_return expr296 =null;


        Object COMMA295_tree=null;
        Object COMMA297_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:416:10: ( expr ( options {k=2; } : COMMA ! expr )* ( COMMA !)? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:416:12: expr ( options {k=2; } : COMMA ! expr )* ( COMMA !)?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_exprlist3877);
            expr294=expr();

            state._fsp--;

            adaptor.addChild(root_0, expr294.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:416:17: ( options {k=2; } : COMMA ! expr )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==COMMA) ) {
                    int LA89_1 = input.LA(2);

                    if ( (LA89_1==BACKQUOTE||LA89_1==DOTTED_NAME||LA89_1==FLOAT||LA89_1==INT||(LA89_1 >= LBRACK && LA89_1 <= LCURLY)||LA89_1==LONGINT||(LA89_1 >= LPAREN && LA89_1 <= MINUS)||LA89_1==NAME||LA89_1==PLUS||LA89_1==STRING||LA89_1==TILDE) ) {
                        alt89=1;
                    }


                }


                switch (alt89) {
            	case 1 :
            	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:416:34: COMMA ! expr
            	    {
            	    COMMA295=(Token)match(input,COMMA,FOLLOW_COMMA_in_exprlist3888); 

            	    pushFollow(FOLLOW_expr_in_exprlist3891);
            	    expr296=expr();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expr296.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:416:48: ( COMMA !)?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==COMMA) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:416:49: COMMA !
                    {
                    COMMA297=(Token)match(input,COMMA,FOLLOW_COMMA_in_exprlist3896); 

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprlist"


    public static class testlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "testlist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:419:1: testlist : test ;
    public final PythonProvenanceParser.testlist_return testlist() throws RecognitionException {
        PythonProvenanceParser.testlist_return retval = new PythonProvenanceParser.testlist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.test_return test298 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:420:5: ( test )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:420:7: test
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_test_in_testlist3921);
            test298=test();

            state._fsp--;

            adaptor.addChild(root_0, test298.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "testlist"


    public static class classdef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classdef"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:1: classdef : ref= 'class' id1= NAME ( LPAREN ( testlist )? RPAREN )? COLON suite -> ^( CLASS_CMD[$ref] $id1 suite ( testlist )? ) ;
    public final PythonProvenanceParser.classdef_return classdef() throws RecognitionException {
        PythonProvenanceParser.classdef_return retval = new PythonProvenanceParser.classdef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ref=null;
        Token id1=null;
        Token LPAREN299=null;
        Token RPAREN301=null;
        Token COLON302=null;
        PythonProvenanceParser.testlist_return testlist300 =null;

        PythonProvenanceParser.suite_return suite303 =null;


        Object ref_tree=null;
        Object id1_tree=null;
        Object LPAREN299_tree=null;
        Object RPAREN301_tree=null;
        Object COLON302_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:9: (ref= 'class' id1= NAME ( LPAREN ( testlist )? RPAREN )? COLON suite -> ^( CLASS_CMD[$ref] $id1 suite ( testlist )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:11: ref= 'class' id1= NAME ( LPAREN ( testlist )? RPAREN )? COLON suite
            {
            ref=(Token)match(input,124,FOLLOW_124_in_classdef3935);  
            stream_124.add(ref);


            id1=(Token)match(input,NAME,FOLLOW_NAME_in_classdef3939);  
            stream_NAME.add(id1);


            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:32: ( LPAREN ( testlist )? RPAREN )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==LPAREN) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:33: LPAREN ( testlist )? RPAREN
                    {
                    LPAREN299=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_classdef3942);  
                    stream_LPAREN.add(LPAREN299);


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:40: ( testlist )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==BACKQUOTE||LA91_0==DOTTED_NAME||LA91_0==FLOAT||LA91_0==INT||(LA91_0 >= LBRACK && LA91_0 <= LCURLY)||LA91_0==LONGINT||(LA91_0 >= LPAREN && LA91_0 <= MINUS)||LA91_0==NAME||LA91_0==NOT||LA91_0==PLUS||LA91_0==STRING||LA91_0==TILDE) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:40: testlist
                            {
                            pushFollow(FOLLOW_testlist_in_classdef3944);
                            testlist300=testlist();

                            state._fsp--;

                            stream_testlist.add(testlist300.getTree());

                            }
                            break;

                    }


                    RPAREN301=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_classdef3947);  
                    stream_RPAREN.add(RPAREN301);


                    }
                    break;

            }


            COLON302=(Token)match(input,COLON,FOLLOW_COLON_in_classdef3951);  
            stream_COLON.add(COLON302);


            pushFollow(FOLLOW_suite_in_classdef3953);
            suite303=suite();

            state._fsp--;

            stream_suite.add(suite303.getTree());

            // AST REWRITE
            // elements: id1, testlist, suite
            // token labels: id1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:71: -> ^( CLASS_CMD[$ref] $id1 suite ( testlist )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:74: ^( CLASS_CMD[$ref] $id1 suite ( testlist )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_CMD, ref)
                , root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());

                adaptor.addChild(root_1, stream_suite.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:423:103: ( testlist )?
                if ( stream_testlist.hasNext() ) {
                    adaptor.addChild(root_1, stream_testlist.nextTree());

                }
                stream_testlist.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classdef"


    public static class arglist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arglist"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:1: arglist : ( argument ( ASSIGN sub_argument )? ( COMMA argument ( ASSIGN sub_argument )? )* -> ^( ARGUMENTS ( argument )+ ) | STAR test ( COMMA DOUBLESTAR test )? | DOUBLESTAR test );
    public final PythonProvenanceParser.arglist_return arglist() throws RecognitionException {
        PythonProvenanceParser.arglist_return retval = new PythonProvenanceParser.arglist_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSIGN305=null;
        Token COMMA307=null;
        Token ASSIGN309=null;
        Token STAR311=null;
        Token COMMA313=null;
        Token DOUBLESTAR314=null;
        Token DOUBLESTAR316=null;
        PythonProvenanceParser.argument_return argument304 =null;

        PythonProvenanceParser.sub_argument_return sub_argument306 =null;

        PythonProvenanceParser.argument_return argument308 =null;

        PythonProvenanceParser.sub_argument_return sub_argument310 =null;

        PythonProvenanceParser.test_return test312 =null;

        PythonProvenanceParser.test_return test315 =null;

        PythonProvenanceParser.test_return test317 =null;


        Object ASSIGN305_tree=null;
        Object COMMA307_tree=null;
        Object ASSIGN309_tree=null;
        Object STAR311_tree=null;
        Object COMMA313_tree=null;
        Object DOUBLESTAR314_tree=null;
        Object DOUBLESTAR316_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_argument=new RewriteRuleSubtreeStream(adaptor,"rule argument");
        RewriteRuleSubtreeStream stream_sub_argument=new RewriteRuleSubtreeStream(adaptor,"rule sub_argument");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:9: ( argument ( ASSIGN sub_argument )? ( COMMA argument ( ASSIGN sub_argument )? )* -> ^( ARGUMENTS ( argument )+ ) | STAR test ( COMMA DOUBLESTAR test )? | DOUBLESTAR test )
            int alt97=3;
            switch ( input.LA(1) ) {
            case BACKQUOTE:
            case DOTTED_NAME:
            case FLOAT:
            case INT:
            case LBRACK:
            case LCURLY:
            case LONGINT:
            case LPAREN:
            case MINUS:
            case NAME:
            case NOT:
            case PLUS:
            case STRING:
            case TILDE:
                {
                alt97=1;
                }
                break;
            case STAR:
                {
                alt97=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt97=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }

            switch (alt97) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:11: argument ( ASSIGN sub_argument )? ( COMMA argument ( ASSIGN sub_argument )? )*
                    {
                    pushFollow(FOLLOW_argument_in_arglist3985);
                    argument304=argument();

                    state._fsp--;

                    stream_argument.add(argument304.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:20: ( ASSIGN sub_argument )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==ASSIGN) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:21: ASSIGN sub_argument
                            {
                            ASSIGN305=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arglist3988);  
                            stream_ASSIGN.add(ASSIGN305);


                            pushFollow(FOLLOW_sub_argument_in_arglist3990);
                            sub_argument306=sub_argument();

                            state._fsp--;

                            stream_sub_argument.add(sub_argument306.getTree());

                            }
                            break;

                    }


                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:43: ( COMMA argument ( ASSIGN sub_argument )? )*
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);

                        if ( (LA95_0==COMMA) ) {
                            alt95=1;
                        }


                        switch (alt95) {
                    	case 1 :
                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:44: COMMA argument ( ASSIGN sub_argument )?
                    	    {
                    	    COMMA307=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist3995);  
                    	    stream_COMMA.add(COMMA307);


                    	    pushFollow(FOLLOW_argument_in_arglist3997);
                    	    argument308=argument();

                    	    state._fsp--;

                    	    stream_argument.add(argument308.getTree());

                    	    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:59: ( ASSIGN sub_argument )?
                    	    int alt94=2;
                    	    int LA94_0 = input.LA(1);

                    	    if ( (LA94_0==ASSIGN) ) {
                    	        alt94=1;
                    	    }
                    	    switch (alt94) {
                    	        case 1 :
                    	            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:60: ASSIGN sub_argument
                    	            {
                    	            ASSIGN309=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arglist4000);  
                    	            stream_ASSIGN.add(ASSIGN309);


                    	            pushFollow(FOLLOW_sub_argument_in_arglist4002);
                    	            sub_argument310=sub_argument();

                    	            state._fsp--;

                    	            stream_sub_argument.add(sub_argument310.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop95;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: argument
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 426:84: -> ^( ARGUMENTS ( argument )+ )
                    {
                        // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:426:87: ^( ARGUMENTS ( argument )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARGUMENTS, "ARGUMENTS")
                        , root_1);

                        if ( !(stream_argument.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_argument.hasNext() ) {
                            adaptor.addChild(root_1, stream_argument.nextTree());

                        }
                        stream_argument.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:427:13: STAR test ( COMMA DOUBLESTAR test )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR311=(Token)match(input,STAR,FOLLOW_STAR_in_arglist4029); 
                    STAR311_tree = 
                    (Object)adaptor.create(STAR311)
                    ;
                    adaptor.addChild(root_0, STAR311_tree);


                    pushFollow(FOLLOW_test_in_arglist4031);
                    test312=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test312.getTree());

                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:427:23: ( COMMA DOUBLESTAR test )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==COMMA) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:427:24: COMMA DOUBLESTAR test
                            {
                            COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist4034); 
                            COMMA313_tree = 
                            (Object)adaptor.create(COMMA313)
                            ;
                            adaptor.addChild(root_0, COMMA313_tree);


                            DOUBLESTAR314=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist4036); 
                            DOUBLESTAR314_tree = 
                            (Object)adaptor.create(DOUBLESTAR314)
                            ;
                            adaptor.addChild(root_0, DOUBLESTAR314_tree);


                            pushFollow(FOLLOW_test_in_arglist4038);
                            test315=test();

                            state._fsp--;

                            adaptor.addChild(root_0, test315.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:428:13: DOUBLESTAR test
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLESTAR316=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist4054); 
                    DOUBLESTAR316_tree = 
                    (Object)adaptor.create(DOUBLESTAR316)
                    ;
                    adaptor.addChild(root_0, DOUBLESTAR316_tree);


                    pushFollow(FOLLOW_test_in_arglist4056);
                    test317=test();

                    state._fsp--;

                    adaptor.addChild(root_0, test317.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arglist"


    public static class print_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "print_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:431:1: print_argument : testlist ;
    public final PythonProvenanceParser.print_argument_return print_argument() throws RecognitionException {
        PythonProvenanceParser.print_argument_return retval = new PythonProvenanceParser.print_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist318 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:432:2: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:432:4: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_print_argument4074);
            testlist318=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist318.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "print_argument"


    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:435:1: argument : testlist ;
    public final PythonProvenanceParser.argument_return argument() throws RecognitionException {
        PythonProvenanceParser.argument_return retval = new PythonProvenanceParser.argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist319 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:435:10: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:435:12: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_argument4085);
            testlist319=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist319.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "argument"


    public static class sub_argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sub_argument"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:438:1: sub_argument : testlist ;
    public final PythonProvenanceParser.sub_argument_return sub_argument() throws RecognitionException {
        PythonProvenanceParser.sub_argument_return retval = new PythonProvenanceParser.sub_argument_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.testlist_return testlist320 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:439:2: ( testlist )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:439:4: testlist
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_testlist_in_sub_argument4114);
            testlist320=testlist();

            state._fsp--;

            adaptor.addChild(root_0, testlist320.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sub_argument"


    public static class list_iter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_iter"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:442:1: list_iter : ( list_for | list_if );
    public final PythonProvenanceParser.list_iter_return list_iter() throws RecognitionException {
        PythonProvenanceParser.list_iter_return retval = new PythonProvenanceParser.list_iter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.list_for_return list_for321 =null;

        PythonProvenanceParser.list_if_return list_if322 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:442:11: ( list_for | list_if )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==133) ) {
                alt98=1;
            }
            else if ( (LA98_0==IF) ) {
                alt98=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }
            switch (alt98) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:442:13: list_for
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_list_for_in_list_iter4124);
                    list_for321=list_for();

                    state._fsp--;

                    adaptor.addChild(root_0, list_for321.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:443:13: list_if
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_list_if_in_list_iter4138);
                    list_if322=list_if();

                    state._fsp--;

                    adaptor.addChild(root_0, list_if322.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_iter"


    public static class list_for_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_for"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:446:1: list_for : 'for' exprlist 'in' testlist ( list_iter )? -> ^( LISTLOOPCONTROL_CMD exprlist testlist ( list_iter )? ) ;
    public final PythonProvenanceParser.list_for_return list_for() throws RecognitionException {
        PythonProvenanceParser.list_for_return retval = new PythonProvenanceParser.list_for_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal323=null;
        Token string_literal325=null;
        PythonProvenanceParser.exprlist_return exprlist324 =null;

        PythonProvenanceParser.testlist_return testlist326 =null;

        PythonProvenanceParser.list_iter_return list_iter327 =null;


        Object string_literal323_tree=null;
        Object string_literal325_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleSubtreeStream stream_list_iter=new RewriteRuleSubtreeStream(adaptor,"rule list_iter");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:446:10: ( 'for' exprlist 'in' testlist ( list_iter )? -> ^( LISTLOOPCONTROL_CMD exprlist testlist ( list_iter )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:446:12: 'for' exprlist 'in' testlist ( list_iter )?
            {
            string_literal323=(Token)match(input,133,FOLLOW_133_in_list_for4157);  
            stream_133.add(string_literal323);


            pushFollow(FOLLOW_exprlist_in_list_for4159);
            exprlist324=exprlist();

            state._fsp--;

            stream_exprlist.add(exprlist324.getTree());

            string_literal325=(Token)match(input,IN,FOLLOW_IN_in_list_for4161);  
            stream_IN.add(string_literal325);


            pushFollow(FOLLOW_testlist_in_list_for4163);
            testlist326=testlist();

            state._fsp--;

            stream_testlist.add(testlist326.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:446:41: ( list_iter )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==IF||LA99_0==133) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:446:42: list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_for4166);
                    list_iter327=list_iter();

                    state._fsp--;

                    stream_list_iter.add(list_iter327.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: list_iter, testlist, exprlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:54: -> ^( LISTLOOPCONTROL_CMD exprlist testlist ( list_iter )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:446:57: ^( LISTLOOPCONTROL_CMD exprlist testlist ( list_iter )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LISTLOOPCONTROL_CMD, "LISTLOOPCONTROL_CMD")
                , root_1);

                adaptor.addChild(root_1, stream_exprlist.nextTree());

                adaptor.addChild(root_1, stream_testlist.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:446:97: ( list_iter )?
                if ( stream_list_iter.hasNext() ) {
                    adaptor.addChild(root_1, stream_list_iter.nextTree());

                }
                stream_list_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_for"


    public static class list_if_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "list_if"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:449:1: list_if : 'if' test ( list_iter )? -> ^( LISTCONDITION_CMD test ( list_iter )? ) ;
    public final PythonProvenanceParser.list_if_return list_if() throws RecognitionException {
        PythonProvenanceParser.list_if_return retval = new PythonProvenanceParser.list_if_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal328=null;
        PythonProvenanceParser.test_return test329 =null;

        PythonProvenanceParser.list_iter_return list_iter330 =null;


        Object string_literal328_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_list_iter=new RewriteRuleSubtreeStream(adaptor,"rule list_iter");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:449:9: ( 'if' test ( list_iter )? -> ^( LISTCONDITION_CMD test ( list_iter )? ) )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:449:11: 'if' test ( list_iter )?
            {
            string_literal328=(Token)match(input,IF,FOLLOW_IF_in_list_if4199);  
            stream_IF.add(string_literal328);


            pushFollow(FOLLOW_test_in_list_if4201);
            test329=test();

            state._fsp--;

            stream_test.add(test329.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:449:21: ( list_iter )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IF||LA100_0==133) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:449:22: list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_if4204);
                    list_iter330=list_iter();

                    state._fsp--;

                    stream_list_iter.add(list_iter330.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: test, list_iter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:34: -> ^( LISTCONDITION_CMD test ( list_iter )? )
            {
                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:449:37: ^( LISTCONDITION_CMD test ( list_iter )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LISTCONDITION_CMD, "LISTCONDITION_CMD")
                , root_1);

                adaptor.addChild(root_1, stream_test.nextTree());

                // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:449:62: ( list_iter )?
                if ( stream_list_iter.hasNext() ) {
                    adaptor.addChild(root_1, stream_list_iter.nextTree());

                }
                stream_list_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "list_if"


    public static class gen_iter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "gen_iter"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:452:1: gen_iter : ( gen_for | gen_if );
    public final PythonProvenanceParser.gen_iter_return gen_iter() throws RecognitionException {
        PythonProvenanceParser.gen_iter_return retval = new PythonProvenanceParser.gen_iter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PythonProvenanceParser.gen_for_return gen_for331 =null;

        PythonProvenanceParser.gen_if_return gen_if332 =null;



        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:452:9: ( gen_for | gen_if )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==133) ) {
                alt101=1;
            }
            else if ( (LA101_0==IF) ) {
                alt101=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:452:11: gen_for
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_gen_for_in_gen_iter4233);
                    gen_for331=gen_for();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_for331.getTree());

                    }
                    break;
                case 2 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:453:11: gen_if
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_gen_if_in_gen_iter4245);
                    gen_if332=gen_if();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_if332.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "gen_iter"


    public static class gen_for_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "gen_for"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:456:1: gen_for : 'for' exprlist 'in' or_test ( gen_iter )? ;
    public final PythonProvenanceParser.gen_for_return gen_for() throws RecognitionException {
        PythonProvenanceParser.gen_for_return retval = new PythonProvenanceParser.gen_for_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal333=null;
        Token string_literal335=null;
        PythonProvenanceParser.exprlist_return exprlist334 =null;

        PythonProvenanceParser.or_test_return or_test336 =null;

        PythonProvenanceParser.gen_iter_return gen_iter337 =null;


        Object string_literal333_tree=null;
        Object string_literal335_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:456:8: ( 'for' exprlist 'in' or_test ( gen_iter )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:456:10: 'for' exprlist 'in' or_test ( gen_iter )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal333=(Token)match(input,133,FOLLOW_133_in_gen_for4261); 
            string_literal333_tree = 
            (Object)adaptor.create(string_literal333)
            ;
            adaptor.addChild(root_0, string_literal333_tree);


            pushFollow(FOLLOW_exprlist_in_gen_for4263);
            exprlist334=exprlist();

            state._fsp--;

            adaptor.addChild(root_0, exprlist334.getTree());

            string_literal335=(Token)match(input,IN,FOLLOW_IN_in_gen_for4265); 
            string_literal335_tree = 
            (Object)adaptor.create(string_literal335)
            ;
            adaptor.addChild(root_0, string_literal335_tree);


            pushFollow(FOLLOW_or_test_in_gen_for4267);
            or_test336=or_test();

            state._fsp--;

            adaptor.addChild(root_0, or_test336.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:456:38: ( gen_iter )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==IF||LA102_0==133) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:456:38: gen_iter
                    {
                    pushFollow(FOLLOW_gen_iter_in_gen_for4269);
                    gen_iter337=gen_iter();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_iter337.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "gen_for"


    public static class gen_if_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "gen_if"
    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:459:1: gen_if : 'if' test ( gen_iter )? ;
    public final PythonProvenanceParser.gen_if_return gen_if() throws RecognitionException {
        PythonProvenanceParser.gen_if_return retval = new PythonProvenanceParser.gen_if_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal338=null;
        PythonProvenanceParser.test_return test339 =null;

        PythonProvenanceParser.gen_iter_return gen_iter340 =null;


        Object string_literal338_tree=null;

        try {
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:459:7: ( 'if' test ( gen_iter )? )
            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:459:9: 'if' test ( gen_iter )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal338=(Token)match(input,IF,FOLLOW_IF_in_gen_if4285); 
            string_literal338_tree = 
            (Object)adaptor.create(string_literal338)
            ;
            adaptor.addChild(root_0, string_literal338_tree);


            pushFollow(FOLLOW_test_in_gen_if4287);
            test339=test();

            state._fsp--;

            adaptor.addChild(root_0, test339.getTree());

            // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:459:19: ( gen_iter )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==IF||LA103_0==133) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // D:\\Users\\ewi1462\\workspace\\pythonProvenance\\src\\G file Archive\\PythonProvenance.g:459:19: gen_iter
                    {
                    pushFollow(FOLLOW_gen_iter_in_gen_if4289);
                    gen_iter340=gen_iter();

                    state._fsp--;

                    adaptor.addChild(root_0, gen_iter340.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "gen_if"

    // Delegated rules


 

    public static final BitSet FOLLOW_NEWLINE_in_single_input365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_single_input383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_single_input400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_single_input402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_file_input426 = new BitSet(new long[]{0xC401100020003002L,0xFC0024001403B400L,0x0000000000007FE8L});
    public static final BitSet FOLLOW_stmt_in_file_input431 = new BitSet(new long[]{0xC401100020003002L,0xFC0024001403B400L,0x0000000000007FE8L});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input456 = new BitSet(new long[]{0xC400100020002000L,0x000024000403B400L});
    public static final BitSet FOLLOW_testlist_in_eval_input461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_decorator_in_decorators486 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AT_in_decorator505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dotted_attr_in_decorator507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000011000L});
    public static final BitSet FOLLOW_LPAREN_in_decorator510 = new BitSet(new long[]{0xC400100120002000L,0x000025100402B400L});
    public static final BitSet FOLLOW_arglist_in_decorator512 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_decorator515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_decorator519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr541 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_DOT_in_dotted_attr544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr546 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_decorators_in_funcdef562 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_funcdef567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_funcdef571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_parameters_in_funcdef573 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_funcdef575 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_funcdef577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameters609 = new BitSet(new long[]{0xC400100120002000L,0x000025100402B400L});
    public static final BitSet FOLLOW_varargslist_in_parameters613 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameters617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defparameter_in_varargslist639 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist649 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_defparameter_in_varargslist651 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist670 = new BitSet(new long[]{0x0000000100000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_varargslist692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist694 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist697 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_varargslist790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist792 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist795 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_varargslist820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_defparameter842 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ASSIGN_in_defparameter845 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_defparameter847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_stmt873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_stmt_inside_block905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt_inside_block916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_NEWLINE_in_simple_stmt936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_stmt_in_small_stmt949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_print_stmt_in_small_stmt964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_del_stmt_in_small_stmt980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pass_stmt_in_small_stmt998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flow_stmt_in_small_stmt1015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_stmt_in_small_stmt1031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_stmt_in_small_stmt1046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exec_stmt_in_small_stmt1063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_stmt_in_small_stmt1080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1095 = new BitSet(new long[]{0x0000000280008442L,0x004002880A004004L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_stmt1106 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_PLUSEQUAL_in_expr_stmt1115 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_MINUSEQUAL_in_expr_stmt1124 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_STAREQUAL_in_expr_stmt1133 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_SLASHEQUAL_in_expr_stmt1142 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_PERCENTEQUAL_in_expr_stmt1151 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_AMPEREQUAL_in_expr_stmt1160 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_VBAREQUAL_in_expr_stmt1169 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_CIRCUMFLEXEQUAL_in_expr_stmt1178 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_LEFTSHIFTEQUAL_in_expr_stmt1187 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_RIGHTSHIFTEQUAL_in_expr_stmt1196 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_DOUBLESTAREQUAL_in_expr_stmt1205 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_DOUBLESLASHEQUAL_in_expr_stmt1214 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRINT_in_print_stmt1246 = new BitSet(new long[]{0xC400100020002002L,0x000024040402B400L});
    public static final BitSet FOLLOW_printlist_in_print_stmt1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_print_stmt1253 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_printlist_in_print_stmt1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_print_argument_in_printlist1294 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_printlist1305 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_print_argument_in_printlist1307 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_printlist1312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_del_stmt1337 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_exprlist_in_del_stmt1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_pass_stmt1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_flow_stmt1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_flow_stmt1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_flow_stmt1408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_stmt_in_flow_stmt1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_break_stmt1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_continue_stmt1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_return_stmt1488 = new BitSet(new long[]{0xC400100020002002L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_return_stmt1491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_raise_stmt1522 = new BitSet(new long[]{0xC400100020002002L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_raise_stmt1525 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt1528 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_raise_stmt1530 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt1533 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_raise_stmt1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_name_in_import_stmt1560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_from_in_import_stmt1576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_import_name1599 = new BitSet(new long[]{0x0040000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dotted_as_names_in_import_name1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_import_from1633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_import_from1635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_import_from1637 = new BitSet(new long[]{0x0040000000000000L,0x0000010000009000L});
    public static final BitSet FOLLOW_STAR_in_import_from1654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_names_in_import_from1683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_import_from1712 = new BitSet(new long[]{0x0040000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_import_as_names_in_import_from1714 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_import_from1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names1763 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_import_as_names1766 = new BitSet(new long[]{0x0040000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names1768 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_import_as_names1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_import_as_name1812 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_AS_in_import_as_name1815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_import_as_name1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_NAME_in_import_as_name1842 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_AS_in_import_as_name1845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_import_as_name1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name1878 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_AS_in_dotted_as_name1881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name1885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_NAME_in_dotted_as_name1908 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_AS_in_dotted_as_name1911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name1915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names1942 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_dotted_as_names1945 = new BitSet(new long[]{0x0040000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names1947 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_135_in_global_stmt1983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_global_stmt1985 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_global_stmt1988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_global_stmt1990 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_131_in_exec_stmt2013 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_expr_in_exec_stmt2015 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_IN_in_exec_stmt2018 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_exec_stmt2020 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_exec_stmt2023 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_exec_stmt2025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_assert_stmt2048 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_assert_stmt2050 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_assert_stmt2053 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_assert_stmt2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_compound_stmt2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_compound_stmt2096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_compound_stmt2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_compound_stmt2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_stmt_in_compound_stmt2150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcdef_in_compound_stmt2168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classdef_in_compound_stmt2186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_clause_in_if_stmt2209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_elif_clauses_in_if_stmt2212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_else_clause_in_if_stmt2217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_clause2247 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_if_clause2249 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_if_clause2251 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_if_clause2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elif_clause_in_elif_clauses2277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_elif_clause2302 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_elif_clause2304 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_elif_clause2306 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_elif_clause2308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_else_clause2333 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_else_clause2335 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_else_clause2337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_clause_in_while_stmt2356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_else_clause_in_while_stmt2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_while_clause2393 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_while_clause2395 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_while_clause2397 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_while_clause2399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_for_stmt2445 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_exprlist_in_for_stmt2447 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_IN_in_for_stmt2449 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_for_stmt2451 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_for_stmt2453 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_for_stmt2455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_clause_in_try_stmt2486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_except_clause_in_try_stmt2488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_finally_clause_in_try_stmt2491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_try_clause2520 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_try_clause2522 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_try_clause2524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_except_clause2547 = new BitSet(new long[]{0x4000000000040000L,0x0000000000001000L});
    public static final BitSet FOLLOW_trailer_in_except_clause2549 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_except_clause2552 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_except_clause2554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_finally_clause2580 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_finally_clause2582 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_finally_clause2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_with_stmt2603 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_with_stmt2605 = new BitSet(new long[]{0x0000000000040200L,0x0000000000008000L});
    public static final BitSet FOLLOW_with_var_in_with_stmt2608 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_with_stmt2612 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_with_stmt2614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_with_var2631 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_expr_in_with_var2639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_suite2658 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_INDENT_in_suite2660 = new BitSet(new long[]{0xC401100020003000L,0xFC0024001402B400L,0x0000000000007FE8L});
    public static final BitSet FOLLOW_stmt_inside_block_in_suite2663 = new BitSet(new long[]{0xC401100020803000L,0xFC0024001402B400L,0x0000000000007FE8L});
    public static final BitSet FOLLOW_DEDENT_in_suite2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDENT_in_suite2686 = new BitSet(new long[]{0xC401100020003000L,0xFC0024001402B400L,0x0000000000007FE8L});
    public static final BitSet FOLLOW_stmt_inside_block_in_suite2689 = new BitSet(new long[]{0xC401100020803000L,0xFC0024001402B400L,0x0000000000007FE8L});
    public static final BitSet FOLLOW_DEDENT_in_suite2693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_test_in_test2716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_test_in_or_test2729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_OR_in_or_test2732 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_and_test_in_or_test2735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_not_test_in_and_test2754 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_AND_in_and_test2757 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_not_test_in_and_test2760 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NOT_in_not_test2780 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_not_test_in_not_test2783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comparison_in_not_test2796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_comparison2813 = new BitSet(new long[]{0x3080C04000000012L,0x00000000000C0018L});
    public static final BitSet FOLLOW_LESS_in_comparison2818 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_GREATER_in_comparison2821 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_EQUAL_in_comparison2824 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_GREATEREQUAL_in_comparison2827 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_LESSEQUAL_in_comparison2830 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_ALT_NOTEQUAL_in_comparison2833 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_NOTEQUAL_in_comparison2836 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_IN_in_comparison2839 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_NOTIN_in_comparison2842 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_IS_in_comparison2845 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_ISNOT_in_comparison2848 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_expr_in_comparison2852 = new BitSet(new long[]{0x3080C04000000012L,0x00000000000C0018L});
    public static final BitSet FOLLOW_xor_expr_in_expr2873 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_VBAR_in_expr2876 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_xor_expr_in_expr2879 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr2895 = new BitSet(new long[]{0x0000000000004002L});
    public static final BitSet FOLLOW_CIRCUMFLEX_in_xor_expr2898 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr2901 = new BitSet(new long[]{0x0000000000004002L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr2921 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AMPER_in_and_expr2924 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr2927 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr2947 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000002L});
    public static final BitSet FOLLOW_LEFTSHIFT_in_shift_expr2951 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_shift_expr2954 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr2958 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000002L});
    public static final BitSet FOLLOW_term_in_arith_expr2979 = new BitSet(new long[]{0x0000000000000002L,0x0000000004002000L});
    public static final BitSet FOLLOW_PLUS_in_arith_expr2983 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_MINUS_in_arith_expr2986 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_term_in_arith_expr2990 = new BitSet(new long[]{0x0000000000000002L,0x0000000004002000L});
    public static final BitSet FOLLOW_factor_in_term3011 = new BitSet(new long[]{0x0000000140000002L,0x0000014000000000L});
    public static final BitSet FOLLOW_STAR_in_term3015 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_SLASH_in_term3020 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_DOUBLESLASH_in_term3025 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_term3030 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_factor_in_term3035 = new BitSet(new long[]{0x0000000140000002L,0x0000014000000000L});
    public static final BitSet FOLLOW_PLUS_in_factor3052 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_factor_in_factor3054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_factor3065 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_factor_in_factor3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_factor3078 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_factor_in_factor3080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_power_in_factor3091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_power3107 = new BitSet(new long[]{0x4000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_trailer_in_power3110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atom3137 = new BitSet(new long[]{0xC400100020002000L,0x000024100402B400L});
    public static final BitSet FOLLOW_testlist_gexp_in_atom3156 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_atom3176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_atom3196 = new BitSet(new long[]{0xC400100020002000L,0x000024008402B400L});
    public static final BitSet FOLLOW_listmaker_in_atom3199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_atom3222 = new BitSet(new long[]{0xC400100020002000L,0x000024010402B400L});
    public static final BitSet FOLLOW_dictmaker_in_atom3225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom3245 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_atom3248 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_atom3262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTTED_NAME_in_atom3283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_atom3304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINT_in_atom3328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_atom3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_atom3376 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PERCENT_in_atom3379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_string_argument_in_atom3381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_string_argument3416 = new BitSet(new long[]{0xC400100120002000L,0x000025000402B400L});
    public static final BitSet FOLLOW_arglist_in_string_argument3421 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_string_argument3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_arguments_in_listmaker3441 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_list_for_in_listmaker3443 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RBRACK_in_listmaker3446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_listmaker3464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_argument_in_list_arguments3481 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_list_arguments3484 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_list_argument_in_list_arguments3486 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_testlist_in_list_argument3511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dict_arguments_in_dictmaker3522 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RCURLY_in_dictmaker3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RCURLY_in_dictmaker3539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments3568 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_dict_arguments3570 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments3572 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_dict_arguments3582 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments3584 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_dict_arguments3586 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_dict_argument_in_dict_arguments3588 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_dict_arguments3593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_dict_argument3634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist_gexp3647 = new BitSet(new long[]{0x0000000000080002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_testlist_gexp3660 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_testlist_gexp3663 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_testlist_gexp3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_testlist_gexp3687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_trailer3725 = new BitSet(new long[]{0xC400100120002000L,0x000025100402B400L});
    public static final BitSet FOLLOW_inner_trailer_in_trailer3728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_trailer3733 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_subscriptlist_in_trailer3736 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RBRACK_in_trailer3738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arglist_in_inner_trailer3751 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_inner_trailer3753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_inner_trailer3767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist3796 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist3806 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist3808 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist3813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_subscript3858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist3877 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_exprlist3888 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_expr_in_exprlist3891 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_exprlist3896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist3921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_classdef3935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NAME_in_classdef3939 = new BitSet(new long[]{0x0000000000040000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_classdef3942 = new BitSet(new long[]{0xC400100020002000L,0x000024100402B400L});
    public static final BitSet FOLLOW_testlist_in_classdef3944 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPAREN_in_classdef3947 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_classdef3951 = new BitSet(new long[]{0x0100000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_suite_in_classdef3953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arglist3985 = new BitSet(new long[]{0x0000000000080402L});
    public static final BitSet FOLLOW_ASSIGN_in_arglist3988 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_sub_argument_in_arglist3990 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_arglist3995 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_argument_in_arglist3997 = new BitSet(new long[]{0x0000000000080402L});
    public static final BitSet FOLLOW_ASSIGN_in_arglist4000 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_sub_argument_in_arglist4002 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_STAR_in_arglist4029 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_arglist4031 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_COMMA_in_arglist4034 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist4036 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_arglist4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist4054 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_arglist4056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_print_argument4074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_argument4085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_sub_argument4114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_for_in_list_iter4124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_if_in_list_iter4138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_list_for4157 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_exprlist_in_list_for4159 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_IN_in_list_for4161 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_testlist_in_list_for4163 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_list_iter_in_list_for4166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_list_if4199 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_list_if4201 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_list_iter_in_list_if4204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_gen_iter4233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_if_in_gen_iter4245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_gen_for4261 = new BitSet(new long[]{0xC400100020002000L,0x000024000400B400L});
    public static final BitSet FOLLOW_exprlist_in_gen_for4263 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_IN_in_gen_for4265 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_or_test_in_gen_for4267 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_gen_iter_in_gen_for4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_gen_if4285 = new BitSet(new long[]{0xC400100020002000L,0x000024000402B400L});
    public static final BitSet FOLLOW_test_in_gen_if4287 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_gen_iter_in_gen_if4289 = new BitSet(new long[]{0x0000000000000002L});

}